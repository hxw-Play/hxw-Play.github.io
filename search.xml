<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>upload</title>
      <link href="/2020/03/07/upload%E4%B8%8A%E4%BC%A0/"/>
      <url>/2020/03/07/upload%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<p>get post</p><a id="more"></a><h3 id="upload-vant-上传图片"><a href="#upload-vant-上传图片" class="headerlink" title="upload vant 上传图片"></a>upload vant 上传图片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;demo&quot;&gt;</span><br><span class="line">        &lt;Uploader :after-read=&quot;afterRead&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Vue from &apos;vue&apos;;</span><br><span class="line">import &#123; Uploader &#125; from &apos;vant&apos;;</span><br><span class="line">import &apos;vant/lib/uploader/style&apos;;</span><br><span class="line">import axios from &apos;axios&apos;;</span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        Uploader</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        afterRead(file) &#123;</span><br><span class="line">            const url = &apos;http://www.bufantec.com/api/leju/admin/material/uploadImg&apos;;</span><br><span class="line">            // 此时可以自行将文件上传至服务器</span><br><span class="line">            console.log(file);</span><br><span class="line">            // 1. 获取file对象 从打印的结果可以看到结构</span><br><span class="line">            var fileObj = file.file;</span><br><span class="line">            // 2. 创建formdata对象 包装数据</span><br><span class="line">            var fd = new FormData();</span><br><span class="line">            // 3. 添加file, key必须是&apos;file&apos;</span><br><span class="line">            fd.append(&apos;file&apos;,fileObj);</span><br><span class="line">            // 4. 发送数据</span><br><span class="line">            axios.post(</span><br><span class="line">                url,</span><br><span class="line">                fd</span><br><span class="line">            ).then(res=&gt;&#123;</span><br><span class="line">                console.log(res);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="uniapp-上传图片"><a href="#uniapp-上传图片" class="headerlink" title="uniapp 上传图片"></a>uniapp 上传图片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;button type=&quot;primary&quot; @tap=&quot;selAvatar&quot;&gt;上传头像&lt;/button&gt;</span><br><span class="line">&lt;image style=&quot;width:100px;height: 100px;&quot; :src=&quot;avatar&quot; mode=&quot;&quot;&gt;&lt;/image&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">avatar: &apos;&apos;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">     methods()&#123;</span><br><span class="line">       selAvatar()&#123;</span><br><span class="line">// 调用uniapp api ,可以访问手机相册</span><br><span class="line">uni.chooseImage(&#123;</span><br><span class="line">    count: 1, //默认9</span><br><span class="line">    sizeType: [&apos;original&apos;, &apos;compressed&apos;], //可以指定是原图还是压缩图，默认二者都有</span><br><span class="line">    sourceType: [&apos;album&apos;], //从相册选择</span><br><span class="line">    success: function (res) &#123;</span><br><span class="line">// 默认选择的结果是数组类型  这里只选第一个</span><br><span class="line">    var file = res.tempFilePaths[0];</span><br><span class="line">// 执行上传</span><br><span class="line">uni.uploadFile(&#123;</span><br><span class="line">    url: settingFile.host+&apos;/api/leju/admin/material/uploadImg&apos;, //仅为示例，非真实的接口地址</span><br><span class="line">    filePath: file,</span><br><span class="line">    name: &apos;file&apos;,</span><br><span class="line">    success: (uploadFileRes) =&gt; &#123;</span><br><span class="line">var resObj = JSON.parse(uploadFileRes.data);</span><br><span class="line">_this.avatar = resObj.ossUrl</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;// 上传头像</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>get和post</title>
      <link href="/2020/02/25/get%20post/"/>
      <url>/2020/02/25/get%20post/</url>
      
        <content type="html"><![CDATA[<p>get post</p><a id="more"></a><h3 id="get和post的区别"><a href="#get和post的区别" class="headerlink" title="get和post的区别"></a>get和post的区别</h3><ol><li>对参数的数据类型,get只接受ASCII字符,而POST没有限制,允许二进制.</li><li>get在浏览器回退/刷新是无害的,而post会再次提交请求</li><li>get请求只能进行url编码,而post支持多种编码方式</li><li>post比get更安全,因为get参数直接暴露在Url中,post参数在HTTP消息主题中,而且不会保存在浏览器历史或web服务器日志中</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue双向数据绑定</title>
      <link href="/2020/02/21/%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/"/>
      <url>/2020/02/21/%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<p>粗浅理解</p><a id="more"></a><h1 id="对-MVVM-的理解"><a href="#对-MVVM-的理解" class="headerlink" title="对 MVVM 的理解"></a>对 <strong>MVVM</strong> 的理解</h1><p><strong>MVVM</strong> 分为 <strong>Model</strong>,<strong>View</strong>,<strong>ViewModel</strong> 三者<br><strong>Model</strong> 代表数据模型,数据和业务逻辑都在 Model 层中定义<br><strong>View</strong> 代表 UI 视图,负责数据的展示<br><strong>ViewModel</strong> 负责监听 Model 中数据的改变并且控制视图的更行,处理用户交互操作<br>Model 和 View 并无直接关联,而是通过 ViewModel 来进行联系的,Model 和 ViewModel 之间有着双向数据绑定的联系.因此当 Model 中的数据改变是会触发 View 层的触发,View 中由于用户操作而改变的数据也会在 Model 中通步</p><h1 id="Vue的双向数据绑定是如何实现的"><a href="#Vue的双向数据绑定是如何实现的" class="headerlink" title="Vue的双向数据绑定是如何实现的?"></a>Vue的双向数据绑定是如何实现的?</h1><ul><li>简单来说就是 <strong>数据劫持</strong>和<strong>发布订阅者模式</strong>实现的</li></ul><ol><li>需要Observe的数据对象进行递归遍历,包括子属性对象的属性,都加上setter和getter这样的话,就给这个对象的某个值赋值,就会触发setter,那么就能监听到了数据变化</li><li>Compile解析模板指令,将模板中的变量替换成数据,然后初始化渲染页面视图,并将每个指令对应的节点绑定更新函数,添加监听数据的订阅者,一旦数据有变动,收到通知,更新视图</li><li>Watcher订阅者是Observe 和Compile之间通信的桥梁,主要做的事情是:<br> (1) 在自身实例化时往属性订阅器(dep)里面添加自己<br> (2) 自身必须有一个update()方法<br> (3) 待属性变动dep.notice()通知时,能调用自身的update方法,并触发Compile中绑定的回调</li><li>MVVM作为数据绑定的入口,整合Observe,Compile和Watcher三者,通过Compile来解析编译模板指令,最终利用Watcher搭起Observe和Compile之间的通信桥梁,达到数据变化-&gt;视图更新;视图交互变化(input)-&gt;数据model变更的双向数据绑定效果 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;双向数据绑定&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-model=&apos;name&apos;&gt;</span><br><span class="line">        &lt;div v-text=&apos;name&apos;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        class Vue &#123;</span><br><span class="line">            constructor(options) &#123;</span><br><span class="line"></span><br><span class="line">                this.options = options</span><br><span class="line">                this.$data = options.data</span><br><span class="line">                this.$el = document.querySelector(options.el)</span><br><span class="line">                this._directives = &#123;&#125;</span><br><span class="line">                //数据劫持</span><br><span class="line">                this.Observe(this.$data)</span><br><span class="line">                //解析指令</span><br><span class="line">                this.Compile(this.$el)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Observe(data) &#123;</span><br><span class="line">                for (let key in data) &#123;</span><br><span class="line">                    this._directives[key] = [] //空数组</span><br><span class="line">                    let val = data[key] // &apos;今晚吃鸡呐，大吉大利！&apos;</span><br><span class="line">                    let _obj = this._directives[key] //空数组</span><br><span class="line">                    Object.defineProperty(this.$data, key, &#123;</span><br><span class="line">                        get: function () &#123;</span><br><span class="line">                            return val</span><br><span class="line">                        &#125;,</span><br><span class="line">                        set: function (newVal) &#123;</span><br><span class="line">                            if (val !== newVal) &#123;</span><br><span class="line">                                val = newVal</span><br><span class="line">                                _obj.forEach(item =&gt; &#123;</span><br><span class="line">                                    item.update()</span><br><span class="line">                                &#125;);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Compile(el) &#123;</span><br><span class="line">                let nodes = el.children</span><br><span class="line">                for (let i = 0; i &lt; nodes.length; i++) &#123;</span><br><span class="line">                    let node = nodes[i]</span><br><span class="line">                    // console.log(node.children.length) 0 </span><br><span class="line">                    if (node.children.length) &#123;</span><br><span class="line">                        this.Compile(node)</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (node.hasAttribute(&apos;v-text&apos;)) &#123;</span><br><span class="line">                        let attrValue = node.getAttribute(&apos;v-text&apos;);</span><br><span class="line">                        this._directives[attrValue].push(new Watch(node, this, attrValue, &apos;innerHTML&apos;));</span><br><span class="line">                        console.log( this._directives)</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (node.hasAttribute(&apos;v-model&apos;)) &#123;</span><br><span class="line">                        let _this = this;</span><br><span class="line">                        let attrValue = node.getAttribute(&apos;v-model&apos;)</span><br><span class="line">                        this._directives[attrValue].push(new Watch(node, this, attrValue, &apos;value&apos;))</span><br><span class="line">                        console.log( this._directives)</span><br><span class="line">                        node.addEventListener(&apos;input&apos;, (function () &#123;</span><br><span class="line">                            return function () &#123;</span><br><span class="line">                                _this.$data[attrValue] = node.value</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;)())</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        class Watch&#123;</span><br><span class="line">            constructor(el,vm,exp,attr)&#123;</span><br><span class="line">                this.el = el;</span><br><span class="line">                this.vm = vm;</span><br><span class="line">                this.exp = exp;</span><br><span class="line">                this.attr = attr;</span><br><span class="line"></span><br><span class="line">                // console.log(el)  // &lt;input type=&quot;text&quot; v-model=&apos;name&apos;&gt;</span><br><span class="line">                // console.log(vm)  //vm实例</span><br><span class="line">                // console.log(exp) //name</span><br><span class="line">                // console.log(attr) //value</span><br><span class="line">                this.update()</span><br><span class="line">            &#125;</span><br><span class="line">            update()&#123;</span><br><span class="line">                this.el[this.attr] = this.vm.$data[this.exp]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        const app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                name: &apos;今晚吃鸡呐，大吉大利！&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack</title>
      <link href="/2020/02/16/webpack/"/>
      <url>/2020/02/16/webpack/</url>
      
        <content type="html"><![CDATA[<p>webpack配置</p><a id="more"></a><h3 id="webpack配置入口出口"><a href="#webpack配置入口出口" class="headerlink" title="webpack配置入口出口"></a>webpack配置入口出口</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">module.exports=&#123;</span><br><span class="line">    //入口文件的配置项</span><br><span class="line">    entry:path.join(__dirname,&apos;./src/index.js&apos;),</span><br><span class="line">    //出口文件的配置项</span><br><span class="line">    output:&#123;</span><br><span class="line">        path:path.join(__dirname,&apos;/dist&apos;)</span><br><span class="line">        filename:&apos;bundle.js&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    //模块:例如解读CSS,图片如何转换,压缩</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;test: /\.css$/, use: [&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;postcss-loader&apos;]&#125;,</span><br><span class="line">            &#123;test: /\.less$/, use: [&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;less-loader&apos;]&#125;,</span><br><span class="line">            &#123;test: /\.scss$/, use: [&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;sass-loader&apos;]&#125;,</span><br><span class="line">            &#123;test: /\.jpg|png|gif|bmp|ttf|eot|svg|woff|woff2$/,use: [&apos;url-loader?limit=10000&apos;]&#125;,</span><br><span class="line">            &#123;test: /\.js$/,use:&apos;babel-loader&apos;, exclude: /node_modules/ &#125;,</span><br><span class="line">            &#123;test: /\.vue$/, loader: &apos;vue-loader&apos;&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    //插件,用于生产模板和各项功能</span><br><span class="line">    plugins: [htmlPlguin, new VueLoaderPlugin()],</span><br><span class="line">    //配置webpack开发服务功能</span><br><span class="line">    devServer:&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;dev&quot;: &quot;node build/dev-server.js&quot;,</span><br><span class="line">&quot;build&quot;: &quot;node build/build.js&quot;,</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue路由钩子函数</title>
      <link href="/2020/02/14/vue%E8%B7%AF%E7%94%B1%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/"/>
      <url>/2020/02/14/vue%E8%B7%AF%E7%94%B1%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>vue</p><a id="more"></a><h3 id="vue-组件级路由钩子函数介绍-及实际应用"><a href="#vue-组件级路由钩子函数介绍-及实际应用" class="headerlink" title="vue 组件级路由钩子函数介绍,及实际应用"></a>vue 组件级路由钩子函数介绍,及实际应用</h3><ol><li><p>全局钩子<br><strong>router.beforEach</strong>的函数有三个参数<br>to:router 即将进入的路由对象<br>from:当前导航即将离开的路由<br>next:Function,进行管道中的一个钩子,如果执行完了,则导航的状态就是 confirmed(确认的);否则为 false,终止导航.<br>用于权限验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">    const role = localStorage.getItem(&apos;ms_username&apos;);</span><br><span class="line">    if(!role &amp;&amp; to.path !== &apos;/login&apos;)&#123;</span><br><span class="line">        next(&apos;/login&apos;);</span><br><span class="line">    &#125;else if(to.meta.permission)&#123;</span><br><span class="line">        // 如果是管理员权限则可进入，这里只是简单的模拟管理员权限而已</span><br><span class="line">        role === &apos;admin&apos; ? next() : next(&apos;/403&apos;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        // 简单的判断IE10及以下不进入富文本编辑器，该组件不兼容</span><br><span class="line">        if(navigator.userAgent.indexOf(&apos;MSIE&apos;) &gt; -1 &amp;&amp; to.path === &apos;/editor&apos;)&#123;</span><br><span class="line">            Vue.prototype.$alert(&apos;vue-quill-editor组件不兼容IE10及以下浏览器，请使用更高版本的浏</span><br><span class="line">            览器查看&apos;, &apos;浏览器不兼容通知&apos;, &#123;</span><br><span class="line">                confirmButtonText: &apos;确定&apos;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            next();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>router.afterEach</strong> 的函数的有两个参数<br>to:router 即将进入的路由对象<br>from:当前导航即将离开的路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    router.afterEach((to, from) =&gt; &#123; // 举例: 通过跳转后改变document.title</span><br><span class="line">　if( to.meta.title )&#123;</span><br><span class="line">　　　window.document.title = to.meta.title //每个路由下title</span><br><span class="line">　&#125;else&#123;</span><br><span class="line">　　　window.document.title = &apos;默认的title&apos;</span><br><span class="line">　&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>针对单个路由钩子函数<br><strong>beforeEnter</strong> 可以在路由配置上直接定义 beforeEnter 钩子也可以在这里配置路由跳转权限问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">routes: [</span><br><span class="line">    &#123;</span><br><span class="line">    path: &apos;/foo&apos;,</span><br><span class="line">    component: Foo,</span><br><span class="line">    beforeEnter: (to, from, next) =&gt; &#123;</span><br><span class="line">    console.log(&apos;beforeEnter&apos;)</span><br><span class="line">　　　　next() //正常跳转，不写的话，不会跳转</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件级钩子函数<br> <strong>beforeRouteEnter</strong>    <strong>beforeRouteUpdate</strong>    <strong>beforeRouteLeave</strong></p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">    export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            test:&apos;改变之前&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeCreate()&#123;//组件生命周期函数</span><br><span class="line">        console.log(&apos;beforeCreate&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">    //当进入组件之前，执行 beforRouteEnter 路由钩子函数</span><br><span class="line">    beforeRouteEnter(to,from,next)&#123;</span><br><span class="line">        console.log(&apos;beforRouteEnter&apos;)</span><br><span class="line">        console.log(this) // 结果为undefined，因为在执行beforRouteEnter时候，组件还没有被创建出来；</span><br><span class="line">                            先执行beforRouteEnter，再执行beforeCreate</span><br><span class="line">        next((vm)=&gt;&#123; //参数vm就是当前组件的实例。</span><br><span class="line">            vm.test = &apos;我被改变了&apos;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeRouteUpdate(to,from,next)&#123;</span><br><span class="line">    // 在当前路由改变，但是该组件被复用时调用</span><br><span class="line">    // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span><br><span class="line">    // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span><br><span class="line">    // 可以访问组件实例 `this`</span><br><span class="line">        console.log(&apos;beforeRouteUpdate&apos;)</span><br><span class="line">        next()</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeRouteLeave(to,from,next)&#123;//离开组件的时候触发</span><br><span class="line">        // 导航离开该组件的对应路由时调用</span><br><span class="line">        // 可以访问组件实例 `this`</span><br><span class="line">        //什么都不写的时候，不会离开(走下一步)</span><br><span class="line">        next()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>实际应用<br>1)  清除当前组件中的定时器</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">当一个组件中有一个定时器中,在路由进行切换的时候,可使用beforeRouteLeave</span><br><span class="line">beforeRouteLeave(to,from,next)&#123;</span><br><span class="line">    window.clearInterval(this.timer)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ol><p>2)  当页面中有未关闭的窗口,或未保存的内容时,阻止页面跳转<br>        <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteLeave(to,from,next)&#123;</span><br><span class="line">     //判断是否弹出框的状态和保存信息与否</span><br><span class="line">    if (this.dialogVisibility === true) &#123;</span><br><span class="line">    this.dialogVisibility = false //关闭弹出框</span><br><span class="line">    next(false) //回到当前页面, 阻止页面跳转</span><br><span class="line">    &#125;else if(this.saveMessage === false) &#123;</span><br><span class="line">    //弹出警告</span><br><span class="line">    next(false) //回到当前页面, 阻止页面跳转</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">    next() //否则允许跳转</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3)  当页面中有未关闭的窗口,或未保存的内容时,阻止页面跳转<br>        <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteLeave (to, from, next) &#123;</span><br><span class="line">localStorage.setItem(name, content); //保存到localStorage中</span><br><span class="line">next()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>localStorage ,sessionStorage ,Cookie</title>
      <link href="/2020/02/14/%E5%AD%98%E5%82%A8%E4%BB%A5%E5%8F%8Acookie/"/>
      <url>/2020/02/14/%E5%AD%98%E5%82%A8%E4%BB%A5%E5%8F%8Acookie/</url>
      
        <content type="html"><![CDATA[<p>localStorage ,sessionStorage ,cookie</p><a id="more"></a><h3 id="localStorage-sessionStorage"><a href="#localStorage-sessionStorage" class="headerlink" title="localStorage ,sessionStorage"></a>localStorage ,sessionStorage</h3><ul><li>HTML5 的 WebStorage 提供了两种 API：localStorage(本地存储)和 sessionStorage(会话存储)<br>WebStorage 是本地存储: 存储在客服端 包括 localStorage(本地存储)和 sessionStorage(会话存储)不与服务器进行交互通信</li><li>获取方式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">window.localStorage    window.sessionStorage 公用方法</span><br><span class="line">setItem(key,value)  --保存数据,以键值对的方式存储信息</span><br><span class="line">getItem(key)        --获取数据,将键值传入,即可获取对应的value值</span><br><span class="line">removeItem(key)     --删除单个数据 根据键值对移除对应的信息</span><br><span class="line">clear()             -- 删除所有的数据</span><br></pre></td></tr></table></figure></li></ul><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><ul><li>cookie：是网景公司的前雇员在1993年发明。它的主要用于保存登陆信息，比如登陆某个网站市场可以看到’记住密码’，这就是通过在cookie中存入一段辨别用户身份的数据来实现的。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">封装的cookie方法</span><br><span class="line">var manageCookie = &#123;</span><br><span class="line">    setCookie:function(key,value,date)&#123;</span><br><span class="line">        //增 改</span><br><span class="line">        var oDate = new Date();</span><br><span class="line">        oDate.setDate(oDate.getDate() + date);</span><br><span class="line">         document.cookie = key + &apos;=&apos; + value + &apos;;expires = &apos; + oDate;</span><br><span class="line">         return this</span><br><span class="line">    &#125;,</span><br><span class="line">    removeCookie:function(key,callback )&#123;</span><br><span class="line">        this.setCookie(key,&apos;&apos;,-1);</span><br><span class="line">        return this</span><br><span class="line">    &#125;,</span><br><span class="line">    getCookie:function(key,callback)&#123;</span><br><span class="line">        var allCookie = document.cookie;</span><br><span class="line">       var cookieArr  = allCookie.split(&apos;; &apos;);</span><br><span class="line">       cookieArr.forEach(ele=&gt; &#123;</span><br><span class="line">          var item = ele.split(&apos;=&apos;);</span><br><span class="line">          if(item[0] == key)&#123;</span><br><span class="line">             callback?callback(item[1]) : &apos;&apos;;</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       return this</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">manageCookie.setCookie(&apos;name&apos;,&apos;cc&apos;,3);</span><br><span class="line">manageCookie.setCookie(&apos;school&apos;,&apos;bufan&apos;,3).removeCookie(&apos;name&apos;).getCookie(&apos;school&apos;,cb)</span><br><span class="line">function cb(date)&#123;</span><br><span class="line">    console.log(date)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="localStorage-sessionStorage-Cookie-的区别"><a href="#localStorage-sessionStorage-Cookie-的区别" class="headerlink" title="localStorage ,sessionStorage ,Cookie 的区别"></a>localStorage ,sessionStorage ,Cookie 的区别</h3><ol><li>存储大小</li></ol><ul><li>cookie:一般不超过4k(每次http都会请求都会携带cookie),所以cookie只适合保存很小的数据,如会话标识)</li><li>sessionStorage,localStorage: 5M或者更大</li></ul><ol start="2"><li>数据有效期</li></ol><ul><li>cookie:一般由服务器生成,可以设置失效时间,若没有设置时间,关闭浏览器cookie失效,若设置了时间,cookie就会存放在硬盘里,过期才会失效</li><li>sessionStorage:仅在当前浏览器窗口关闭之前有效,关闭页面或者浏览器会被清除</li><li>localStorage: 永久有效,窗口或者浏览器关闭也会一直保存,除非手动永久清除,因此用作持久数据</li></ul><ol><li>作用域</li></ol><ul><li>cookie:在所有同源窗口中都是共享的</li><li>sessionStorage: 在同一个浏览器窗口是共享的(不同浏览器,同一个页面也是不共享的)</li><li>localStorage : 在所有同源窗口中都是共享的</li></ul><ol start="4"><li>通信</li></ol><ul><li>cookie: 始终携带在同源的http中,即使不需要,故cookie在浏览器和服务器之间来回传递;如果使用cookie保存过多数据会造成性能问题</li><li>sessionStorage,localStorage: 仅在客户端(浏览器)中保存,不参与和服务器的通信,不会自动把数据发送给服务器(仅在本地保存)</li></ul><ol start="5"><li>易用性</li></ol><ul><li>cookie:需要自己进行封装.原生的cookie接口不够友好</li><li>sessionStorage,localStorage: 原生接口可以接受,可以封装来对Object和Array有更好的支持</li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>cookie:判断用户是否登陆过网址,以便实现下次自动登录或记住密码;保存信息</li><li>sessionStorage: 敏感性账号一次性登录;单页面用的比较多</li><li>localStorage: 用于长期登录(判断用户是否已登录),适合长期存在本地的数据</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>登录权限验证</title>
      <link href="/2020/02/08/%E7%99%BB%E5%BD%95%E6%9D%83%E9%99%90%E9%AA%8C%E8%AF%81/"/>
      <url>/2020/02/08/%E7%99%BB%E5%BD%95%E6%9D%83%E9%99%90%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<p>权限验证</p><a id="more"></a><h3 id="session-权限验证原理"><a href="#session-权限验证原理" class="headerlink" title="session 权限验证原理"></a>session 权限验证原理</h3><ol><li>用户访问服务器,服务器会在必要的时候创建 session对象 ,该对象有一个唯一的sessionid</li><li>服务器把创建的session对象存储到服务器的session集合中,并把当前的sessionid通过请求的response对象设置到客户端的cookie中</li><li>客户端之后的每一次请求,都会默认携带cookie,服务器可以根据客户端是否有cookie,并且判断是否有可用的sessionid来判断用户时候登陆</li><li>session存在于服务端,cookie存在于客服端,session有一个默认的过期时间,大概20-30min可手动设置或清除</li><li>session存在一用户的整个回话期间,如果用户更换浏览器,则会创建新的session对象</li></ol><h3 id="token-权限验证原理"><a href="#token-权限验证原理" class="headerlink" title="token 权限验证原理"></a>token 权限验证原理</h3><ol><li>用户访问服务器,登陆成功后,服务器根据特定算法,生成一个字符串,返回给客户端,我们称之为token</li><li>之后客户每次发送请求.必须携带token</li><li>服务器不必关系某个请求从哪一台客户端发送过来,只需要对当前的token进行验证,那么就认为是通过的</li><li>token一般是有过期时间地点,这个由后台设定</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>跨域</title>
      <link href="/2020/02/07/%E8%B7%A8%E5%9F%9F%E5%A4%84%E7%90%86/"/>
      <url>/2020/02/07/%E8%B7%A8%E5%9F%9F%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>跨域</p><a id="more"></a><h3 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">JSONP只支持`GET`请求，CORS支持所有类型的HTTP请求。JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据</span><br><span class="line"></span><br><span class="line">//服务端返回如下（后端返回执行函数）：</span><br><span class="line">jsonPCallback(&#123;</span><br><span class="line">    &quot;status&quot;: true,</span><br><span class="line">    &quot;user&quot;: &quot;admin&quot;</span><br><span class="line">&#125;)</span><br><span class="line">// js写法</span><br><span class="line">var scriptEle = document.createElement(&apos;script&apos;);</span><br><span class="line">scriptEle.src = &quot;http://192.168.0.120:3000/users?callback=jsonpCallBack&quot;;</span><br><span class="line">document.body.appendChild(scriptEle);</span><br><span class="line">//浏览器机制会执行这个函数</span><br><span class="line">function jsonpCallBack(res) &#123;</span><br><span class="line">    console.log(res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="cors"><a href="#cors" class="headerlink" title="cors"></a>cors</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">在服务端   res.header(&apos;Access-Control-Allow-Origin&apos;, &apos;地址&apos;);</span><br><span class="line">router.get(&quot;/&quot;, function(req,res,next)&#123;</span><br><span class="line">    // 设置允许访问的头为：*  即任何地址都可访问 但是发送请求不能携带cookie</span><br><span class="line">    res.header(&apos;Access-Control-Allow-Origin&apos;, &apos;*&apos;);</span><br><span class="line">    // Access-Control-Allow-Headers ,可根据浏览器的F12查看,把对应的粘贴在这里就行</span><br><span class="line">    // res.header(&apos;Access-Control-Allow-Headers&apos;, &apos;Content-Type&apos;);</span><br><span class="line">    // res.header(&apos;Access-Control-Allow-Methods&apos;, &apos;*&apos;);</span><br><span class="line">    // res.header(&apos;Content-Type&apos;, &apos;application/json;charset=utf-8&apos;);</span><br><span class="line">    next();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="proxy-代理"><a href="#proxy-代理" class="headerlink" title="proxy 代理"></a>proxy 代理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在webpack中的webpack-dev-server中添加</span><br><span class="line">      proxy: &#123;</span><br><span class="line">      // 配置代理 希望拦截当前的host地址 替换为目标地址</span><br><span class="line">      // key: &#123;&#125;   ;  key为拦截的规则,可以是正则表达式 表示以什么开头</span><br><span class="line">      &apos;/admin&apos;: &#123;</span><br><span class="line">        target: `要代理的地址`,</span><br><span class="line">        changeOrigin: true, // 如果是跨域 需要添加</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          // [&apos;/admin&apos;]: &apos;/abc&apos;   /admin/xx/xx ==&gt; /abc/xx/xx</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h3 id="nginx-后端处理"><a href="#nginx-后端处理" class="headerlink" title="nginx 后端处理"></a>nginx 后端处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line"> listen 3002;</span><br><span class="line"> server_name localhost;</span><br><span class="line"> location /ok &#123;</span><br><span class="line"> proxy_pass http://localhost:3000;</span><br><span class="line"> # 指定允许跨域的方法，*代表所有</span><br><span class="line"> add_header Access-Control-Allow-Methods *;</span><br><span class="line"> # 预检命令的缓存，如果不缓存每次会发送两次请求</span><br><span class="line"> add_header Access-Control-Max-Age 3600;</span><br><span class="line"> # 带cookie请求需要加上这个字段，并设置为true</span><br><span class="line"> add_header Access-Control-Allow-Credentials true;</span><br><span class="line"> # 表示允许这个域跨域调用（客户端发送请求的域名和端口）</span><br><span class="line"> # $http_origin动态获取请求客户端请求的域 不用*的原因是带cookie的请求不支持*号</span><br><span class="line"> add_header Access-Control-Allow-Origin $http_origin;</span><br><span class="line"> # 表示请求头的字段 动态获取</span><br><span class="line"> add_header Access-Control-Allow-Headers</span><br><span class="line"> $http_access_control_request_headers;</span><br><span class="line"> # OPTIONS预检命令，预检命令通过时才发送请求</span><br><span class="line"> # 检查请求的类型是不是预检命令</span><br><span class="line"> if ($request_method = OPTIONS)&#123;</span><br><span class="line"> return 200;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ajax</title>
      <link href="/2020/02/06/%E6%89%8B%E5%8A%A8%E5%B0%81%E8%A3%85ajax/"/>
      <url>/2020/02/06/%E6%89%8B%E5%8A%A8%E5%B0%81%E8%A3%85ajax/</url>
      
        <content type="html"><![CDATA[<p>ajax</p><a id="more"></a><h3 id="ajax-请求"><a href="#ajax-请求" class="headerlink" title="ajax 请求"></a>ajax 请求</h3><ul><li>简单 ajax 请求的方式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id=&apos;btn&apos;&gt;&lt;/button&gt;</span><br><span class="line"> &lt;script&gt;</span><br><span class="line"> document.getElementById(&apos;btn&apos;).addEventlistener(&apos;click&apos;,loadTest());</span><br><span class="line"> function loadTest()&#123;</span><br><span class="line">             var xhr = new XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">        xhr.onreadystatechange = function () &#123;</span><br><span class="line">            if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) &#123;</span><br><span class="line">                console.log(xhr.responseText)</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                console.log(&apos;error&apos;)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // onreadystatechange 替代方案</span><br><span class="line">        xhr.onload = function () &#123;</span><br><span class="line">            console.log(this.responseText);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        xhr.open(&apos;GET&apos;, &apos;本地地址文件&apos;,true);</span><br><span class="line">        xhr.send();</span><br><span class="line"> &#125;</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="ajax-封装"><a href="#ajax-封装" class="headerlink" title="ajax 封装"></a>ajax 封装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">  &lt;script&gt;</span><br><span class="line">    function ajax(params)&#123;</span><br><span class="line">        if(!params.url)&#123;</span><br><span class="line">            console.log(&apos;一定要输入地址才能发送请求&apos;);</span><br><span class="line">            return</span><br><span class="line">        &#125;</span><br><span class="line">        var obj = &#123;</span><br><span class="line">            method : &apos;GET&apos;,</span><br><span class="line">            data:null,</span><br><span class="line">            success:function()&#123;</span><br><span class="line">                console.log(&apos;success&apos;)</span><br><span class="line">            &#125;,</span><br><span class="line">            fail:function()&#123;</span><br><span class="line">                console.log(&apos;fail&apos;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        params = Object.assign(obj,params)</span><br><span class="line">        var xhr = new XMLHttpRequest();</span><br><span class="line">        xhr.onload = function()&#123;</span><br><span class="line">            var data = Json.parse(xhr.responseText);</span><br><span class="line">            params.success(data)</span><br><span class="line">        &#125;</span><br><span class="line">        xhr.onerror = params.onerror;</span><br><span class="line">        xhr.open(params.method,params.url);</span><br><span class="line">        if(params.method === &apos;POST&apos;)&#123;</span><br><span class="line">            xhr.setRequestHeader(&apos;content-type&apos;,&apos;application/x-www-form-urlencoded&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">        xhr.send(params.data)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>原型链?</title>
      <link href="/2020/02/06/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
      <url>/2020/02/06/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<p>原型链?</p><a id="more"></a><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><ol><li>所有引用类型都有一个<strong>ptoto</strong>(隐式原型)属性指向一个对象</li><li>所有函数都有一个<strong>prototype</strong>(原型)属性指向一个对象</li><li>所有引用类型的<strong>proto</strong>属性指向它的构造函数的<strong>prototype</strong>,</li></ol><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>当访问一个对象的某个属性时,会在这个对象的本身属性上查找,<br>如果没有找到,则会在它的<strong>proto</strong>隐式原型上查找,即它的构造函数的<strong>prototype</strong>.如果还没有找到<br>就会在构造函数的<strong>prototype</strong>的<strong>proto</strong>中查找.这样一层一层向上查找就会形成一个链式结构<br>我们称之为原型链</p><h3 id="js-中的原型链"><a href="#js-中的原型链" class="headerlink" title="js 中的原型链"></a>js 中的原型链</h3><p><img src="/.com//y1.png" alt><br><img src="/.com//y2.png" alt><br><img src="/.com//y3.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">function Teacher(name,age)&#123;</span><br><span class="line">    this.name = name</span><br><span class="line">    this.age = age</span><br><span class="line"> &#125;</span><br><span class="line"> Teacher.color = &apos;yellow&apos;  构造函数中通过Teacher.color = &apos;yellow&apos; 这种方式添加(静态属性)  只能通过 Teacher.color 访问</span><br><span class="line"> function Student(name,age)&#123;</span><br><span class="line">    this.name = name</span><br><span class="line">    this.age = age</span><br><span class="line"> &#125;</span><br><span class="line"> var tea = new Teacher(&apos;仓波&apos;,30);</span><br><span class="line"> var stu = new Student(&apos;张三&apos;,18);</span><br><span class="line"></span><br><span class="line"> console.log(tea.__proto__ === Teacher.prototype ) //true</span><br><span class="line"></span><br><span class="line"> //  console.log(Teacher.prototype.constructor)  打印结果如下</span><br><span class="line">  /*</span><br><span class="line">  ƒ Teacher(name,age)&#123;</span><br><span class="line">    this.name = name</span><br><span class="line">    this.age = age</span><br><span class="line"> &#125;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// console.log(Teacher.prototype)   打印结果如下</span><br><span class="line">// console.log(tea.__proto__)   打印结果如下</span><br><span class="line">/*</span><br><span class="line">&#123;constructor: ƒ&#125;</span><br><span class="line">constructor: ƒ Teacher(name,age)</span><br><span class="line">__proto__: Object</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h3 id="原型对象方法"><a href="#原型对象方法" class="headerlink" title="原型对象方法"></a>原型对象方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> function Teacher(name)&#123;</span><br><span class="line">    this.name = name</span><br><span class="line"> &#125;</span><br><span class="line"> Teacher.prototype.age = 24</span><br><span class="line"> function Student(name,age)&#123;</span><br><span class="line">    this.name = name</span><br><span class="line">    this.age = age</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> var tea = new Teacher(&apos;仓波&apos;);</span><br><span class="line"> var stu = new Student(&apos;张三&apos;,18);</span><br><span class="line">// 实例.hasOwnProperty(属性) 方法可以检测一个属性是存在于实例中，还是存在于原型中。只在给定属性存在于对象实例中时，才会返回 true  实例.hasOwnProperty(属性)</span><br><span class="line"></span><br><span class="line"> console.log(&quot;在实例中 name&quot;,tea.hasOwnProperty(&apos;name&apos;));  // true</span><br><span class="line">console.log(&quot;在原型上  age&quot;,tea.hasOwnProperty(&quot;age&quot;)); // false</span><br></pre></td></tr></table></figure><h3 id="原型模式创建对象"><a href="#原型模式创建对象" class="headerlink" title="原型模式创建对象"></a>原型模式创建对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function Person()&#123;&#125;;</span><br><span class="line"></span><br><span class="line">// 使用字面量形式写的时候 会丢失constructor</span><br><span class="line">    Person.prototype = &#123;</span><br><span class="line">// constructor: Person, 会被实例读取</span><br><span class="line">name: &quot;李白&quot;,</span><br><span class="line">age: 24,</span><br><span class="line">sayName: function ()&#123;</span><br><span class="line">    console.log(this.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    var user = new Person();</span><br><span class="line">  console.log( Person.prototype.contructor)  undefined</span><br><span class="line">  console.log( user.__proto__.contructor)    undefined</span><br></pre></td></tr></table></figure><h3 id="面向对象中的继承实现"><a href="#面向对象中的继承实现" class="headerlink" title="面向对象中的继承实现"></a>面向对象中的继承实现</h3><ul><li><p>原型链（prototype chaining） 能访问 prototype 上的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function Teacher(name,age)&#123;</span><br><span class="line">  this.name = name</span><br><span class="line">  this.age = age</span><br><span class="line">&#125;</span><br><span class="line">Teacher.say = function()&#123;</span><br><span class="line">       console.log(this.name)</span><br><span class="line">   &#125;</span><br><span class="line">Student.prototype = new Teacher()</span><br><span class="line">function Student(name,age)&#123;</span><br><span class="line">  this.name = name</span><br><span class="line">  this.age = age</span><br><span class="line">&#125;</span><br><span class="line">var tea = new Teacher(&apos;仓波&apos;,30);</span><br><span class="line">var stu = new Student(&apos;张三&apos;,18);</span><br></pre></td></tr></table></figure></li><li><p>通过 call/apply 不能访问 prototype 上的方法</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function Teacher(name,age)&#123;</span><br><span class="line">   this.name = name</span><br><span class="line">   this.age = age</span><br><span class="line">   this.say = function()&#123;</span><br><span class="line">       console.log(this.name)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Student()&#123;</span><br><span class="line">   var args = arguments;</span><br><span class="line">   // Teacher.call(this,args[0],args[1])</span><br><span class="line">   Teacher.apply(this,args)</span><br><span class="line">&#125;</span><br><span class="line">var tea = new Teacher(&apos;仓波&apos;,30);</span><br><span class="line">var stu = new Student(&apos;张三&apos;,18);</span><br></pre></td></tr></table></figure><ul><li><p>通过 call/apply 和 原型链 prototype 共同实现 能访问 prototype 上的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function Teacher(name,age)&#123;</span><br><span class="line">  this.name = name</span><br><span class="line">  this.age = age</span><br><span class="line">  this.say = function()&#123;</span><br><span class="line">      console.log(this.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Teacher.prototype.jump = function()&#123;</span><br><span class="line">   console.log(this.age)</span><br><span class="line">&#125;</span><br><span class="line">function Student()&#123;</span><br><span class="line">  var args = arguments;</span><br><span class="line">  // Teacher.call(this,args[0],args[1])</span><br><span class="line">  Teacher.apply(this,args)</span><br><span class="line">&#125;</span><br><span class="line">Student.prototype = new Teacher();</span><br><span class="line">var tea = new Teacher(&apos;仓波&apos;,30);</span><br><span class="line">var stu = new Student(&apos;张三&apos;,18);</span><br></pre></td></tr></table></figure></li><li><p>对象冒充</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function Teacher(name,age)&#123;</span><br><span class="line">   this.name = name</span><br><span class="line">   this.age = age</span><br><span class="line">   this.say = function()&#123;</span><br><span class="line">       console.log(this.name)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Student(name,age)&#123;</span><br><span class="line">   this.Student = Teacher</span><br><span class="line">   this.Student(name,age)</span><br><span class="line">   delete this.Student</span><br><span class="line">&#125;</span><br><span class="line">Student.prototype = new Teacher();</span><br><span class="line">var tea = new Teacher(&apos;仓波&apos;,30);</span><br><span class="line">var stu = new Student(&apos;张三&apos;,18);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>最简单的双向数据绑定</title>
      <link href="/2020/02/06/%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/"/>
      <url>/2020/02/06/%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<p>vue</p><a id="more"></a><h3 id="实现-vue-最简单的双向数据绑定"><a href="#实现-vue-最简单的双向数据绑定" class="headerlink" title="实现 vue 最简单的双向数据绑定"></a>实现 vue 最简单的双向数据绑定</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Object.defineProperty(obj, &apos;val&apos;, &#123;&#125;)</span><br><span class="line"></span><br><span class="line"> &lt;h1&gt;双向数据绑定&lt;/h1&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; id=&quot;cal&quot;&gt;</span><br><span class="line">&lt;p id=&quot;p&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var obj = &#123;&#125;</span><br><span class="line">    Object.defineProperty(obj, &apos;val&apos;, &#123;</span><br><span class="line">        set(n) &#123;</span><br><span class="line">            document.getElementById(&apos;cal&apos;).value = n;</span><br><span class="line">            document.getElementById(&apos;p&apos;).innerHtml = n;</span><br><span class="line">        &#125;,</span><br><span class="line">        get() &#123;</span><br><span class="line">            console.log(2222)</span><br><span class="line">            return &apos;111&apos;   没有返回值控制台打印undefined</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    监听cal的键盘抬起事件</span><br><span class="line">    document.getElementById(&apos;cal&apos;).addEventListener(&apos;keyup&apos;,e=&gt;&#123;</span><br><span class="line">        obj.val = e.target.value;</span><br><span class="line">        console.log(e.target.value)</span><br><span class="line">    &#125;)</span><br><span class="line">    // 设置值触发set</span><br><span class="line">    obj.val = 2</span><br><span class="line">    console.log(obj.val)</span><br><span class="line">    // 读取值触发get</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js</title>
      <link href="/2020/01/02/js%E6%80%BB%E7%BB%93/"/>
      <url>/2020/01/02/js%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>js</p><a id="more"></a><h3 id="简述同步和异步的区别"><a href="#简述同步和异步的区别" class="headerlink" title="简述同步和异步的区别"></a>简述同步和异步的区别</h3><p>同步是阻塞模式 异步是非阻塞模式<br>同步就是一个进程执行某个请求的时候,若请求需要一段时间才能返回消息,那么这个进程就会一直等待下去,直到收到返回信息,才会执行下一个请求<br>异步是指进程不用等待下下去而是继续执行下面的操作,不管其他进程的状态,当有消息系统会通知进程进行处理,这样可以提高执行效率</p><h3 id="怎么添加、移除、复制、创建、和查找节点"><a href="#怎么添加、移除、复制、创建、和查找节点" class="headerlink" title="怎么添加、移除、复制、创建、和查找节点"></a>怎么添加、移除、复制、创建、和查找节点</h3><p>添加 document.getElementByClassName/TagName/Id(‘’).appendChild(“div”) 添加到某个元素内部的最后面 还可以添加原有的元素,会将元素从原来的位置移到新的位置<br>document.getElementByClassName/TagName/Id(‘’).insertBefore(“ul.firstChild”) 指定某个元素内部的节点的前面</p><p>移除 document.getElementByClassName/TagName/Id(‘’).removeChild() 用于移除某个节点,返回被移除的节点,被移除的节点扔存在文档中,只不过文档中没有其位置</p><p>复制 CloneNode() 用于复制节点接受一个布尔值 true 表示深复制(复制节点本身以及内部所有子节点) false 浅复制(复制节点本身,不复制子节点)</p><p>创建 document.createElement(‘p’) 创建 p 节点</p><p>查找节点 ul.firstChild ul.lastChild ul.children li.previousSibing li.nextSibing</p><h3 id="数组去重的-3-中方法"><a href="#数组去重的-3-中方法" class="headerlink" title="数组去重的 3 中方法"></a>数组去重的 3 中方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,32,1,1,2,3,3,2,1]</span><br><span class="line">var arr1 = [];</span><br><span class="line">for(var i = 0;i,arr.length;i++)&#123;</span><br><span class="line">if(arr[i].indexOf&lt;1)&#123;</span><br><span class="line">    arr1.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(arr1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">利用对象的唯一性去除重复</span><br><span class="line">var arr1 = [];</span><br><span class="line">var obj = &#123;&#125;;</span><br><span class="line">for(var i = 0;i&lt;arr.length;i++)&#123;</span><br><span class="line">    if(!obj[arr[i]])&#123;</span><br><span class="line">        obj[arr[i]] = 1;</span><br><span class="line">        arr1.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(arr1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">es6数组去重</span><br><span class="line">var arr = [1,1,32,2,2,2,4,4,4,2,3,3,2,2]</span><br><span class="line">function unique(arr) &#123;</span><br><span class="line">  return arr.filter(function(item, index, arr) &#123;</span><br><span class="line">    //当前元素，在原始数组中的第一个索引==当前索引值，否则返回当前元素</span><br><span class="line">    return arr.indexOf(item) === index;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串去重"><a href="#字符串去重" class="headerlink" title="字符串去重"></a>字符串去重</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var str = &apos;fegfsgfsfdssfdgfdgfdg&apos;;</span><br><span class="line">var newStr = &apos;&apos;;</span><br><span class="line">var obj = &#123;&#125;;</span><br><span class="line">for (var i = 0; i &lt; str.length; i++) &#123;</span><br><span class="line">    if (!obj[str[i]]) &#123;</span><br><span class="line">        obj[str[i]] = 1</span><br><span class="line">        newStr += str[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(newStr)</span><br></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><ul><li>利用递归实现 1+2+3+…+100 的和</li></ul><figure class="highlight plain"><figcaption><span>sum(n)&#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    if(n!=0)&#123;</span><br><span class="line">        return sum(n-1)+n</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        return n</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>递归实现一个数的阶乘</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">function mul(x)&#123;</span><br><span class="line">    if(x===0||x===1)&#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return x*mul(x-1);</span><br><span class="line">&#125;</span><br><span class="line">console.log(mul(3));</span><br><span class="line">3的阶乘结果就出来了 6</span><br><span class="line"></span><br><span class="line">实现1!+2!+3!+.....n! 的之和</span><br><span class="line"> function add(x)&#123;</span><br><span class="line">    if(x===0||x===1)&#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return mul(x)+add(x-1);   //mul()调用上面的那个方法</span><br><span class="line">&#125;</span><br><span class="line">console.log(add(3));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>1 + 1 + 2 + 3 + 5 + 8 + 13 + 21 + …. 实现斐波那契数列</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">走楼梯一样 100层楼梯从1到100层 一次走一步或两步 一共多少种走法</span><br><span class="line"> function add(x)&#123;</span><br><span class="line">        if (n === 1 || n === 2) &#123;</span><br><span class="line">              return 1;</span><br><span class="line">        &#125;</span><br><span class="line">        return add(x-1) + add(x-2)</span><br><span class="line">    &#125;</span><br><span class="line">    add(5)</span><br></pre></td></tr></table></figure><h3 id="如何判断一般数据类型"><a href="#如何判断一般数据类型" class="headerlink" title="如何判断一般数据类型"></a>如何判断一般数据类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">var rs = Object.prototype.toString.call()</span><br><span class="line"></span><br><span class="line">console.log(rs(&quot;jerry&quot;));//[object String]</span><br><span class="line"></span><br><span class="line">console.log(rs(12));//[object Number]</span><br><span class="line"></span><br><span class="line">console.log(rs(true));//[object Boolean]</span><br><span class="line"></span><br><span class="line">console.log(rs(undefined));//[object Undefined]</span><br><span class="line"></span><br><span class="line">console.log(rs(null));//[object Null]</span><br><span class="line"></span><br><span class="line">console.log(rs(&#123;name: &quot;jerry&quot;&#125;));//[object Object]</span><br><span class="line"></span><br><span class="line">console.log(rs(function()&#123;&#125;));//[object Function]</span><br><span class="line"></span><br><span class="line">console.log(rs([]));//[object Array]</span><br><span class="line"></span><br><span class="line">console.log(rs(new Date));//[object Date]</span><br><span class="line"></span><br><span class="line">console.log(rs(/\d/));//[object RegExp]</span><br><span class="line"></span><br><span class="line">console.log(rs(new Person));//[object Object]</span><br></pre></td></tr></table></figure><h3 id="如何判断一个对象是否为空"><a href="#如何判断一个对象是否为空" class="headerlink" title="如何判断一个对象是否为空"></a>如何判断一个对象是否为空</h3><p>var obj = {</p><p>}<br>Object.keys(obj)通过这个方法可以吧对象的属性弄成一个数组 通过 Object.keys(obj).length 判断是否 0–空</p><h3 id="判断一个变量是否为数组"><a href="#判断一个变量是否为数组" class="headerlink" title="判断一个变量是否为数组"></a>判断一个变量是否为数组</h3><p>var arr =[1,2,3];<br>console.log(arr instanceof Array); //true;<br>console.log(arr.constructor === Array); //true;</p><h3 id="事件委托的原理"><a href="#事件委托的原理" class="headerlink" title="事件委托的原理"></a>事件委托的原理</h3><pre><code>就是通过DOM事件的捕获阶段 向一层传播事件</code></pre><h3 id="写一个函数-清除字符串前后空格"><a href="#写一个函数-清除字符串前后空格" class="headerlink" title="写一个函数.清除字符串前后空格"></a>写一个函数.清除字符串前后空格</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function clear(str)&#123;</span><br><span class="line">    if(str &amp;&amp; str === &quot;string&quot;)</span><br><span class="line">    return str.replace(/(^\s*)|(\s*)$/g,&quot;&quot;)</span><br><span class="line">&#125;</span><br><span class="line">去除所有空格   str.replace(/^\s*/g,&quot;&quot;)</span><br></pre></td></tr></table></figure><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><ul><li>随机取 1-10 的整数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a =  (Math.random()*10)</span><br><span class="line">a = Math.ceil(a)</span><br></pre></td></tr></table></figure><ul><li>打乱排序</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line">    // arr.sort(function()&#123;return 1;&#125;);</span><br><span class="line">    //  arr.sort(function()&#123;return Math.random()&gt;0.5?-1:1;&#125;);</span><br><span class="line">    // console.log(arr); //结果不唯一</span><br><span class="line">    function randomArr(arr) &#123;</span><br><span class="line">        let length = arr.length;</span><br><span class="line">        while (length &gt; 1) &#123;</span><br><span class="line">            let index = Math.floor(Math.random() * length--);</span><br><span class="line">            [arr[length], arr[index]] = [arr[index], arr[length]];</span><br><span class="line">        &#125;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line">    function randomArr(arr) &#123;</span><br><span class="line">        let length = arr.length;</span><br><span class="line">        //while执行至条件不成立则跳出循环</span><br><span class="line">        for (var i = length; i &gt;= 1; i--) &#123;</span><br><span class="line">            // --length 先自减再执行表达式</span><br><span class="line">            // length-- 先执行表达式再自减</span><br><span class="line">            //length 先执行random和floor得到index后再自减</span><br><span class="line">            let index = Math.floor(Math.random() * length--);</span><br><span class="line">            //es6的解构赋值，等号的左右两边模式相同，就会将右边的值赋给左边的变量</span><br><span class="line">            [arr[length], arr[index]] = [arr[index], arr[length]];</span><br><span class="line">        &#125;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="new-操作符干了什么"><a href="#new-操作符干了什么" class="headerlink" title="new 操作符干了什么"></a>new 操作符干了什么</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> function  Func()&#123;</span><br><span class="line">&#125;</span><br><span class="line">var  fun = new Func()</span><br><span class="line">1 创建一个空对象</span><br><span class="line">var fun = &#123;&#125;</span><br><span class="line">2 设置原型链</span><br><span class="line">fun.__proto__ = Func.prototype</span><br><span class="line">3 让Fun中的this指向 fun 并执行Func</span><br><span class="line">var result = Func.call(fun) call方法会返回数据</span><br><span class="line">4 判断Func的返回值类型</span><br><span class="line">如果return 出来东西是对象的话就直接返回 return 的内容，没有的话就返回创建的这个对象</span><br><span class="line">如果是值类型 返回obj 如果是引用类型就返回这个引用类型的数据对象</span><br><span class="line">   if (typeof(result) == &quot;object&quot;)&#123;</span><br><span class="line">       fun=result;</span><br><span class="line">   &#125;</span><br><span class="line">   else&#123;</span><br><span class="line">       fun=obj;;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="null-和-undefined-的区别"><a href="#null-和-undefined-的区别" class="headerlink" title="null 和 undefined 的区别"></a>null 和 undefined 的区别</h3><p>要用全等于比较<br>null == undefined true<br>null === undefined false<br>null 表示 “无” 的对象转化为 数字为 0 undefined 转换数字为 NaN</p><p>undefined :<br>变量声量但为赋值 调用函数应该提供的参数没有提供 对象没有赋值的属性 函数没有返回值</p><p>null<br>作为函数的参数 表示该函数的参数不是对象 作为对象原型链的终点</p><h3 id="eval"><a href="#eval" class="headerlink" title="eval ?"></a>eval ?</h3><p>eval()会当成参数解析成 js 代码并运行,返回执行的结果<br>eval 不安全 非常消耗性能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">json字符串转换为json对象可以使用</span><br><span class="line">var json=&quot;&#123;name:&apos;Mr.CAO&apos;,age:30&#125;&quot;;</span><br><span class="line">var jsonObj=eval(&quot;(&quot;+json+&quot;)&quot;);</span><br><span class="line">console.log(jsonObj);</span><br></pre></td></tr></table></figure><h3 id="求一个字符串的长度"><a href="#求一个字符串的长度" class="headerlink" title="求一个字符串的长度"></a>求一个字符串的长度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var str = &apos;abddffdfsf你好&apos;;</span><br><span class="line">function string(str) &#123;</span><br><span class="line">    var len = 0,</span><br><span class="line">        code = 0;</span><br><span class="line">    for (var i = 0; i &lt; str.length; i++) &#123;</span><br><span class="line">        code = str.charCodeAt(i)</span><br><span class="line">        if (code &gt;= 0 &amp;&amp; code &lt;= 127) &#123;</span><br><span class="line">            len += 1;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            len += 2</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return len</span><br><span class="line">&#125;</span><br><span class="line">var a = string(str);</span><br><span class="line">console.log(a)</span><br></pre></td></tr></table></figure><h3 id="扁平化数组"><a href="#扁平化数组" class="headerlink" title="扁平化数组"></a>扁平化数组</h3><ul><li>就是把几纬数组转化成一纬数组</li></ul><ul><li>方式一 flat()</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var arr = [1,12,32,[2,32,32,32]]</span><br><span class="line">var arr1 = arr.flat(1) flat(&apos;里面的数子取决于是几纬数组&apos;) 如果不管有多少层嵌套，都要转成一维数组，可以用Infinity关键字作为参数。</span><br></pre></td></tr></table></figure><ul><li>方式二 toString().split(‘,’)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,12,32,[2,32,[32,32]]]</span><br><span class="line">var arr1 = arr.toString().split(&apos;,&apos;)</span><br></pre></td></tr></table></figure><ul><li>方式三遍历</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function flatten(arr)&#123;</span><br><span class="line">    var res = [];</span><br><span class="line">    for(var i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">        if(Array.isArray(arr[i]))&#123;</span><br><span class="line">            res = res.concat(flatten(arr[i]));</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            res.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简单的深拷贝和浅拷贝"><a href="#简单的深拷贝和浅拷贝" class="headerlink" title="简单的深拷贝和浅拷贝"></a>简单的深拷贝和浅拷贝</h3><ul><li>浅拷贝 就是克隆一个对象里面如果有复杂数据类型的话 他们两个会指向同一个地址 你变我也变</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var obj = &#123;</span><br><span class="line">    name: &apos;张三&apos;,</span><br><span class="line">    age: 24,</span><br><span class="line">    friends: [&apos;李四&apos;, &apos;王二&apos;]</span><br><span class="line">&#125;</span><br><span class="line">var obj1 = &#123;&#125;</span><br><span class="line">// Object.assign 浅拷贝</span><br><span class="line">obj1 = Object.assign(obj1, obj);</span><br><span class="line">// for(var i in obj)&#123;</span><br><span class="line">//      obj1[i] = obj[i]</span><br><span class="line">// &#125;</span><br><span class="line">// obj1.friends[0] = &apos;libai&apos;</span><br><span class="line">// console.log(obj1.friends)</span><br><span class="line">// console.log(obj1.friends)</span><br></pre></td></tr></table></figure><ul><li>深拷贝 就是克隆一个对象里面如果有复杂数据类型的话 改变复杂数据类型的地址 你变我不变</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    var obj = &#123;</span><br><span class="line">    name: &apos;张三&apos;,</span><br><span class="line">    age: 24,</span><br><span class="line">    friends: [&apos;李四&apos;, &apos;王二&apos;],</span><br><span class="line">    like: &#123;</span><br><span class="line">        sing: &apos;fdsfd&apos;,</span><br><span class="line">        jump: &apos;fdsfds&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function deepClone(obj) &#123;</span><br><span class="line">    var newObj = &#123;&#125;</span><br><span class="line">    if (obj === null) return null;</span><br><span class="line">    if (obj instanceof Array) return [...obj];</span><br><span class="line">    for (var i in obj) &#123;</span><br><span class="line">        newObj[i] = typeof obj[i] === &apos;object&apos; ? deepClone(obj[i]) : obj[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return newObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><ul><li>函数外部能访问函数内部的作用域</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function f1()&#123;</span><br><span class="line">        var n = 123;</span><br><span class="line">        function f2()&#123;    //f2是一个闭包</span><br><span class="line">            alert(n)</span><br><span class="line">        &#125;</span><br><span class="line">        return f2;</span><br><span class="line">    &#125;</span><br><span class="line">    原因：f1是f2的父函数，f2被赋给了一个全局变量，f2始终存在内存中，f2的存在依赖f1，因此f1也始终存在内存中，不会在调用结束后，被垃圾回收机制回收</span><br></pre></td></tr></table></figure><ul><li>闭包经典案例循环绑定点击事件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">var oBox = document.getElementsByClassName(&apos;box&apos;);</span><br><span class="line">    for (var i = 0; i &lt; oBox.length; i++) &#123;</span><br><span class="line">        oBox[i].onclick = (function(i)&#123;</span><br><span class="line">            return function()&#123;</span><br><span class="line">                console.log(i)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)(i)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="判断字符串中出现最多次数-有几次"><a href="#判断字符串中出现最多次数-有几次" class="headerlink" title="判断字符串中出现最多次数,有几次"></a>判断字符串中出现最多次数,有几次</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    var str = &apos;asdfssaaasasasasaa&apos;;</span><br><span class="line">var json = &#123;&#125;;</span><br><span class="line">for (var i = 0; i &lt; str.length; i++) &#123;</span><br><span class="line">    if(!json[str.charAt(i)])&#123;</span><br><span class="line">       json[str.charAt(i)] = 1;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">       json[str.charAt(i)]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">var iMax = 0;</span><br><span class="line">var iIndex = &apos;&apos;;</span><br><span class="line">for(var i in json)&#123;</span><br><span class="line">    if(json[i]&gt;iMax)&#123;</span><br><span class="line">         iMax = json[i];</span><br><span class="line">         iIndex = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;        </span><br><span class="line">console.log(&apos;出现次数最多的是:&apos;+iIndex+&apos;出现&apos;+iMax+&apos;次&apos;);</span><br></pre></td></tr></table></figure><h3 id="获取浏览器url中查询字符串找中的参数"><a href="#获取浏览器url中查询字符串找中的参数" class="headerlink" title="获取浏览器url中查询字符串找中的参数"></a>获取浏览器url中查询字符串找中的参数</h3><p>测试地址: <a href="http://www.123.com/abc?name=xiaomiong&amp;age=23" target="_blank" rel="noopener">http://www.123.com/abc?name=xiaomiong&amp;age=23</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function showWindowHref()&#123;</span><br><span class="line">    // var sHref = window.location.href;</span><br><span class="line">    var sHref = &apos;http://www.232.com/min/acf.html?leader=12333&amp;name=xiaoming&amp;age=23&apos;;</span><br><span class="line">    var args = sHref .split(&apos;?&apos;);</span><br><span class="line">   </span><br><span class="line">    if(args[0] == sHref)&#123;</span><br><span class="line">        return &apos;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    var arr = args[1].split(&apos;&amp;&apos;);</span><br><span class="line">    var obj = &#123;&#125;</span><br><span class="line">    for(var i = 0;i&lt;arr.length;i++)&#123;</span><br><span class="line">        var arg = arr[i].split(&apos;=&apos;);</span><br><span class="line">        obj[arg[0]] = arg[1];</span><br><span class="line">    &#125;</span><br><span class="line">    return obj;</span><br><span class="line">&#125;</span><br><span class="line">var href = showWindowHref();</span><br><span class="line">console.log(href[&apos;name&apos;])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>初始vue</title>
      <link href="/2019/12/25/vue.%E6%80%BB%E7%BB%93/"/>
      <url>/2019/12/25/vue.%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>VUE</p><a id="more"></a><h3 id="vue中传值的问题"><a href="#vue中传值的问题" class="headerlink" title="vue中传值的问题"></a>vue中传值的问题</h3><p>如果是父子之间传值子组件通过props接受父组件传过来的值<br>子组件通过this.$emit通知父组件修改值(调用父的方法改值)<br>如果是非父子之间传值 就是通过定义一个祖先,可以存在vuex中或者通过bus传值</p><ul><li>bus传值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">在app.js中定义全局的bus</span><br><span class="line">     var eventBus = &#123;</span><br><span class="line">        install(Vue,options) &#123;</span><br><span class="line">                Vue.prototype.$bus = vue</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        Vue.use(eventBus);</span><br></pre></td></tr></table></figure><p>在组件中使用$emit ,$on,$off分别来分发,监听,取消监听事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;click&quot; @click.stop.prevent=&quot;doClick(id)&quot;&gt;&lt;/div&gt; </span><br><span class="line">分发事件 通过 </span><br><span class="line">doClick()&#123;</span><br><span class="line">    this.$bus.$emit(&apos;todo&apos;,id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">监听事件 通过  mounted()&#123;</span><br><span class="line">     this.$bus.$on(&apos;todo&apos;,id=&gt;&#123;</span><br><span class="line">&#125;)</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">最好在组件销毁前 清除事件监听</span><br><span class="line">beforeDestroy () &#123;</span><br><span class="line">  this.$bus.$off(&apos;todo&apos;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="vue中的data为什么是一个函数"><a href="#vue中的data为什么是一个函数" class="headerlink" title="vue中的data为什么是一个函数"></a>vue中的data为什么是一个函数</h3><p>如果data为一个对象,对象是引用数据类型每个组件中的data指向同一个地址,当data发生改变其他也会发生改变<br>JavaScript只有函数构成作用域( 对象 以及 if语句没有作用域) 只有是一个函数才能构成调用它的独有的作用域,数据才能够互不影响</p><h3 id="vue一般在什么时候调用数据"><a href="#vue一般在什么时候调用数据" class="headerlink" title="vue一般在什么时候调用数据"></a>vue一般在什么时候调用数据</h3><p>因vue不推荐操作原生DOM<br>一般在created中调取数据 如果有DOM操作的话放在mounted里面,因为在mounted的时候html模板刚读取完毕</p><h3 id="vue-created-mounted"><a href="#vue-created-mounted" class="headerlink" title="vue  created  mounted"></a>vue  created  mounted</h3><p>created 用于初始化数值 然后渲染成视图<br>mounted:在模板渲染成html后调用，通常是初始化页面完成后，再对html的dom节点进行一些需要的操作。</p><h3 id="vue-v-if-和v-show的区别及使用"><a href="#vue-v-if-和v-show的区别及使用" class="headerlink" title="vue  v-if 和v-show的区别及使用"></a>vue  v-if 和v-show的区别及使用</h3><ul><li>v-if和v-show都是控制元素的隐藏于显示</li></ul><ul><li>v-show本质就是标签display设置为none，v-show都会编译，初始值为false，只是将display设为none，但它也编译了</li><li>v-if是动态的向DOM树内添加或者删除DOM元素 如果是false就不会编译</li></ul><ul><li>应用场景</li></ul><ul><li>v-show 一般用于 tab切换 切换比较频繁</li><li>v-if  惰性1次或0次时使用</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>初始小程序</title>
      <link href="/2019/12/25/%E5%88%9D%E5%A7%8B%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
      <url>/2019/12/25/%E5%88%9D%E5%A7%8B%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>初始小程序 </p><a id="more"></a><h3 id="小程序图片高度自适应问题"><a href="#小程序图片高度自适应问题" class="headerlink" title="小程序图片高度自适应问题"></a>小程序图片高度自适应问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">本来以为不给父级设置高度下面的图片就能自适应 但是不行 需要给小程序里面的标签的image设置 mode 属性</span><br><span class="line">    &lt;image src=&quot;&#123;&#123;item.cover&#125;&#125;&quot; class=&apos;wedding_img&apos; mode=&quot;widthFix&quot; /&gt;</span><br></pre></td></tr></table></figure><h3 id="给背景添加颜色"><a href="#给背景添加颜色" class="headerlink" title="给背景添加颜色"></a>给背景添加颜色</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">page&#123;</span><br><span class="line">    background-color:xxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取用户信息"><a href="#获取用户信息" class="headerlink" title="获取用户信息"></a>获取用户信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wx.getUserInfo(&#123;</span><br><span class="line">    success:res=&gt;&#123;</span><br><span class="line">        this.setData(&#123;</span><br><span class="line">            nickName:res.UserInfo.nickName,</span><br><span class="line">            avatarUrl:res.UserInfo.avatarUrl</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>滚动到底部</title>
      <link href="/2019/10/29/%E6%BB%9A%E5%8A%A8%E5%88%B0%E5%BA%95%E9%83%A8/"/>
      <url>/2019/10/29/%E6%BB%9A%E5%8A%A8%E5%88%B0%E5%BA%95%E9%83%A8/</url>
      
        <content type="html"><![CDATA[<p>是否滚动到浏览器底部</p><a id="more"></a><h4 id="scroll"><a href="#scroll" class="headerlink" title="scroll"></a>scroll</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">window.addEventListener(&quot;scroll&quot;,function(event)&#123;</span><br><span class="line">    兼容浏览器</span><br><span class="line">    var scrollTop = document.documentElement.scrollTop || window.pageYoffset || document.body.scrollTop;</span><br><span class="line"></span><br><span class="line">    if(document.document.scrollHeight == document.documentElement.clientHeight + scrollTop)&#123;</span><br><span class="line">        </span><br><span class="line">        console.log(document.documentElement.scrollHeight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Each</title>
      <link href="/2019/10/12/Each/"/>
      <url>/2019/10/12/Each/</url>
      
        <content type="html"><![CDATA[<p>JS中的forEach和jQuery的each的用法</p><a id="more"></a><h4 id="JS中的forEach和jQuery的each"><a href="#JS中的forEach和jQuery的each" class="headerlink" title="JS中的forEach和jQuery的each"></a>JS中的forEach和jQuery的each</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">   &lt;script&gt;</span><br><span class="line">   var arr = [&apos;nihao&apos;, &apos;lis&apos;, &apos;zhangsa&apos;];</span><br><span class="line">   arr.forEach(function(item,idex,array)&#123;</span><br><span class="line">   item====&gt;指的是arr中的第一个元素的值</span><br><span class="line">   index====&gt;知道是数组的下标</span><br><span class="line">   array====&gt;指的是数组arr</span><br><span class="line">   &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &lt;ul&gt;</span><br><span class="line">       &lt;li style=&quot;color: green;&quot;&gt;li1&lt;/li&gt;</span><br><span class="line">       &lt;li style=&quot;color: red;&quot;&gt;li2&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;li3&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;li4&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;li5&lt;/li&gt;</span><br><span class="line">   &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   $(&apos;li&apos;).each(function(index,ele)&#123;</span><br><span class="line">      console.log(&apos;ele=====&gt;&apos;, ele); //这里的ele是dom对象</span><br><span class="line">      if (index == 3) &#123;</span><br><span class="line">               $(ele).click(function () &#123;</span><br><span class="line">                   console.log($(this).css(&apos;color&apos;)); 获取index为3的color值</span><br><span class="line">               &#125;)</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               $(ele).click(function () &#123;</span><br><span class="line">                   console.log($(this).css(&apos;height&apos;));</span><br><span class="line"></span><br><span class="line">               &#125;)</span><br><span class="line">           &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">       // 大部分情况下是不需要使用 each 方法的，因为 jQuery 的隐式迭代特性。</span><br><span class="line">       // 如果要对每个元素做不同的处理，这时候就用到了 each 方法</span><br><span class="line">       // 作用：遍历 jQuery 对象集合，为每个匹配的元素执行一个函数</span><br><span class="line">       // $(selector).each(function(index,element)&#123;&#125;);</span><br><span class="line">       // Element 是一个 js 对象，需要转换成 jquery 对象</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>事件对象/阻止冒泡和默认</title>
      <link href="/2019/10/12/jq%E4%B8%ADtarget/"/>
      <url>/2019/10/12/jq%E4%B8%ADtarget/</url>
      
        <content type="html"><![CDATA[<p>target与this的指向问题及对象默认事件</p><a id="more"></a><h3 id="event"><a href="#event" class="headerlink" title="event"></a>event</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;li-1&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;li-2&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;li-3&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;li-4&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;button&gt;添加&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var count = 4;</span><br><span class="line">$(&apos;ul&apos;).click(function()&#123;</span><br><span class="line">    count++</span><br><span class="line">    var str = &apos;&lt;li&gt;li-&quot;+count+&quot;&lt;/li&gt;&apos;</span><br><span class="line">&#125;)</span><br><span class="line">$(&apos;ul&apos;).click(function(event)&#123;</span><br><span class="line">    console.log(&apos;currentTarget&apos;,event.currentTarget) 打印结果为: 添加后的全新的&lt;ul&gt;.......&lt;/ul&gt;</span><br><span class="line">    console.log(&apos;this&apos;,this)                         打印结果为: 添加后的全新的&lt;ul&gt;.......&lt;/ul&gt;</span><br><span class="line">    console.log(&apos;event.target&apos;,event.target)         打印结果为: 添加的那个&lt;li&gt;li-&quot;+count+&quot;&lt;/li&gt;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">vent.currentTarget 事件绑定的对象(事件源), 和 this 相同</span><br><span class="line">event.target 实际触发事件的对象， 不一定 === this</span><br></pre></td></tr></table></figure><h4 id="阻止冒泡"><a href="#阻止冒泡" class="headerlink" title="阻止冒泡"></a>阻止冒泡</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">阻止冒泡事件</span><br><span class="line">&lt;div class=&apos;box&apos;&gt;</span><br><span class="line">    今天天气</span><br><span class="line">    &lt;div class=&apos;innerB&apos;&gt;</span><br><span class="line">    不好</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(&apos;.box&apos;).click(function()&#123;</span><br><span class="line">        alert(&apos;外面的&apos;);</span><br><span class="line">    &#125;)</span><br><span class="line">    $(&apos;.innerB&apos;).click(function(event)&#123;</span><br><span class="line">        alert(&apos;里面的&apos;);</span><br><span class="line">        阻止冒泡事件产生</span><br><span class="line">        event.stopPropagetion()</span><br><span class="line">    &#125;)</span><br><span class="line">    弹出的顺序是 1.里面的   2.外面的</span><br><span class="line">    当里面和外面的元素都绑定了事件的话会产生冒泡事件,会从最里面依次执行</span><br><span class="line">    阻止冒泡event.stopPropagetion()就会只发生里面的事件</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="解除默认事件"><a href="#解除默认事件" class="headerlink" title="解除默认事件"></a>解除默认事件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href = &apos;#&apos;&gt;添加&lt;/a&gt;  a href = &apos;#&apos; 默认为跳转到顶部 </span><br><span class="line">&lt;a href = &apos;www.baidu.com&apos;&gt;添加&lt;/a&gt;</span><br><span class="line">hr*500</span><br><span class="line">&lt;a href = &apos;javascript:;&apos;&gt;添加&lt;/a&gt;  阻止跳转顶部</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(&apos;a:eq(1)&apos;).click(function(event)&#123;</span><br><span class="line">    event.preventDefault();  防止跳转到百度</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jQuery基础知识</title>
      <link href="/2019/10/12/jquery%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2019/10/12/jquery%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>jQuery 是一个快速、简洁的 JavaScript 框架，是继 Prototype 之后又一个优秀的 JavaScript 代码库</p><a id="more"></a><h4 id="jQuery入口函数"><a href="#jQuery入口函数" class="headerlink" title="jQuery入口函数"></a>jQuery入口函数</h4><p>$(document.ready(function(){</p><p>}))<br>$(function(){})  推荐这种写法</p><h4 id="jQuery基本选择器"><a href="#jQuery基本选择器" class="headerlink" title="jQuery基本选择器"></a>jQuery基本选择器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">$(&apos;ul:eq(index)&apos;)匹配一个给定索引值的元素</span><br><span class="line">$(&apos;ul:gt(index)&apos;)匹配所有大于给定索引值的元素 </span><br><span class="line">$(&apos;ul:lt(index)&apos;)匹配所有小于给定索引值的元素 </span><br><span class="line">$(&apos;ul:odd&apos;)匹配所有索引值为奇数的元素 </span><br><span class="line">$(&apos;ul:even&apos;)匹配所有索引值为偶数的元素</span><br><span class="line">$(&apos;li:empty&apos;)匹配所有不包含子元素或者文本的空元素</span><br><span class="line">$(&apos;li:contains(&apos;john&apos;)&apos;)匹配包含给定文本的元素</span><br></pre></td></tr></table></figure><h4 id="DOM对象和JQuery对象的相互转换"><a href="#DOM对象和JQuery对象的相互转换" class="headerlink" title="DOM对象和JQuery对象的相互转换"></a>DOM对象和JQuery对象的相互转换</h4><h5 id="jQuery-对象转换为-DOM-对象"><a href="#jQuery-对象转换为-DOM-对象" class="headerlink" title="jQuery 对象转换为 DOM 对象"></a>jQuery 对象转换为 DOM 对象</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;#btn&apos;)[0]</span><br><span class="line">$(&apos;#btn&apos;).get(0)</span><br></pre></td></tr></table></figure><h5 id="DOM-对象转换成-jQuery-对象"><a href="#DOM-对象转换成-jQuery-对象" class="headerlink" title="DOM 对象转换成 jQuery 对象"></a>DOM 对象转换成 jQuery 对象</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var btn = document.getElementById(&apos;btn&apos;);</span><br><span class="line">$(btn) ====&gt; 把 DOM 对象转成了 jQuery 对象</span><br></pre></td></tr></table></figure><h4 id="DOM-操作"><a href="#DOM-操作" class="headerlink" title="DOM 操作"></a>DOM 操作</h4><h5 id="属性操作-attr"><a href="#属性操作-attr" class="headerlink" title="属性操作 .attr()"></a>属性操作 .attr()</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;img&apos;).attr(&#123;</span><br><span class="line">    src:&apos;1.jpg&apos;</span><br><span class="line">&#125;) 添加属性</span><br></pre></td></tr></table></figure><h5 id="属性操作-添加删除类’"><a href="#属性操作-添加删除类’" class="headerlink" title="属性操作 添加删除类’"></a>属性操作 添加删除类’</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;div&apos;).addClass(&apos;active&apos;)</span><br><span class="line">        removeClass</span><br><span class="line">        hasClass 判断是否有这个类</span><br><span class="line">        toggleClass 判断有无这个类,有则删除无则添加</span><br></pre></td></tr></table></figure><h4 id="jQuery动画"><a href="#jQuery动画" class="headerlink" title="jQuery动画"></a>jQuery动画</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">动画显示</span><br><span class="line">$(selector).show/hide(2000/slow,function()&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">其他动画</span><br><span class="line">fadeIn fadeOut slowDown slowUp slowToggle</span><br></pre></td></tr></table></figure><h4 id="animate动画"><a href="#animate动画" class="headerlink" title="animate动画"></a>animate动画</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$(selector).animate(styles,speed,ease,callback)</span><br><span class="line">$(selector).animate(&#123;</span><br><span class="line">    width:300,</span><br><span class="line">    height:200</span><br><span class="line">&#125;,1000,function()&#123;&#125;)</span><br><span class="line">第一个参数表示：要执行动画的 CSS 属性（必选）</span><br><span class="line">第二个参数表示：执行动画时长（可选）</span><br><span class="line">第三个参数表示: 运动函数 &apos;swing&apos;和&apos;linear&apos;</span><br><span class="line">第四个参数表示：动画执行完后立即执行的回调函数（可选）</span><br><span class="line"></span><br><span class="line">停止动画</span><br><span class="line">stop(stopAll,goToEnd)  </span><br><span class="line">stop(false/true,false/true)</span><br><span class="line">参数1:  stopAll:是否全部停止动画(停止队列中所有动画),默认 false</span><br><span class="line">参数2:  goToEnd: 是否将停止的动画,停在当前动画的最后一个状态</span><br></pre></td></tr></table></figure><h4 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h4><blockquote><p>append() 参数 jq对象 或 标签字符串 或 DOM对象 在被选元素内部从后面插入。<br>        如果是页面中存在的元素，那么调用 append()后，会把这个元素放到相应的目标元素里面去；<br>        但是，原来的这个元素，就不存在了。(剪切)<br>        如果是给多个目标追加元素，那么方法的内部会复制多份这个元素，然后追加到多个目标里面去。<br>$(‘div’)appendTo(‘p’)就是把所有div标签及里面的东西剪切到p标签里面<br>prepend()作用：在被选元素内部从前面追加内容或节点。</p></blockquote><h4 id="清空元素"><a href="#清空元素" class="headerlink" title="清空元素"></a>清空元素</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(selector).empty();</span><br><span class="line">$(selector).html(&apos;&apos;);</span><br><span class="line">$(selector).remove(); //会把自己也删除</span><br></pre></td></tr></table></figure><h4 id="on-off方式绑定-解除事件"><a href="#on-off方式绑定-解除事件" class="headerlink" title="on/off方式绑定/解除事件"></a>on/off方式绑定/解除事件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">$(&apos;ul&apos;).on(&apos;click&apos;,&apos;li&apos;,function()&#123;&#125;) 把click事件给了li,一般用于后来添加的元素,为了与上面绑定的样式一样</span><br><span class="line">[selector] 一般用于事件委托</span><br><span class="line">$(&apos;ul&apos;).off(&apos;click&apos;,&apos;li&apos;,function()&#123;&#125;) 解除li绑定的事件,自身另外绑定的其他事件(mouseenter...)不会失效</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS基本数据类型和引用数据类型</title>
      <link href="/2019/10/10/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2019/10/10/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>数据类型之间的区别</p><a id="more"></a><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><p> Number Boolean Undefined Null String 基本数据类型是按值访问的,可以直接操作保存在变量中实际的值</p><ol><li><p>基本数据类型的值是不可变的</p></li><li><p>基本数据类型不可以添加属性和方法</p></li><li><p>基本数据类型是保存在栈内存中的</p><ul><li>常用基本数据类型之间的转换<br>Number 转换类型 里面有非数字,数字之间有空格(3 45)或者是NaN的全部转换为NaN,如果是空或者全是空格转化为0 </li></ul><p>Boolean(用来判断false/true) 转换类型 通常情况下 undefined ‘’ NaN null 0 会变成false</p><p>toString 转换类型 null undefined 未赋值的变量会报错 toString String字符串转换NaN 还为NaN</p><h4 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h4><p>JS中引用数据类型(对象),Object Array Function Data等</p></li><li><p>引用数据类型的值是可变的</p></li><li><p>引用数据类型可以添加属性和方法</p></li><li><p>引用数据类型是保存在栈内存和堆内存中的</p></li><li><p>引用数据类型的赋值是对象引用</p></li></ol><h4 id="JavaScript检测一个变量是String类型"><a href="#JavaScript检测一个变量是String类型" class="headerlink" title="JavaScript检测一个变量是String类型"></a>JavaScript检测一个变量是String类型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">typeof(obj) === &apos;String&apos;</span><br><span class="line">typeof obj === &apos;String&apos;</span><br><span class="line">obj.constructor === String</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>排序和递归</title>
      <link href="/2019/09/29/%E6%8E%92%E5%BA%8F%E5%92%8C%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/"/>
      <url>/2019/09/29/%E6%8E%92%E5%BA%8F%E5%92%8C%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<!-- ### 排序算法 --><blockquote><p>在生活中，我们离不开排序。例如体育课上按身高排的队；又如考试过后按成绩排的名次。在编程中也是如此，例如当开发一个学生管理系统，需要按照学好从小到大进行排序；开发一个平台，需要把同类商品按价格从高到低排序。（当然，一般前端不负责处理业务逻辑。）由此可见，排序无处不在。排序看似简单，但是背后却隐藏了多种多样的算法与思想。一个算法的好坏是通过 时间复杂度 与 空间复杂度 来衡量的。简单来说，时间复杂度 就是执行算法的 时间成本 ，空间复杂度 则是执行算法的 空间成本 。</p></blockquote><a id="more"></a><h3 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h3><p>稳定：如果 a 原本在 b 前面，而 a=b，排序之后 a 仍然在 b 的前面</p><p>不稳定：如果 a 原本在 b 的前面，而 a=b，排序之后 a 可能会出现在 b 的后面</p><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><p>时间复杂度 与 空间复杂度 都是用 “大 O” 来表示，写作 O(*)。有一点值得注意的是，我们谈论复杂度，一般谈论的都是时间复杂度。</p><p>常见时间复杂度的 “大 O 表示法” 描述有以下几种：<br>| 时间复杂度 | 非正式术语 |<br>| —- | —- |<br>|O(1)| 常数阶|<br>|O(n)| 线性阶|<br>|O(n2)| 平方阶|<br>|O(log n)| 对数阶|<br>|O(n log n)| 线性对数阶|<br>|O(n3)| 立方阶|<br>|O(2n)| 指数阶|</p><p>一个算法在 N 规模下所消耗的时间消耗从大到小如下：</p><p>O(1) &lt; O(log n) &lt; O(n) &lt; O(n log n) &lt; O(n2) &lt; O(n3) &lt; O(2n)</p><h2 id="常见数组排序方法"><a href="#常见数组排序方法" class="headerlink" title="常见数组排序方法"></a>常见数组排序方法</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li><li>之所以叫冒泡排序，每一轮两两比较之后，都会冒出一个本轮最大的数，将其移动到本轮尾部。</li></ol><p><img src="https://user-gold-cdn.xitu.io/2019/7/2/16bb2880dc1ebaac?imageslim" alt></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要几个轮次 6个数排序 最大需要5轮</span></span><br><span class="line"><span class="comment">// 外层循环控制轮次</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - i; j++) &#123;</span><br><span class="line"><span class="comment">// 经过这样for循环,我们能找到本轮最大的数,并排在本轮尾部</span></span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line"><span class="comment">// 交换位置</span></span><br><span class="line"><span class="keyword">var</span> temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 5, 12, 32, 40, 41]</span></span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>选择排序是一种简单直观的排序算法。它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到全部待排序的数据元素排完。</p><p><img src="https://user-gold-cdn.xitu.io/2019/7/8/16bcf4425ac4d235?imageslim" alt></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">var</span> minIndex = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[minIndex] &gt; arr[j]) &#123;</span><br><span class="line">minIndex = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (minIndex !== i) &#123;</span><br><span class="line"><span class="comment">// 交换位置</span></span><br><span class="line"><span class="keyword">var</span> temp = arr[i];</span><br><span class="line">arr[i] = arr[minIndex];</span><br><span class="line">arr[minIndex] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p><p>插入排序的算法步骤如下：</p><ul><li>从第一个元素开始，该元素可以认为已经被排序；</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li><li>重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置；</li><li>将新元素插入到该位置后；</li><li>重复步骤 2~5。</li></ul><p><img src="https://user-gold-cdn.xitu.io/2019/7/8/16bcf447e9291320?imageslim" alt></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> len = arr.length;</span><br><span class="line"><span class="keyword">var</span> j, temp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">j = i - <span class="number">1</span>;</span><br><span class="line">temp = arr[i];</span><br><span class="line"><span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp) &#123;</span><br><span class="line">arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>堆排序 是指利用 <code>二叉堆</code> 这种数据结构所设计的一种排序算法。堆是一个近似 完全二叉树 的结构，并同时满足 堆积的性质 ：即子节点的键值或索引总是小于（或者大于）它的父节点。</p><p>二叉堆分以下两个类型：</p><ul><li>最大堆： 最大堆任何一个父节点的值，都大于等于它左右孩子节点的值。</li></ul><p><img src="https://user-gold-cdn.xitu.io/2019/7/2/16bb288163c5be34?imageslim" alt></p><blockquote><p>数组表示如下：[10, 8, 9, 7, 5, 4, 6, 3, 2]</p></blockquote><ul><li>最小堆：最小堆任何一个父节点的值，都小于等于它左右孩子节点的值。</li></ul><p><img src="https://user-gold-cdn.xitu.io/2019/7/2/16bb288174479a44?imageslim" alt></p><blockquote><p>数组表示如下：[1, 3, 2, 6, 5, 7, 8, 9, 10]</p></blockquote><p>堆排序的算法步骤如下：</p><ul><li>把无序数列构建成二叉堆；</li><li>循环删除堆顶元素，替换到二叉堆的末尾，调整堆产生新的堆顶。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 堆下沉调整 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">adjustHeap</span> (<span class="params">arr, parentIndex, length</span>) =&gt; </span>&#123;</span><br><span class="line"><span class="keyword">var</span> temp = arr[parentIndex]; <span class="comment">/* temp保存父节点值，用于最后赋值 */</span></span><br><span class="line"><span class="keyword">var</span> childIndex = <span class="number">2</span> * parentIndex + <span class="number">1</span>; <span class="comment">/* 保存子节点位置 */</span></span><br><span class="line"><span class="keyword">while</span> (childIndex &lt; length) &#123;</span><br><span class="line"><span class="comment">/* 如果有右子节点，且右子节点大于左子节点的值，则定位到右子节点 */</span></span><br><span class="line"><span class="keyword">if</span> (childIndex + <span class="number">1</span> &lt; length &amp;&amp; arr[childIndex + <span class="number">1</span>] &gt; arr[childIndex]) &#123;</span><br><span class="line">childIndex++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 如果父节点小于任何一个子节点的值，直接退出循环 */</span></span><br><span class="line"><span class="keyword">if</span> (temp &gt;= arr[childIndex]) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 无序交换，单向赋值即可 */</span></span><br><span class="line">arr[parentIndex] = arr[childIndex];</span><br><span class="line">parentIndex = childIndex;</span><br><span class="line">childIndex = <span class="number">2</span> * childIndex + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">arr[parentIndex] = temp;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">heapSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="comment">/* 把无序数列构建成最大堆 */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>); i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">adjustHeap(arr, i, arr.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line"><span class="comment">/* 交换最后一个元素与第一个元素 */</span></span><br><span class="line">[arr[i], arr[<span class="number">0</span>]] = [arr[<span class="number">0</span>], arr[i]];</span><br><span class="line"><span class="comment">/* 调整最大堆 */</span></span><br><span class="line">adjustHeap(arr, <span class="number">0</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>递归是一种编程模式，用于一个任务可以被分割为多个相似的更简单的任务的场景。</p><p>当一个函数解决一个任务时，在该过程中它可以调用很多其它函数。那么当一个函数调用<strong>自身</strong>时，就称其为<strong>递归</strong>。</p><h3 id="两种思考方式"><a href="#两种思考方式" class="headerlink" title="两种思考方式"></a>两种思考方式</h3><p>简单起见，我们写一个函数 <code>pow(x, n)</code>，它可以计算 <code>x</code> 的 <code>n</code> 次方，即用 <code>x</code> 乘以自身 <code>n</code> 次。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pow(<span class="number">2</span>, <span class="number">2</span>) = <span class="number">4</span></span><br><span class="line">pow(<span class="number">2</span>, <span class="number">3</span>) = <span class="number">8</span></span><br><span class="line">pow(<span class="number">2</span>, <span class="number">4</span>) = <span class="number">16</span></span><br></pre></td></tr></table></figure><p>有两种实现方式。</p><ol><li><p>迭代思路：<code>for</code> 循环：</p> <figure class="highlight js"><figcaption><span>run</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pow</span>(<span class="params">x, n</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> result = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在循环中用 x 乘以 result</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">result *= x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(pow(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure></li><li><p>递归思路：简化任务，调用自身：</p> <figure class="highlight js"><figcaption><span>run</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pow</span>(<span class="params">x, n</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x * pow(x, n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(pow(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure></li></ol><p>注意递归方式完全不相同。</p><p>当 <code>pow(x, n)</code> 被调用时，执行分为两个分支：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">              <span class="keyword">if</span> n==<span class="number">1</span>  = x</span><br><span class="line">             /</span><br><span class="line">pow(x, n) =</span><br><span class="line">             \</span><br><span class="line">              <span class="keyword">else</span>     = x * pow(x, n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><ol><li>如果 <code>n == 1</code>，所有事情都会很简单，这叫做递归的<strong>基础</strong>(跳出条件)，因为它立即得到显而易见的结果：<code>pow(x, 1)</code> 等于 <code>x</code>。</li><li>否则，我们可以用 <code>x * pow(x, n - 1)</code> 表示 <code>pow(x, n)</code>。在数学里，可能会这么写 <code>x<sup>n</sup> = x * x<sup>n-1</sup></code>。这叫做<strong>一个递归步骤</strong>：我们将任务转变为更简单的行为（<code>x</code> 的乘法）和更简单的同类任务调用（更小的 <code>n</code> 给 <code>pow</code>）。后面步骤继续简化直到 <code>n</code> 等于 <code>1</code>。</li></ol><p>我们也可以说 <code>pow</code> <strong>递归的调用自身</strong> 直到 <code>n == 1</code>。</p><p><img src="/.com//pow.svg" alt="recursive diagram of pow"></p><p>比如，为了计算 <code>pow(2, 4)</code>，递归变体经过了下面几个步骤：</p><ol><li><code>pow(2, 4) = 2 * pow(2, 3)</code></li><li><code>pow(2, 3) = 2 * pow(2, 2)</code></li><li><code>pow(2, 2) = 2 * pow(2, 1)</code></li><li><code>pow(2, 1) = 2</code></li></ol><p>所以，递归生成了更简单的函数调用，然后 —— 更加简单，继续，直到结果变得很明显。</p><figure class="highlight plain"><figcaption><span>header</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">递归解决方案一般比迭代更简洁。</span><br><span class="line"></span><br><span class="line">这里我们可以使用三元运算符 `?` 来替换 `if` 语句，从而让 `pow(x, n)` 更简洁并且可读性依然很高：</span><br><span class="line"></span><br><span class="line">```js run</span><br><span class="line">function pow(x, n) &#123;</span><br><span class="line">  return (n == 1) ? x : (x * pow(x, n - 1));</span><br><span class="line">&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>最大的嵌套调用次数（包括首次）称为<strong>递归深度</strong>。在我们的例子中，它正好等于 <code>n</code>。</p><p>最大递归深度受限于 JavaScript 引擎。我们可以确信基本是 10000，有些引擎可能允许更大，但是 100000 很可能就超过了限制。有一些自动优化能够缓解这个（「尾部调用优化」），但是它们还没有被完全支持，只能用于简单场景。</p><p>这就限制了递归的应用，但是递归仍然被广泛使用。有很多任务使用递归思路会让代码更简单，更容易维护。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS必会的两种排序方法</title>
      <link href="/2019/09/27/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E5%92%8C%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
      <url>/2019/09/27/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E5%92%8C%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>其他的理解了在发</p><a id="more"></a><h3 id="原始人冒泡排序"><a href="#原始人冒泡排序" class="headerlink" title="原始人冒泡排序"></a>原始人冒泡排序</h3><ul><li>比较两个数字</li><li>如果左边的数字大，则交换两个数字的位置</li><li>向右移动一个位置，比较下两个数字</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var arr = [25,15,30,11,6,8];</span><br><span class="line">    for(var j = 0;j&lt;arr.length;j++)&#123;</span><br><span class="line">        for(var i = 0;i&lt;arr.length-1-j;i++)&#123;</span><br><span class="line">            if(arr[i]&gt;arr[i+1])&#123;</span><br><span class="line">                var temp = arr[i];</span><br><span class="line">                arr[i] = arr[i+1];</span><br><span class="line">                arr[i+1] = temp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(arr);</span><br><span class="line">// arr.length-1-j 是已经排序过的没有必要再排一次了</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><ul><li>记录所有数据，并找出最小的，并和最左边的数字交换</li><li>最左边数字已经排序好，从第2个数字开始依次重复1步骤的操作</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var arr = [12,342,53,6753,131,435];</span><br><span class="line">    for(var j = 0;j&lt;arr.length-1;j++ )&#123;</span><br><span class="line">    var minIndex = j;</span><br><span class="line">    for(var i = j+1;i&lt;arr.length;i++)&#123;</span><br><span class="line">        if(arr[minIndex]&gt;arr[i])&#123;</span><br><span class="line">            minIndex = i;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    var temp = arr[minIndex];</span><br><span class="line">    arr[j] = arr[minIndex]; </span><br><span class="line">    arr[minIndex]  =arr[j]; </span><br><span class="line">    </span><br><span class="line"> &#125;</span><br><span class="line"> console.log(arr);</span><br><span class="line">声明一个数组索引为0的变量让其与每一个数组进行比较</span><br><span class="line">找到那个比他小的数,调换索引(没有找到,那么他就是最小的数)</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS3实现正方体效果</title>
      <link href="/2019/09/24/CSS3%E5%AE%9E%E7%8E%B0%E7%AB%8B%E6%96%B9%E4%BD%93/"/>
      <url>/2019/09/24/CSS3%E5%AE%9E%E7%8E%B0%E7%AB%8B%E6%96%B9%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<p>令人头痛的3D感</p><a id="more"></a><h3 id="努力想象3D坐标系"><a href="#努力想象3D坐标系" class="headerlink" title="努力想象3D坐标系"></a>努力想象3D坐标系</h3><ul><li><p>上代码</p></li><li> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">最外面的盒子宽高设置为200px;</span><br><span class="line"></span><br><span class="line">.front&#123;transform:rotateY(0deg) translateZ(100px);&#125; 前面盒子</span><br><span class="line">.back&#123;transform:rotateX(180deg) translateZ(100px);&#125; 后面盒子</span><br><span class="line">.right&#123; transform:rotateY(90deg) translateZ(100px);&#125; 右面盒子</span><br><span class="line">.left&#123;transform:rotateY(-90deg) translateZ(100px);&#125; 左面盒子</span><br><span class="line">.top&#123;transform:rotateX(90deg) translateZ(100px);&#125; 上面盒子</span><br><span class="line">.bottom&#123;transform:rotateX(-90deg) translateZ(100px);&#125; 下面盒子</span><br></pre></td></tr></table></figure></li><li><p>不要问为什么</p></li><li> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">    &lt;style&gt;</span><br><span class="line">    .main&#123;</span><br><span class="line">        height: 200px;</span><br><span class="line">        width: 200px;</span><br><span class="line">        position: relative;</span><br><span class="line">        transition: all 6s;</span><br><span class="line"></span><br><span class="line">        transform-style: preserve-3d;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    div&#123;</span><br><span class="line">      width: 200px;</span><br><span class="line">      height: 200px;</span><br><span class="line">      position: absolute; </span><br><span class="line">    &#125;</span><br><span class="line">     .box&#123;</span><br><span class="line">      transform:rotateY(0deg) translateZ(100px);</span><br><span class="line">      background: linear-gradient(to right,red, green, blue);</span><br><span class="line">      &#125;</span><br><span class="line">      .box2&#123;</span><br><span class="line">          transform:rotateX(180deg) translateZ(100px);</span><br><span class="line">          background: radial-gradient(circle at 10px 10px,red,yellow);</span><br><span class="line">      &#125;</span><br><span class="line">      .box3&#123;</span><br><span class="line">          transform:rotateY(90deg) translateZ(100px);</span><br><span class="line">          background: linear-gradient(to right,yellow,red);</span><br><span class="line">      &#125;</span><br><span class="line">      .box4&#123;</span><br><span class="line">          transform:rotateY(-90deg) translateZ(100px);</span><br><span class="line">          background: radial-gradient(circle at 10px 10px,blue,red);</span><br><span class="line">          </span><br><span class="line">      &#125;</span><br><span class="line">      .box5&#123;</span><br><span class="line">          background: radial-gradient(circle at 10px 10px,orange,red);</span><br><span class="line">          </span><br><span class="line">          transform:rotateX(90deg) translateZ(100px);</span><br><span class="line">      &#125;</span><br><span class="line">      .box6&#123;</span><br><span class="line">          background: radial-gradient(circle at 10px 10px,green,red);</span><br><span class="line"></span><br><span class="line">          transform:rotateX(-90deg) translateZ(100px);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      .main:hover &#123;</span><br><span class="line">          transform: rotateX(360deg)  rotateY(360deg);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;div class=&quot;main&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;box3&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;box4&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;box5&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;box6&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS3</title>
      <link href="/2019/09/24/CSS3/"/>
      <url>/2019/09/24/CSS3/</url>
      
        <content type="html"><![CDATA[<p>难搞的 CSS3</p><a id="more"></a><h3 id="CSS3-渐变效果"><a href="#CSS3-渐变效果" class="headerlink" title="CSS3 渐变效果"></a>CSS3 渐变效果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">线性渐变</span><br><span class="line">background: linear-gradient(to right,color1,color2,clor3);</span><br><span class="line"></span><br><span class="line">径向渐变</span><br><span class="line">background: radial-gradient(circle at 10px 10px ,color1,color2,clor3);</span><br></pre></td></tr></table></figure><h3 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transtion:all ease 0.5s</span><br></pre></td></tr></table></figure><ul><li>2D 转换<blockquote><p>缩放 scale(x, y) 可以对元素进行水平和垂直方向的缩放，x、y 的取值可为小数，不可为负值；<br>移动 translate(x, y) 可以改变元素的位置，x、y 可为负值；<br>旋转 rotate(deg) 可以对元素进行旋转，正值为顺时针，负值为逆时针；</p></blockquote></li></ul><h3 id="实现一个立方体"><a href="#实现一个立方体" class="headerlink" title="实现一个立方体"></a>实现一个立方体</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    * &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* translate3d(x,y,z) */</span><br><span class="line">    .box &#123;</span><br><span class="line">        position: relative;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        margin: 100px auto;</span><br><span class="line">        perspective: 1000px;</span><br><span class="line">        transform-style: preserve-3d;</span><br><span class="line">        transition: all 1s ease;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .side &#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        left: 0;</span><br><span class="line">        top: 0;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        border: 1px solid #333;</span><br><span class="line">        opacity: .5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .side.front &#123;</span><br><span class="line">        transform: translateZ(100px);</span><br><span class="line">        background-color: blue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .side.back &#123;</span><br><span class="line">        transform: translateZ(-100px);</span><br><span class="line">        background-color: pink;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .side.left &#123;</span><br><span class="line">        transform: translateX(-100px) rotateY(90deg);</span><br><span class="line">        background-color: orange;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .side.right &#123;</span><br><span class="line">        transform: translateX(100px) rotateY(90deg);</span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .side.top &#123;</span><br><span class="line">        transform: translateY(-100px) rotateX(90deg);</span><br><span class="line">        background-color: green;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .side.bottom &#123;</span><br><span class="line">        transform: translateY(100px) rotateX(90deg);</span><br><span class="line">        background-color: yellow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .box:hover &#123;</span><br><span class="line">        transform: rotateX(360deg) rotateY(360deg);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;side front&quot;&gt;前面&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;side back&quot;&gt;后面&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;side left&quot;&gt;左面&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;side right&quot;&gt;右面&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;side top&quot;&gt;上面&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;side bottom&quot;&gt;下面&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h3><ul><li>animation: move 2s linear 2s 3 alternate both;</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">.box&#123;</span><br><span class="line">position: relative;</span><br><span class="line">width: 150px;</span><br><span class="line">height: 150px;</span><br><span class="line">background-color: red;</span><br><span class="line">animation: move 2s linear 2s 3 alternate both;</span><br><span class="line">&#125;</span><br><span class="line">.box:hover&#123;</span><br><span class="line">animation-play-state: paused;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes move&#123;</span><br><span class="line">0%&#123;</span><br><span class="line">transform: translateX(0) translateY(0px);</span><br><span class="line">&#125;</span><br><span class="line">25%&#123;</span><br><span class="line">transform: translateX(200px) translateY(0px);</span><br><span class="line">&#125;</span><br><span class="line">50%&#123;</span><br><span class="line">transform: translateX(200px) translateY(200px);</span><br><span class="line">&#125;</span><br><span class="line">75%&#123;</span><br><span class="line">transform: translateX(0) translateY(200px);</span><br><span class="line">&#125;</span><br><span class="line">100%&#123;</span><br><span class="line">transform: translateX(0) translateY(0px);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">            &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            动画是CSS3中具有颠覆性的特征之一，可通过设置多个节点来精确控制一个或一组动画，常用来实现复杂的动画效果。</span><br><span class="line">1、必要元素：</span><br><span class="line">a、通过@keyframes指定动画序列；</span><br><span class="line">b、通过百分比将动画序列分割成多个节点；</span><br><span class="line">c、在各节点中分别定义各属性</span><br><span class="line">d、通过animation将动画应用于相应元素；</span><br><span class="line"></span><br><span class="line">2、关键属性</span><br><span class="line">1. Animation-name 动画名称(必填)</span><br><span class="line">2. Animation-duration 动画持续时间</span><br><span class="line">3. animation-timing-function</span><br><span class="line">linear/ease/ease-in/ease-out/ease-in-out/cubic-bezier(n,n,n,n)：特定的贝塞尔曲线类型，4个数值需在[0, 1]区间内</span><br><span class="line">4. animation-delay 动画延迟（只是第一次）</span><br><span class="line">5. animation-iteration-count 重复次数infinite 无限次</span><br><span class="line">6.animation-direction动画是否重置后再开始播放</span><br><span class="line">alternate动画直接从上一次停止的位置开始执行，倒着来</span><br><span class="line">normal动画第二次直接跳到0%的状态开始执行</span><br><span class="line">7.animation-fill-mode动画执行完毕后状态</span><br><span class="line">forwards当动画完成后，保持最后一个属性值（在最后一个关键帧中定义）。</span><br><span class="line">backwards在 animation-delay 所指定的一段时间内，在动画显示之前，应用开始属性值（在第一个关键帧中定义）。</span><br><span class="line">both设置对象状态为动画结束或开始的状态，结束时状态优先</span><br><span class="line"></span><br><span class="line">语法:animation: name duration timing-function delay iteration-count direction fill-mode;</span><br><span class="line">name duration 必须写,其余可以都不写</span><br><span class="line"></span><br><span class="line">animation-play-state播放状态（ running 播放 和 paused 暂停 ）</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue</title>
      <link href="/2019/09/21/vue%E4%BC%A0%E5%80%BC/"/>
      <url>/2019/09/21/vue%E4%BC%A0%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<pre><code>关于vue父向子传值问题</code></pre><a id="more"></a><h3 id="props的用法"><a href="#props的用法" class="headerlink" title="props的用法"></a>props的用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;first :fromparent=&apos;parent&apos;&gt;&lt;/first&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;template id=&apos;child&apos;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123;child&#125;&#125;我是一个子组件&#123;&#123;fromparent&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var child = &#123;</span><br><span class="line">    template = &apos;#child&apos;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            child:&apos;我是两年半的实习生&apos;      </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    props:[&apos;fromparent&apos;]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el:&apos;#app&apos;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            parent:&apos;我是你的爸爸&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        compontes:&#123;</span><br><span class="line">            first</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="子调用父方法this-emit-‘event’-arguments"><a href="#子调用父方法this-emit-‘event’-arguments" class="headerlink" title="子调用父方法this.$emit(‘event’,[arguments])"></a>子调用父方法this.$emit(‘event’,[arguments])</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&apos;#app&apos;&gt;</span><br><span class="line">    &lt;child @fun = &apos;parent&apos;&gt;&lt;/child&gt;        //@fun 里面的fun是自定义的</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">  &lt;template id=&apos;child&apos;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type = &apos;button&apos; value=&apos;调用父方法&apos; @click = &apos;childclick&apos;&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var child = (</span><br><span class="line">    template:&apos;child&apos;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        childclick()&#123;</span><br><span class="line">                this.$emit(&apos;fun&apos;)</span><br><span class="line">                //子调用父方法一定要写到子里面 ,用别人的值,方法要写到自身身上</span><br><span class="line">                **this.$emit(&apos;fun&apos;,[....argu])传参要从第二个传值,不带引号**</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el:&apos;#app&apos;,</span><br><span class="line">        data:&#123;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        components:&#123;</span><br><span class="line">            child</span><br><span class="line">        &#125;</span><br><span class="line">        methods:&#123;</span><br><span class="line">            parent()&#123;</span><br><span class="line">                console.log(&apos;调用了父方法&apos;)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git如何上传到github</title>
      <link href="/2019/09/20/git/"/>
      <url>/2019/09/20/git/</url>
      
        <content type="html"><![CDATA[<p>基本命令和问题</p><a id="more"></a><h3 id="用到的git命令"><a href="#用到的git命令" class="headerlink" title="用到的git命令"></a>用到的git命令</h3><blockquote><p>官网下载git 一路傻瓜式安装就行了;</p><p>把你想要上传的所有文件拉到一个文件夹里,在空白区域右键 git bash here</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; git init </span><br><span class="line">&gt; git add . </span><br><span class="line">&gt; git commit -m &apos;你对传到github上的文件的描述&apos;</span><br><span class="line">&gt; git remote add origin &apos;github的地址&apos;</span><br><span class="line">&gt; git push -u origin master </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="首次安装可能会遇到的一些问题"><a href="#首次安装可能会遇到的一些问题" class="headerlink" title="首次安装可能会遇到的一些问题"></a>首次安装可能会遇到的一些问题</h3><ol><li><p>如果窗口看到提示一下两个信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;John Doe&quot;</span><br><span class="line">git config --global user.email johndoe@example.com</span><br><span class="line"> </span><br><span class="line">解决办法：按上面的提升，cmd窗口接着输入</span><br><span class="line"></span><br><span class="line">git config --global user.name &quot;这里是你的github用户名  </span><br><span class="line">git config --global user.email xxx@xxx.com(你的邮箱)</span><br></pre></td></tr></table></figure></li><li><p>提交到远程时候,提示:</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fatal:remote origin already exists</span><br><span class="line">解决办法:删除远程git仓库</span><br><span class="line">git remote rm origin</span><br><span class="line">git remote add origin &apos;github的地址&apos;</span><br><span class="line">git push -u origin master </span><br><span class="line">首次登陆需要登陆按照提示输入账户名和密码</span><br></pre></td></tr></table></figure><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><ul><li>新建分支 git checkout -b test  </li><li>切换到分支 git checkout test</li><li>合并分支<ol><li>首先切换到master分支上 git checkout master</li><li>如果是多人开发的话 需要把远程master上的代码pull下来  git pull origin master</li><li>然后我们把test分支的代码合并到master上  git  merge test</li></ol></li><li>git clone -b branchname <a href="https://github.com/xxxxx/xx.git" target="_blank" rel="noopener">https://github.com/xxxxx/xx.git</a>  下载某个分支</li></ul><ul><li>查看所有分支  git branch -a</li><li>删除远程分支test git push origin –delete test</li><li>删除本地分支 test  git branch -d  test</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hover的一些微小效果</title>
      <link href="/2019/09/19/hover/"/>
      <url>/2019/09/19/hover/</url>
      
        <content type="html"><![CDATA[<p>百度的简单的效果</p><a id="more"></a><h3 id="css3中hover图片效果"><a href="#css3中hover图片效果" class="headerlink" title="css3中hover图片效果"></a>css3中hover图片效果</h3><ul><li>hover图片从上向下出现一个模糊层<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    *&#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line">    .box&#123;</span><br><span class="line">        height: 300px;</span><br><span class="line">        width: 300px;</span><br><span class="line">        border: 1px solid black;</span><br><span class="line">        position: relative;</span><br><span class="line">    &#125;</span><br><span class="line">    .box1&#123;</span><br><span class="line">        height: 300px;</span><br><span class="line">        width: 300px;</span><br><span class="line">        position: absolute;</span><br><span class="line">        top: -300px;</span><br><span class="line">        left: 0;</span><br><span class="line">        transition: all 0.5s ease;</span><br><span class="line">        background: rgba(0,0,0,0.5); </span><br><span class="line">    &#125;</span><br><span class="line">    .box:hover .box1&#123;</span><br><span class="line">        top:0;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class = &apos;box&apos;&gt;</span><br><span class="line">    &lt;div class = &apos;box1&apos;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">如果想要其他方向显示只需改变方向和hover方向的值</span><br><span class="line">想要谁发生微小动画就要在谁身上添加动画属性</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于HTML的基本知识</title>
      <link href="/2019/09/18/base/"/>
      <url>/2019/09/18/base/</url>
      
        <content type="html"><![CDATA[<p>“9.09-9.20所学的HTML知识总结”</p><a id="more"></a><h3 id="a-img-p-h1-h6"><a href="#a-img-p-h1-h6" class="headerlink" title="a img p h1-h6"></a>a img p h1-h6</h3><blockquote><p>target = ‘_self blank’ _self 自身页面打开可以后退自身标签一般不使用</p><p>blank 新页面打开 不可以后退<br>img 只设置宽或者高另一边会自动按原图宽高比例设置 在VScode上引入上一级图片 ../<br>  引入下一级目录  当前文件夹/                  &gt;<br>p h1-h6 默认有margin</p></blockquote><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> a:link&#123;&#125; </span><br><span class="line"></span><br><span class="line">匹配未被访问时的状态</span><br><span class="line"></span><br><span class="line">a:visited&#123;&#125; </span><br><span class="line"></span><br><span class="line">匹配链接访问过的状态</span><br><span class="line"></span><br><span class="line"> a:active&#123;&#125;</span><br><span class="line"></span><br><span class="line">匹配链接在激活时的状态</span><br><span class="line"></span><br><span class="line"> a:hover&#123;&#125;</span><br><span class="line"></span><br><span class="line">匹配鼠标放上去时的状态</span><br></pre></td></tr></table></figure><h3 id="a标签的link、visited、hover、active是有一定顺序的"><a href="#a标签的link、visited、hover、active是有一定顺序的" class="headerlink" title="a标签的link、visited、hover、active是有一定顺序的"></a>a标签的link、visited、hover、active是有一定顺序的</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a:link </span><br><span class="line">a:visited </span><br><span class="line">a:hover </span><br><span class="line">a:active</span><br></pre></td></tr></table></figure><h3 id="文字多出部分显示省略号"><a href="#文字多出部分显示省略号" class="headerlink" title="文字多出部分显示省略号"></a>文字多出部分显示省略号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">overflow: hidden;</span><br><span class="line">white-space: nowrap;</span><br><span class="line">text-overflow: ellipsis;</span><br></pre></td></tr></table></figure><h3 id="行内元素和块级元素-img算什么-行内元素怎么转化为块级元素"><a href="#行内元素和块级元素-img算什么-行内元素怎么转化为块级元素" class="headerlink" title="行内元素和块级元素?img算什么?行内元素怎么转化为块级元素?"></a>行内元素和块级元素?img算什么?行内元素怎么转化为块级元素?</h3><blockquote><p>行内元素：和有他元素都在一行上,高度、行高及外边距&gt; 和内边距都不可改变,文字图片的宽度不可改变,只能容&gt; 纳文本或者其他行内元素;其中img是行元素;</p><p>行内元素设置 margin padding 无效<br>块级元素：总是在新行上开始,高度、行高及外边距和内边距都可控制,可以容纳内敛元素和其他元素;</p><p>行元素转换为块级元素方式：display：block;</p></blockquote><h3 id="如何解决父元素高度塌陷问题"><a href="#如何解决父元素高度塌陷问题" class="headerlink" title="如何解决父元素高度塌陷问题"></a>如何解决父元素高度塌陷问题</h3><p>1 让父元素浮动<br>2 增加空的元素到最后位置 clear:both<br>3 增加一个类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.clear::after&#123;</span><br><span class="line">    content:&apos;&apos;;</span><br><span class="line">    display:block;</span><br><span class="line">    clear:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><blockquote><p>相对定位:一般微调;不会脱离文档流;</p><p>绝对定位(fixed,absolute):会脱离文档流的元素会变成块级元素,默认情况下,宽度由内容决定<br>                        脱离文档流的元素margin可以使用,但auto失效</p></blockquote><h3 id="将多个元素设置为同一行-清除浮动有几种方式"><a href="#将多个元素设置为同一行-清除浮动有几种方式" class="headerlink" title="将多个元素设置为同一行?清除浮动有几种方式?"></a>将多个元素设置为同一行?清除浮动有几种方式?</h3><blockquote><p>将多个元素设置为同一行：float，inline-block<br>清除浮动的方式:<br>                1. 添加新的元素 、应用 clear：both;<br>                2. 父级div定义 overflow: hidden;</p></blockquote><h3 id="简述几个css-hack"><a href="#简述几个css-hack" class="headerlink" title="简述几个css hack?"></a>简述几个css hack?</h3><h4 id="图片间隙"><a href="#图片间隙" class="headerlink" title="图片间隙"></a>图片间隙</h4><blockquote><p>在div中插入图片，图片会将div下方撑大3px。</p><p>hack1: 将div与img标签写在同一行。</p><p>hack2：给img标签属性添加display：block；</p></blockquote><h4 id="dt-li-中的图片间隙"><a href="#dt-li-中的图片间隙" class="headerlink" title="dt li 中的图片间隙"></a>dt li 中的图片间隙</h4><blockquote><p>hack：给<img>添加display：block；</p></blockquote><h3 id="鼠标指针"><a href="#鼠标指针" class="headerlink" title="鼠标指针"></a>鼠标指针</h3><blockquote><p>hack：若统一某一元素鼠标指针为手型：cursor：pointer；</p><p>当li内的a转化块元素时，给a设置float，IE里面会出现阶梯状</p><p>hack1：给a加display：inline-block；</p><p>hack2：给li加float：left；</p></blockquote><h3 id="href和src区别-title和alt"><a href="#href和src区别-title和alt" class="headerlink" title="href和src区别? title和alt"></a>href和src区别? title和alt</h3><blockquote><p>href (Hypertext Reference)指定网络资源的位置（超文本引用），从而在当前元素或者当前文档和由当前属性定义的需要的锚点或资源之间定义一个链接或者关系，在 link和a 等元素上使用。</p><p>src (Source)属性仅仅嵌入当前资源到当前文档元素定义的位置，是页面必不可少的一部分，是引入。在 img、script、iframe 等元素上使用。</p><p>title：既是html标签，又是html属性，title作为属性时，用来为元素提供额外说明信息.</p><p>alt：alt是html标签的属性，alt属性则是用来指定替换文字，只能用在img、area和input元素中（包括applet元素），用于网页中图片无法正常显示时给用户提供文字说明使其了解图像信息.</p></blockquote><h3 id="如何让一个div水平垂直居中"><a href="#如何让一个div水平垂直居中" class="headerlink" title="如何让一个div水平垂直居中"></a>如何让一个div水平垂直居中</h3><p>方法1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.div1&#123; width:400px;</span><br><span class="line">       height:400px; </span><br><span class="line">       border:#CCC 1px solid;</span><br><span class="line">       background:#99f;</span><br><span class="line">       position:absolute;</span><br><span class="line">       left:50%;   </span><br><span class="line">       top:50%;   </span><br><span class="line">       transform: translate(-50%,-50%); &#125;  </span><br><span class="line"></span><br><span class="line">       &lt;div class=&quot;div1&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>方法2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.div2&#123; width:400px;</span><br><span class="line">       height:400px;</span><br><span class="line">       border:#CCC 1px solid;</span><br><span class="line">       background:#99f;</span><br><span class="line">       position: absolute;</span><br><span class="line">       left:0;</span><br><span class="line">       top: 0;</span><br><span class="line">       bottom: 0;</span><br><span class="line">       right: 0; </span><br><span class="line">       margin: auto; &#125;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;div2&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>方法三</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.div3&#123; width:400px;</span><br><span class="line">      height:400px;</span><br><span class="line">      border:#CCC 1px solid;</span><br><span class="line">  background:#9f9;</span><br><span class="line">    position: absolute;</span><br><span class="line">        left: 50%;top:50%;  </span><br><span class="line"> margin-left:-200px;</span><br><span class="line">  margin-top: -200px;  &#125;  </span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;div3&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="图片和文字在同一行显示"><a href="#图片和文字在同一行显示" class="headerlink" title="图片和文字在同一行显示?"></a>图片和文字在同一行显示?</h3><blockquote><p>1 在css中给div添加上“vertical-align:middle”属性。<br>2 分别把图片和文字放入不同的div中，然后用“margin”属性进行定位，就可以使他们显示在同一行。<br>3 把图片设置为背景图片。</p></blockquote><h3 id="简述一下同步和异步的区别"><a href="#简述一下同步和异步的区别" class="headerlink" title="简述一下同步和异步的区别"></a>简述一下同步和异步的区别</h3><h4 id="同步是阻塞模式-异步是非阻塞模式"><a href="#同步是阻塞模式-异步是非阻塞模式" class="headerlink" title="同步是阻塞模式,异步是非阻塞模式"></a>同步是阻塞模式,异步是非阻塞模式</h4><blockquote><p>同步就是指一个进程在执行某个请求的时候,若该请求需要一段时间才能返回信息,那么这个进程就要一直等待下去,直到收到返回信息才继续执行下去</p><p>异步是指进程不要一直等下去,而是继续执行下面的操作,不管其他进程的状态.当有消息返回时系统会通知进程进行处理,这样可以提高执行的效率</p></blockquote><h3 id="px和em的区别"><a href="#px和em的区别" class="headerlink" title="px和em的区别"></a>px和em的区别</h3><blockquote><p>相同点: px和em都是长度单位;</p><p>异同点: px的值是固定的,指定多少就是多少,计算比较容易.em值是不固定的,并且em会继承父级元素的字体大小.浏览器的默认字体高都是16px.所以未经调整的浏览器都符合:1em = 16px.<br>12px = 0.75em,10px = 0.625em</p></blockquote><h3 id="浏览器的内核分别是什么"><a href="#浏览器的内核分别是什么" class="headerlink" title="浏览器的内核分别是什么?"></a>浏览器的内核分别是什么?</h3><blockquote><p>IE: trident内核<br>Firefox: gecko<br>Safari: webkit<br>Opera: Blink<br>Chrome:Blink </p></blockquote><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p><img src="/.com//wugui.jpg" alt="wugui"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>什么是HTML</title>
      <link href="/2019/07/21/what/"/>
      <url>/2019/07/21/what/</url>
      
        <content type="html"><![CDATA[<p>HTML是一种什么样的语言</p><a id="more"></a><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>HTML 指的是超文本标记语言: HyperText Markup Language<br>HTML 不是一种编程语言，而是一种标记语言<br>标记语言是一套标记标签 (markup tag)<br>HTML 使用标记标签来描述网页<br>HTML 文档包含了HTML 标签及文本内容<br>HTML文档也叫做 web 页面</p><h3 id="如何区分-HTML-和HTML5"><a href="#如何区分-HTML-和HTML5" class="headerlink" title="如何区分 HTML 和HTML5?"></a>如何区分 HTML 和HTML5?</h3><p>DOCTYPE 声明的方式是区分HTML和HTML5标志的一个重要因素,此外,还可以根据新增的结构,功能元素来加以区分.</p><h3 id="页面导入样式是-使用link和-import有什么区别"><a href="#页面导入样式是-使用link和-import有什么区别" class="headerlink" title="页面导入样式是,使用link和@import有什么区别?"></a>页面导入样式是,使用link和@import有什么区别?</h3><blockquote><p>link 属于HTML标签,除了加载CSS外,还能用于定义RSS,</p><p>定义rel连接属性等作用;而@import是CSS提供的,只能作用于加载CSS</p><p>页面被加载是,link会同时加载,而@import引用的CSS会等到页面被加载完在加载</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
