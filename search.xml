<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数组去重</title>
      <link href="/2019/11/05/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/"/>
      <url>/2019/11/05/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3,[4,3,[23,34,[35]]],36];</span><br><span class="line">arr.toString(); //可以使多维数组转换为字符串形式</span><br></pre></td></tr></table></figure><h4 id="利用indexOf去重"><a href="#利用indexOf去重" class="headerlink" title="利用indexOf去重"></a>利用indexOf去重</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3, 4, 1, 2, 3, 1, 32, 4, 1, 3, 4, 34, 5, 43];</span><br><span class="line"> var arr1 = [];</span><br><span class="line"> arr.forEach(function (item) &#123;</span><br><span class="line">     if( arr1.indexOf(item) === -1)&#123;</span><br><span class="line">     arr1.push(item);</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure></code></pre><h4 id="对象属性唯一去重"><a href="#对象属性唯一去重" class="headerlink" title="对象属性唯一去重"></a>对象属性唯一去重</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3, 4, 1, 2, 3, 1, 32, 4, 1, 3, 4, 34, 5, 43];</span><br><span class="line">var arr1  = [];</span><br><span class="line">var obj = &#123;&#125;;</span><br><span class="line">for(var i = 0;i&lt;arr.length;i++)&#123;</span><br><span class="line">    if(!obj[arr[i]])&#123;</span><br><span class="line">        obj[arr[i]] = 1;</span><br><span class="line">        arr1.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>滚动到底部</title>
      <link href="/2019/10/29/%E6%BB%9A%E5%8A%A8%E5%88%B0%E5%BA%95%E9%83%A8/"/>
      <url>/2019/10/29/%E6%BB%9A%E5%8A%A8%E5%88%B0%E5%BA%95%E9%83%A8/</url>
      
        <content type="html"><![CDATA[<p>是否滚动到浏览器底部</p><a id="more"></a><h4 id="scroll"><a href="#scroll" class="headerlink" title="scroll"></a>scroll</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">window.addEventListener(&quot;scroll&quot;,function(event)&#123;</span><br><span class="line">    兼容浏览器</span><br><span class="line">    var scrollTop = document.documentElement.scrollTop || window.pageYoffset || document.body.scrollTop;</span><br><span class="line"></span><br><span class="line">    if(document.document.scrollHeight == document.documentElement.clientHeight + scrollTop)&#123;</span><br><span class="line">        </span><br><span class="line">        console.log(document.documentElement.scrollHeight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS基本数据类型和引用数据类型</title>
      <link href="/2019/10/14/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2019/10/14/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>数据类型之间的区别</p><a id="more"></a><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><blockquote><p>Number Boolean Undefined Null String 基本数据类型是按值访问的,可以直接操作保存在变量中实际的值</p><ol><li>基本数据类型的值是不可变的</li><li>基本数据类型不可以添加属性和方法</li><li>基本数据类型是保存在栈内存中的</li></ol><ul><li>常用基本数据类型之间的转换<br>Number 转换类型 里面有非数字,数字之间有空格(3 45)或者是NaN的全部转换为NaN,如果是空或者全是空格转化为0 </li></ul><p>Boolean(用来判断false/true) 转换类型 通常情况下 undefined ‘’ NaN null 0 会变成false</p><p>toString 转换类型 null undefined 未赋值的变量会报错 toString String字符串转换NaN 还为NaN</p></blockquote><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Each</title>
      <link href="/2019/10/12/Each/"/>
      <url>/2019/10/12/Each/</url>
      
        <content type="html"><![CDATA[<p>JS中的forEach和jQuery的each的用法</p><a id="more"></a><h4 id="JS中的forEach和jQuery的each"><a href="#JS中的forEach和jQuery的each" class="headerlink" title="JS中的forEach和jQuery的each"></a>JS中的forEach和jQuery的each</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">   &lt;script&gt;</span><br><span class="line">   var arr = [&apos;nihao&apos;, &apos;lis&apos;, &apos;zhangsa&apos;];</span><br><span class="line">   arr.forEach(function(item,idex,array)&#123;</span><br><span class="line">   item====&gt;指的是arr中的第一个元素的值</span><br><span class="line">   index====&gt;知道是数组的下标</span><br><span class="line">   array====&gt;指的是数组arr</span><br><span class="line">   &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &lt;ul&gt;</span><br><span class="line">       &lt;li style=&quot;color: green;&quot;&gt;li1&lt;/li&gt;</span><br><span class="line">       &lt;li style=&quot;color: red;&quot;&gt;li2&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;li3&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;li4&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;li5&lt;/li&gt;</span><br><span class="line">   &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   $(&apos;li&apos;).each(function(index,ele)&#123;</span><br><span class="line">      console.log(&apos;ele=====&gt;&apos;, ele); //这里的ele是dom对象</span><br><span class="line">      if (index == 3) &#123;</span><br><span class="line">               $(ele).click(function () &#123;</span><br><span class="line">                   console.log($(this).css(&apos;color&apos;)); 获取index为3的color值</span><br><span class="line">               &#125;)</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               $(ele).click(function () &#123;</span><br><span class="line">                   console.log($(this).css(&apos;height&apos;));</span><br><span class="line"></span><br><span class="line">               &#125;)</span><br><span class="line">           &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">       // 大部分情况下是不需要使用 each 方法的，因为 jQuery 的隐式迭代特性。</span><br><span class="line">       // 如果要对每个元素做不同的处理，这时候就用到了 each 方法</span><br><span class="line">       // 作用：遍历 jQuery 对象集合，为每个匹配的元素执行一个函数</span><br><span class="line">       // $(selector).each(function(index,element)&#123;&#125;);</span><br><span class="line">       // Element 是一个 js 对象，需要转换成 jquery 对象</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>事件对象/阻止冒泡和默认</title>
      <link href="/2019/10/12/jq%E4%B8%ADtarget/"/>
      <url>/2019/10/12/jq%E4%B8%ADtarget/</url>
      
        <content type="html"><![CDATA[<p>target与this的指向问题及对象默认事件</p><a id="more"></a><h3 id="event"><a href="#event" class="headerlink" title="event"></a>event</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;li-1&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;li-2&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;li-3&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;li-4&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;button&gt;添加&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var count = 4;</span><br><span class="line">$(&apos;ul&apos;).click(function()&#123;</span><br><span class="line">    count++</span><br><span class="line">    var str = &apos;&lt;li&gt;li-&quot;+count+&quot;&lt;/li&gt;&apos;</span><br><span class="line">&#125;)</span><br><span class="line">$(&apos;ul&apos;).click(function(event)&#123;</span><br><span class="line">    console.log(&apos;currentTarget&apos;,event.currentTarget) 打印结果为: 添加后的全新的&lt;ul&gt;.......&lt;/ul&gt;</span><br><span class="line">    console.log(&apos;this&apos;,this)                         打印结果为: 添加后的全新的&lt;ul&gt;.......&lt;/ul&gt;</span><br><span class="line">    console.log(&apos;event.target&apos;,event.target)         打印结果为: 添加的那个&lt;li&gt;li-&quot;+count+&quot;&lt;/li&gt;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">vent.currentTarget 事件绑定的对象(事件源), 和 this 相同</span><br><span class="line">event.target 实际触发事件的对象， 不一定 === this</span><br></pre></td></tr></table></figure><h4 id="阻止冒泡"><a href="#阻止冒泡" class="headerlink" title="阻止冒泡"></a>阻止冒泡</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">阻止冒泡事件</span><br><span class="line">&lt;div class=&apos;box&apos;&gt;</span><br><span class="line">    今天天气</span><br><span class="line">    &lt;div class=&apos;innerB&apos;&gt;</span><br><span class="line">    不好</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(&apos;.box&apos;).click(function()&#123;</span><br><span class="line">        alert(&apos;外面的&apos;);</span><br><span class="line">    &#125;)</span><br><span class="line">    $(&apos;.innerB&apos;).click(function(event)&#123;</span><br><span class="line">        alert(&apos;里面的&apos;);</span><br><span class="line">        阻止冒泡事件产生</span><br><span class="line">        event.stopPropagetion()</span><br><span class="line">    &#125;)</span><br><span class="line">    弹出的顺序是 1.里面的   2.外面的</span><br><span class="line">    当里面和外面的元素都绑定了事件的话会产生冒泡事件,会从最里面依次执行</span><br><span class="line">    阻止冒泡event.stopPropagetion()就会只发生里面的事件</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="解除默认事件"><a href="#解除默认事件" class="headerlink" title="解除默认事件"></a>解除默认事件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href = &apos;#&apos;&gt;添加&lt;/a&gt;  a href = &apos;#&apos; 默认为跳转到顶部 </span><br><span class="line">&lt;a href = &apos;www.baidu.com&apos;&gt;添加&lt;/a&gt;</span><br><span class="line">hr*500</span><br><span class="line">&lt;a href = &apos;javascript:;&apos;&gt;添加&lt;/a&gt;  阻止跳转顶部</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(&apos;a:eq(1)&apos;).click(function(event)&#123;</span><br><span class="line">    event.preventDefault();  防止跳转到百度</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jQuery基础知识</title>
      <link href="/2019/10/12/jquery%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2019/10/12/jquery%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>jQuery 是一个快速、简洁的 JavaScript 框架，是继 Prototype 之后又一个优秀的 JavaScript 代码库</p><a id="more"></a><h4 id="jQuery入口函数"><a href="#jQuery入口函数" class="headerlink" title="jQuery入口函数"></a>jQuery入口函数</h4><p>$(document.ready(function(){</p><p>}))<br>$(function(){})  推荐这种写法</p><h4 id="jQuery基本选择器"><a href="#jQuery基本选择器" class="headerlink" title="jQuery基本选择器"></a>jQuery基本选择器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">$(&apos;ul:eq(index)&apos;)匹配一个给定索引值的元素</span><br><span class="line">$(&apos;ul:gt(index)&apos;)匹配所有大于给定索引值的元素 </span><br><span class="line">$(&apos;ul:lt(index)&apos;)匹配所有小于给定索引值的元素 </span><br><span class="line">$(&apos;ul:odd&apos;)匹配所有索引值为奇数的元素 </span><br><span class="line">$(&apos;ul:even&apos;)匹配所有索引值为偶数的元素</span><br><span class="line">$(&apos;li:empty&apos;)匹配所有不包含子元素或者文本的空元素</span><br><span class="line">$(&apos;li:contains(&apos;john&apos;)&apos;)匹配包含给定文本的元素</span><br></pre></td></tr></table></figure><h4 id="DOM对象和JQuery对象的相互转换"><a href="#DOM对象和JQuery对象的相互转换" class="headerlink" title="DOM对象和JQuery对象的相互转换"></a>DOM对象和JQuery对象的相互转换</h4><h5 id="jQuery-对象转换为-DOM-对象"><a href="#jQuery-对象转换为-DOM-对象" class="headerlink" title="jQuery 对象转换为 DOM 对象"></a>jQuery 对象转换为 DOM 对象</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;#btn&apos;)[0]</span><br><span class="line">$(&apos;#btn&apos;).get(0)</span><br></pre></td></tr></table></figure><h5 id="DOM-对象转换成-jQuery-对象"><a href="#DOM-对象转换成-jQuery-对象" class="headerlink" title="DOM 对象转换成 jQuery 对象"></a>DOM 对象转换成 jQuery 对象</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var btn = document.getElementById(&apos;btn&apos;);</span><br><span class="line">$(btn) ====&gt; 把 DOM 对象转成了 jQuery 对象</span><br></pre></td></tr></table></figure><h4 id="DOM-操作"><a href="#DOM-操作" class="headerlink" title="DOM 操作"></a>DOM 操作</h4><h5 id="属性操作-attr"><a href="#属性操作-attr" class="headerlink" title="属性操作 .attr()"></a>属性操作 .attr()</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;img&apos;).attr(&#123;</span><br><span class="line">    src:&apos;1.jpg&apos;</span><br><span class="line">&#125;) 添加属性</span><br></pre></td></tr></table></figure><h5 id="属性操作-添加删除类’"><a href="#属性操作-添加删除类’" class="headerlink" title="属性操作 添加删除类’"></a>属性操作 添加删除类’</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;div&apos;).addClass(&apos;active&apos;)</span><br><span class="line">        removeClass</span><br><span class="line">        hasClass 判断是否有这个类</span><br><span class="line">        toggleClass 判断有无这个类,有则删除无则添加</span><br></pre></td></tr></table></figure><h4 id="jQuery动画"><a href="#jQuery动画" class="headerlink" title="jQuery动画"></a>jQuery动画</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">动画显示</span><br><span class="line">$(selector).show/hide(2000/slow,function()&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">其他动画</span><br><span class="line">fadeIn fadeOut slowDown slowUp slowToggle</span><br></pre></td></tr></table></figure><h4 id="animate动画"><a href="#animate动画" class="headerlink" title="animate动画"></a>animate动画</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$(selector).animate(styles,speed,ease,callback)</span><br><span class="line">$(selector).animate(&#123;</span><br><span class="line">    width:300,</span><br><span class="line">    height:200</span><br><span class="line">&#125;,1000,function()&#123;&#125;)</span><br><span class="line">第一个参数表示：要执行动画的 CSS 属性（必选）</span><br><span class="line">第二个参数表示：执行动画时长（可选）</span><br><span class="line">第三个参数表示: 运动函数 &apos;swing&apos;和&apos;linear&apos;</span><br><span class="line">第四个参数表示：动画执行完后立即执行的回调函数（可选）</span><br><span class="line"></span><br><span class="line">停止动画</span><br><span class="line">stop(stopAll,goToEnd)  </span><br><span class="line">stop(false/true,false/true)</span><br><span class="line">参数1:  stopAll:是否全部停止动画(停止队列中所有动画),默认 false</span><br><span class="line">参数2:  goToEnd: 是否将停止的动画,停在当前动画的最后一个状态</span><br></pre></td></tr></table></figure><h4 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h4><blockquote><p>append() 参数 jq对象 或 标签字符串 或 DOM对象 在被选元素内部从后面插入。<br>        如果是页面中存在的元素，那么调用 append()后，会把这个元素放到相应的目标元素里面去；<br>        但是，原来的这个元素，就不存在了。(剪切)<br>        如果是给多个目标追加元素，那么方法的内部会复制多份这个元素，然后追加到多个目标里面去。<br>$(‘div’)appendTo(‘p’)就是把所有div标签及里面的东西剪切到p标签里面<br>prepend()作用：在被选元素内部从前面追加内容或节点。</p></blockquote><h4 id="清空元素"><a href="#清空元素" class="headerlink" title="清空元素"></a>清空元素</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(selector).empty();</span><br><span class="line">$(selector).html(&apos;&apos;);</span><br><span class="line">$(selector).remove(); //会把自己也删除</span><br></pre></td></tr></table></figure><h4 id="on-off方式绑定-解除事件"><a href="#on-off方式绑定-解除事件" class="headerlink" title="on/off方式绑定/解除事件"></a>on/off方式绑定/解除事件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">$(&apos;ul&apos;).on(&apos;click&apos;,&apos;li&apos;,function()&#123;&#125;) 把click事件给了li,一般用于后来添加的元素,为了与上面绑定的样式一样</span><br><span class="line">[selector] 一般用于事件委托</span><br><span class="line">$(&apos;ul&apos;).off(&apos;click&apos;,&apos;li&apos;,function()&#123;&#125;) 解除li绑定的事件,自身另外绑定的其他事件(mouseenter...)不会失效</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS基本数据类型和引用数据类型</title>
      <link href="/2019/10/10/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2019/10/10/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>数据类型之间的区别</p><a id="more"></a><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><p> Number Boolean Undefined Null String 基本数据类型是按值访问的,可以直接操作保存在变量中实际的值</p><ol><li><p>基本数据类型的值是不可变的</p></li><li><p>基本数据类型不可以添加属性和方法</p></li><li><p>基本数据类型是保存在栈内存中的</p><ul><li>常用基本数据类型之间的转换<br>Number 转换类型 里面有非数字,数字之间有空格(3 45)或者是NaN的全部转换为NaN,如果是空或者全是空格转化为0 </li></ul><p>Boolean(用来判断false/true) 转换类型 通常情况下 undefined ‘’ NaN null 0 会变成false</p><p>toString 转换类型 null undefined 未赋值的变量会报错 toString String字符串转换NaN 还为NaN</p><h4 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h4><p>JS中引用数据类型(对象),Object Array Function Data等</p></li><li><p>引用数据类型的值是可变的</p></li><li><p>引用数据类型可以添加属性和方法</p></li><li><p>引用数据类型是保存在栈内存和堆内存中的</p></li><li><p>引用数据类型的赋值是对象引用</p></li></ol><h4 id="JavaScript检测一个变量是String类型"><a href="#JavaScript检测一个变量是String类型" class="headerlink" title="JavaScript检测一个变量是String类型"></a>JavaScript检测一个变量是String类型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">typeof(obj) === &apos;String&apos;</span><br><span class="line">typeof obj === &apos;String&apos;</span><br><span class="line">obj.constructor === String</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>排序和递归</title>
      <link href="/2019/09/29/%E6%8E%92%E5%BA%8F%E5%92%8C%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/"/>
      <url>/2019/09/29/%E6%8E%92%E5%BA%8F%E5%92%8C%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<!-- ### 排序算法 --><blockquote><p>在生活中，我们离不开排序。例如体育课上按身高排的队；又如考试过后按成绩排的名次。在编程中也是如此，例如当开发一个学生管理系统，需要按照学好从小到大进行排序；开发一个平台，需要把同类商品按价格从高到低排序。（当然，一般前端不负责处理业务逻辑。）由此可见，排序无处不在。排序看似简单，但是背后却隐藏了多种多样的算法与思想。一个算法的好坏是通过 时间复杂度 与 空间复杂度 来衡量的。简单来说，时间复杂度 就是执行算法的 时间成本 ，空间复杂度 则是执行算法的 空间成本 。</p></blockquote><a id="more"></a><h3 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h3><p>稳定：如果 a 原本在 b 前面，而 a=b，排序之后 a 仍然在 b 的前面</p><p>不稳定：如果 a 原本在 b 的前面，而 a=b，排序之后 a 可能会出现在 b 的后面</p><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><p>时间复杂度 与 空间复杂度 都是用 “大 O” 来表示，写作 O(*)。有一点值得注意的是，我们谈论复杂度，一般谈论的都是时间复杂度。</p><p>常见时间复杂度的 “大 O 表示法” 描述有以下几种：<br>| 时间复杂度 | 非正式术语 |<br>| —- | —- |<br>|O(1)| 常数阶|<br>|O(n)| 线性阶|<br>|O(n2)| 平方阶|<br>|O(log n)| 对数阶|<br>|O(n log n)| 线性对数阶|<br>|O(n3)| 立方阶|<br>|O(2n)| 指数阶|</p><p>一个算法在 N 规模下所消耗的时间消耗从大到小如下：</p><p>O(1) &lt; O(log n) &lt; O(n) &lt; O(n log n) &lt; O(n2) &lt; O(n3) &lt; O(2n)</p><h2 id="常见数组排序方法"><a href="#常见数组排序方法" class="headerlink" title="常见数组排序方法"></a>常见数组排序方法</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li><li>之所以叫冒泡排序，每一轮两两比较之后，都会冒出一个本轮最大的数，将其移动到本轮尾部。</li></ol><p><img src="https://user-gold-cdn.xitu.io/2019/7/2/16bb2880dc1ebaac?imageslim" alt></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要几个轮次 6个数排序 最大需要5轮</span></span><br><span class="line"><span class="comment">// 外层循环控制轮次</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - i; j++) &#123;</span><br><span class="line"><span class="comment">// 经过这样for循环,我们能找到本轮最大的数,并排在本轮尾部</span></span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line"><span class="comment">// 交换位置</span></span><br><span class="line"><span class="keyword">var</span> temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 5, 12, 32, 40, 41]</span></span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>选择排序是一种简单直观的排序算法。它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到全部待排序的数据元素排完。</p><p><img src="https://user-gold-cdn.xitu.io/2019/7/8/16bcf4425ac4d235?imageslim" alt></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">var</span> minIndex = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[minIndex] &gt; arr[j]) &#123;</span><br><span class="line">minIndex = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (minIndex !== i) &#123;</span><br><span class="line"><span class="comment">// 交换位置</span></span><br><span class="line"><span class="keyword">var</span> temp = arr[i];</span><br><span class="line">arr[i] = arr[minIndex];</span><br><span class="line">arr[minIndex] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p><p>插入排序的算法步骤如下：</p><ul><li>从第一个元素开始，该元素可以认为已经被排序；</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li><li>重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置；</li><li>将新元素插入到该位置后；</li><li>重复步骤 2~5。</li></ul><p><img src="https://user-gold-cdn.xitu.io/2019/7/8/16bcf447e9291320?imageslim" alt></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> len = arr.length;</span><br><span class="line"><span class="keyword">var</span> j, temp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">j = i - <span class="number">1</span>;</span><br><span class="line">temp = arr[i];</span><br><span class="line"><span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp) &#123;</span><br><span class="line">arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>堆排序 是指利用 <code>二叉堆</code> 这种数据结构所设计的一种排序算法。堆是一个近似 完全二叉树 的结构，并同时满足 堆积的性质 ：即子节点的键值或索引总是小于（或者大于）它的父节点。</p><p>二叉堆分以下两个类型：</p><ul><li>最大堆： 最大堆任何一个父节点的值，都大于等于它左右孩子节点的值。</li></ul><p><img src="https://user-gold-cdn.xitu.io/2019/7/2/16bb288163c5be34?imageslim" alt></p><blockquote><p>数组表示如下：[10, 8, 9, 7, 5, 4, 6, 3, 2]</p></blockquote><ul><li>最小堆：最小堆任何一个父节点的值，都小于等于它左右孩子节点的值。</li></ul><p><img src="https://user-gold-cdn.xitu.io/2019/7/2/16bb288174479a44?imageslim" alt></p><blockquote><p>数组表示如下：[1, 3, 2, 6, 5, 7, 8, 9, 10]</p></blockquote><p>堆排序的算法步骤如下：</p><ul><li>把无序数列构建成二叉堆；</li><li>循环删除堆顶元素，替换到二叉堆的末尾，调整堆产生新的堆顶。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 堆下沉调整 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">adjustHeap</span> (<span class="params">arr, parentIndex, length</span>) =&gt; </span>&#123;</span><br><span class="line"><span class="keyword">var</span> temp = arr[parentIndex]; <span class="comment">/* temp保存父节点值，用于最后赋值 */</span></span><br><span class="line"><span class="keyword">var</span> childIndex = <span class="number">2</span> * parentIndex + <span class="number">1</span>; <span class="comment">/* 保存子节点位置 */</span></span><br><span class="line"><span class="keyword">while</span> (childIndex &lt; length) &#123;</span><br><span class="line"><span class="comment">/* 如果有右子节点，且右子节点大于左子节点的值，则定位到右子节点 */</span></span><br><span class="line"><span class="keyword">if</span> (childIndex + <span class="number">1</span> &lt; length &amp;&amp; arr[childIndex + <span class="number">1</span>] &gt; arr[childIndex]) &#123;</span><br><span class="line">childIndex++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 如果父节点小于任何一个子节点的值，直接退出循环 */</span></span><br><span class="line"><span class="keyword">if</span> (temp &gt;= arr[childIndex]) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 无序交换，单向赋值即可 */</span></span><br><span class="line">arr[parentIndex] = arr[childIndex];</span><br><span class="line">parentIndex = childIndex;</span><br><span class="line">childIndex = <span class="number">2</span> * childIndex + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">arr[parentIndex] = temp;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">heapSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="comment">/* 把无序数列构建成最大堆 */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>); i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">adjustHeap(arr, i, arr.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line"><span class="comment">/* 交换最后一个元素与第一个元素 */</span></span><br><span class="line">[arr[i], arr[<span class="number">0</span>]] = [arr[<span class="number">0</span>], arr[i]];</span><br><span class="line"><span class="comment">/* 调整最大堆 */</span></span><br><span class="line">adjustHeap(arr, <span class="number">0</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>递归是一种编程模式，用于一个任务可以被分割为多个相似的更简单的任务的场景。</p><p>当一个函数解决一个任务时，在该过程中它可以调用很多其它函数。那么当一个函数调用<strong>自身</strong>时，就称其为<strong>递归</strong>。</p><h3 id="两种思考方式"><a href="#两种思考方式" class="headerlink" title="两种思考方式"></a>两种思考方式</h3><p>简单起见，我们写一个函数 <code>pow(x, n)</code>，它可以计算 <code>x</code> 的 <code>n</code> 次方，即用 <code>x</code> 乘以自身 <code>n</code> 次。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pow(<span class="number">2</span>, <span class="number">2</span>) = <span class="number">4</span></span><br><span class="line">pow(<span class="number">2</span>, <span class="number">3</span>) = <span class="number">8</span></span><br><span class="line">pow(<span class="number">2</span>, <span class="number">4</span>) = <span class="number">16</span></span><br></pre></td></tr></table></figure><p>有两种实现方式。</p><ol><li><p>迭代思路：<code>for</code> 循环：</p> <figure class="highlight js"><figcaption><span>run</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pow</span>(<span class="params">x, n</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> result = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在循环中用 x 乘以 result</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">result *= x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(pow(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure></li><li><p>递归思路：简化任务，调用自身：</p> <figure class="highlight js"><figcaption><span>run</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pow</span>(<span class="params">x, n</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x * pow(x, n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(pow(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure></li></ol><p>注意递归方式完全不相同。</p><p>当 <code>pow(x, n)</code> 被调用时，执行分为两个分支：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">              <span class="keyword">if</span> n==<span class="number">1</span>  = x</span><br><span class="line">             /</span><br><span class="line">pow(x, n) =</span><br><span class="line">             \</span><br><span class="line">              <span class="keyword">else</span>     = x * pow(x, n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><ol><li>如果 <code>n == 1</code>，所有事情都会很简单，这叫做递归的<strong>基础</strong>(跳出条件)，因为它立即得到显而易见的结果：<code>pow(x, 1)</code> 等于 <code>x</code>。</li><li>否则，我们可以用 <code>x * pow(x, n - 1)</code> 表示 <code>pow(x, n)</code>。在数学里，可能会这么写 <code>x<sup>n</sup> = x * x<sup>n-1</sup></code>。这叫做<strong>一个递归步骤</strong>：我们将任务转变为更简单的行为（<code>x</code> 的乘法）和更简单的同类任务调用（更小的 <code>n</code> 给 <code>pow</code>）。后面步骤继续简化直到 <code>n</code> 等于 <code>1</code>。</li></ol><p>我们也可以说 <code>pow</code> <strong>递归的调用自身</strong> 直到 <code>n == 1</code>。</p><p><img src="/.com//pow.svg" alt="recursive diagram of pow"></p><p>比如，为了计算 <code>pow(2, 4)</code>，递归变体经过了下面几个步骤：</p><ol><li><code>pow(2, 4) = 2 * pow(2, 3)</code></li><li><code>pow(2, 3) = 2 * pow(2, 2)</code></li><li><code>pow(2, 2) = 2 * pow(2, 1)</code></li><li><code>pow(2, 1) = 2</code></li></ol><p>所以，递归生成了更简单的函数调用，然后 —— 更加简单，继续，直到结果变得很明显。</p><figure class="highlight plain"><figcaption><span>header</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">递归解决方案一般比迭代更简洁。</span><br><span class="line"></span><br><span class="line">这里我们可以使用三元运算符 `?` 来替换 `if` 语句，从而让 `pow(x, n)` 更简洁并且可读性依然很高：</span><br><span class="line"></span><br><span class="line">```js run</span><br><span class="line">function pow(x, n) &#123;</span><br><span class="line">  return (n == 1) ? x : (x * pow(x, n - 1));</span><br><span class="line">&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>最大的嵌套调用次数（包括首次）称为<strong>递归深度</strong>。在我们的例子中，它正好等于 <code>n</code>。</p><p>最大递归深度受限于 JavaScript 引擎。我们可以确信基本是 10000，有些引擎可能允许更大，但是 100000 很可能就超过了限制。有一些自动优化能够缓解这个（「尾部调用优化」），但是它们还没有被完全支持，只能用于简单场景。</p><p>这就限制了递归的应用，但是递归仍然被广泛使用。有很多任务使用递归思路会让代码更简单，更容易维护。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS递归经典案例</title>
      <link href="/2019/09/28/%E4%B8%A4%E4%B8%AA%E7%BB%8F%E5%85%B8%E7%9A%84%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0/"/>
      <url>/2019/09/28/%E4%B8%A4%E4%B8%AA%E7%BB%8F%E5%85%B8%E7%9A%84%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>竟然还可以这样玩.</p><a id="more"></a><h3 id="递归实现一个数的阶乘"><a href="#递归实现一个数的阶乘" class="headerlink" title="递归实现一个数的阶乘"></a>递归实现一个数的阶乘</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">function mul(x)&#123;</span><br><span class="line">    if(x===0||x===1)&#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return x*mul(x-1);</span><br><span class="line">&#125;</span><br><span class="line">console.log(mul(3));</span><br><span class="line">3的阶乘结果就出来了 6</span><br><span class="line"></span><br><span class="line">实现1!+2!+3!+.....n! 的之和</span><br><span class="line"> function add(x)&#123;</span><br><span class="line">    if(x===0||x===1)&#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return mul(x)+add(x-1);   //mul()调用上面的那个方法</span><br><span class="line">&#125;</span><br><span class="line">console.log(add(3));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="递归实现斐波那契数列"><a href="#递归实现斐波那契数列" class="headerlink" title="递归实现斐波那契数列"></a>递归实现斐波那契数列</h3><ul><li>1 + 1 + 2 + 3 + 5 + 8 + 13 + 21 + ….<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function add(x)&#123;</span><br><span class="line">    if (n === 1 || n === 2) &#123;</span><br><span class="line">          return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return add(x-1) + add(x-2)</span><br><span class="line">&#125;</span><br><span class="line">add(5)</span><br></pre></td></tr></table></figure></li></ul><h3 id="n阶楼梯每次走一步或两步-一共有多少种走法"><a href="#n阶楼梯每次走一步或两步-一共有多少种走法" class="headerlink" title="n阶楼梯每次走一步或两步,一共有多少种走法"></a>n阶楼梯每次走一步或两步,一共有多少种走法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function step(x)&#123;</span><br><span class="line">    if(x===1||x===2)&#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return step(x-1)+step(x-2);</span><br><span class="line">&#125;</span><br><span class="line">step(10)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS必会的两种排序方法</title>
      <link href="/2019/09/27/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E5%92%8C%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
      <url>/2019/09/27/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E5%92%8C%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>其他的理解了在发</p><a id="more"></a><h3 id="原始人冒泡排序"><a href="#原始人冒泡排序" class="headerlink" title="原始人冒泡排序"></a>原始人冒泡排序</h3><ul><li>比较两个数字</li><li>如果左边的数字大，则交换两个数字的位置</li><li>向右移动一个位置，比较下两个数字</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var arr = [25,15,30,11,6,8];</span><br><span class="line">    for(var j = 0;j&lt;arr.length;j++)&#123;</span><br><span class="line">        for(var i = 0;i&lt;arr.length-1-j;i++)&#123;</span><br><span class="line">            if(arr[i]&gt;arr[i+1])&#123;</span><br><span class="line">                var temp = arr[i];</span><br><span class="line">                arr[i] = arr[i+1];</span><br><span class="line">                arr[i+1] = temp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(arr);</span><br><span class="line">// arr.length-1-j 是已经排序过的没有必要再排一次了</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><ul><li>记录所有数据，并找出最小的，并和最左边的数字交换</li><li>最左边数字已经排序好，从第2个数字开始依次重复1步骤的操作</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var arr = [12,342,53,6753,131,435];</span><br><span class="line">    for(var j = 0;j&lt;arr.length-1;j++ )&#123;</span><br><span class="line">    var minIndex = j;</span><br><span class="line">    for(var i = j+1;i&lt;arr.length;i++)&#123;</span><br><span class="line">        if(arr[minIndex]&gt;arr[i])&#123;</span><br><span class="line">            minIndex = i;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    var temp = arr[minIndex];</span><br><span class="line">    arr[j] = arr[minIndex]; </span><br><span class="line">    arr[minIndex]  =arr[j]; </span><br><span class="line">    </span><br><span class="line"> &#125;</span><br><span class="line"> console.log(arr);</span><br><span class="line">声明一个数组索引为0的变量让其与每一个数组进行比较</span><br><span class="line">找到那个比他小的数,调换索引(没有找到,那么他就是最小的数)</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS3实现正方体效果</title>
      <link href="/2019/09/24/CSS3%E5%AE%9E%E7%8E%B0%E7%AB%8B%E6%96%B9%E4%BD%93/"/>
      <url>/2019/09/24/CSS3%E5%AE%9E%E7%8E%B0%E7%AB%8B%E6%96%B9%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<p>令人头痛的3D感</p><a id="more"></a><h3 id="努力想象3D坐标系"><a href="#努力想象3D坐标系" class="headerlink" title="努力想象3D坐标系"></a>努力想象3D坐标系</h3><ul><li><p>上代码</p></li><li> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">最外面的盒子宽高设置为200px;</span><br><span class="line"></span><br><span class="line">.front&#123;transform:rotateY(0deg) translateZ(100px);&#125; 前面盒子</span><br><span class="line">.back&#123;transform:rotateX(180deg) translateZ(100px);&#125; 后面盒子</span><br><span class="line">.right&#123; transform:rotateY(90deg) translateZ(100px);&#125; 右面盒子</span><br><span class="line">.left&#123;transform:rotateY(-90deg) translateZ(100px);&#125; 左面盒子</span><br><span class="line">.top&#123;transform:rotateX(90deg) translateZ(100px);&#125; 上面盒子</span><br><span class="line">.bottom&#123;transform:rotateX(-90deg) translateZ(100px);&#125; 下面盒子</span><br></pre></td></tr></table></figure></li><li><p>不要问为什么</p></li><li> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">    &lt;style&gt;</span><br><span class="line">    .main&#123;</span><br><span class="line">        height: 200px;</span><br><span class="line">        width: 200px;</span><br><span class="line">        position: relative;</span><br><span class="line">        transition: all 6s;</span><br><span class="line"></span><br><span class="line">        transform-style: preserve-3d;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    div&#123;</span><br><span class="line">      width: 200px;</span><br><span class="line">      height: 200px;</span><br><span class="line">      position: absolute; </span><br><span class="line">    &#125;</span><br><span class="line">     .box&#123;</span><br><span class="line">      transform:rotateY(0deg) translateZ(100px);</span><br><span class="line">      background: linear-gradient(to right,red, green, blue);</span><br><span class="line">      &#125;</span><br><span class="line">      .box2&#123;</span><br><span class="line">          transform:rotateX(180deg) translateZ(100px);</span><br><span class="line">          background: radial-gradient(circle at 10px 10px,red,yellow);</span><br><span class="line">      &#125;</span><br><span class="line">      .box3&#123;</span><br><span class="line">          transform:rotateY(90deg) translateZ(100px);</span><br><span class="line">          background: linear-gradient(to right,yellow,red);</span><br><span class="line">      &#125;</span><br><span class="line">      .box4&#123;</span><br><span class="line">          transform:rotateY(-90deg) translateZ(100px);</span><br><span class="line">          background: radial-gradient(circle at 10px 10px,blue,red);</span><br><span class="line">          </span><br><span class="line">      &#125;</span><br><span class="line">      .box5&#123;</span><br><span class="line">          background: radial-gradient(circle at 10px 10px,orange,red);</span><br><span class="line">          </span><br><span class="line">          transform:rotateX(90deg) translateZ(100px);</span><br><span class="line">      &#125;</span><br><span class="line">      .box6&#123;</span><br><span class="line">          background: radial-gradient(circle at 10px 10px,green,red);</span><br><span class="line"></span><br><span class="line">          transform:rotateX(-90deg) translateZ(100px);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      .main:hover &#123;</span><br><span class="line">          transform: rotateX(360deg)  rotateY(360deg);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;div class=&quot;main&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;box3&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;box4&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;box5&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;box6&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS3</title>
      <link href="/2019/09/24/CSS3%E6%80%BB%E7%BB%93/"/>
      <url>/2019/09/24/CSS3%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>难搞的CSS3</p><a id="more"></a><h3 id="CSS3渐变效果"><a href="#CSS3渐变效果" class="headerlink" title="CSS3渐变效果"></a>CSS3渐变效果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">线性渐变</span><br><span class="line">background: linear-gradient(to right,color1,color2,clor3);</span><br><span class="line"></span><br><span class="line">径向渐变</span><br><span class="line">background: radial-gradient(circle at 10px 10px ,color1,color2,clor3);</span><br></pre></td></tr></table></figure><h3 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transtion:all ease 0.5s</span><br></pre></td></tr></table></figure><ul><li>2D转换<blockquote><p> 缩放 scale(x, y) 可以对元素进行水平和垂直方向的缩放，x、y的取值可为小数，不可为负值；<br>移动 translate(x, y) 可以改变元素的位置，x、y可为负值；<br>旋转 rotate(deg) 可以对元素进行旋转，正值为顺时针，负值为逆时针；</p></blockquote></li></ul><h3 id="3D转换"><a href="#3D转换" class="headerlink" title="3D转换"></a>3D转换</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue路由</title>
      <link href="/2019/09/21/vue%E8%B7%AF%E7%94%B1/"/>
      <url>/2019/09/21/vue%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<p>vue之间路由传参,路由嵌套</p><a id="more"></a><h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;router-link to:&apos;/login&apos;&gt;登录&lt;/router-link&gt;</span><br><span class="line">  &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line"></span><br><span class="line">  var login = &#123;</span><br><span class="line">      template = `&lt;h1&gt;创建路由&lt;/h1&gt;`</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">var router = new VueRouter(&#123;</span><br><span class="line">      routes :[</span><br><span class="line">         //&#123;path:&apos;/&apos;,redirect:&apos;/login&apos;&#125;, redirect设置默认路由</span><br><span class="line">          &#123;path:&apos;/login&apos;,component:login&#125;</span><br><span class="line">      ],</span><br><span class="line">       linkActiveClass: &apos;custom&apos; </span><br><span class="line">       //linkActiveClass 可改变router-link默认的class的属性值</span><br><span class="line">  &#125;)</span><br><span class="line">      new vue(&#123;</span><br><span class="line">          el: &apos;#app&apos;,</span><br><span class="line">          router</span><br><span class="line">      &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="路由之间的嵌套"><a href="#路由之间的嵌套" class="headerlink" title="路由之间的嵌套"></a>路由之间的嵌套</h3>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;router-link to:&apos;/login&apos;&gt;登录&lt;/router-link&gt;</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;template id=&quot;tem&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;这是account账户&lt;/h1&gt;</span><br><span class="line">        &lt;router-link to=&quot;/account/login&quot;&gt;登录&lt;/router-link&gt;</span><br><span class="line">        &lt;router-link to=&quot;/account/regster&quot;&gt;注册&lt;/router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var account = &#123;</span><br><span class="line">        template: &apos;#tem&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    var login = &#123;</span><br><span class="line">        template:&apos;&lt;h1&gt;登录&lt;/h1&gt;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    var regster= &#123;</span><br><span class="line">        template:&apos;&lt;h1&gt;注册&lt;/h1&gt;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">var router = new VueRouter(&#123;</span><br><span class="line">    routes:[</span><br><span class="line">        &#123;path:&apos;/account&apos;,</span><br><span class="line">        component:account,</span><br><span class="line">        children:[</span><br><span class="line">            &#123;path:&apos;login&apos;,compent:login&#125;,</span><br><span class="line">            &#123;path:&apos;regster&apos;,compent:regster&#125;</span><br><span class="line">             //使用children属性时,实现子路由,同时子路由path前面不要带/,否则永远以根路径开始请求,</span><br><span class="line">            //这样不方便我们解析URL</span><br><span class="line">        ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        router</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue</title>
      <link href="/2019/09/21/vue%E4%BC%A0%E5%80%BC/"/>
      <url>/2019/09/21/vue%E4%BC%A0%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<pre><code>关于vue父向子传值问题</code></pre><a id="more"></a><h3 id="props的用法"><a href="#props的用法" class="headerlink" title="props的用法"></a>props的用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;first :fromparent=&apos;parent&apos;&gt;&lt;/first&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;template id=&apos;child&apos;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123;child&#125;&#125;我是一个子组件&#123;&#123;fromparent&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var child = &#123;</span><br><span class="line">    template = &apos;#child&apos;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            child:&apos;我是两年半的实习生&apos;      </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    props:[&apos;fromparent&apos;]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el:&apos;#app&apos;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            parent:&apos;我是你的爸爸&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        compontes:&#123;</span><br><span class="line">            first</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="子调用父方法this-emit-‘event’-arguments"><a href="#子调用父方法this-emit-‘event’-arguments" class="headerlink" title="子调用父方法this.$emit(‘event’,[arguments])"></a>子调用父方法this.$emit(‘event’,[arguments])</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&apos;#app&apos;&gt;</span><br><span class="line">    &lt;child @fun = &apos;parent&apos;&gt;&lt;/child&gt;        //@fun 里面的fun是自定义的</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">  &lt;template id=&apos;child&apos;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type = &apos;button&apos; value=&apos;调用父方法&apos; @click = &apos;childclick&apos;&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var child = (</span><br><span class="line">    template:&apos;child&apos;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        childclick()&#123;</span><br><span class="line">                this.$emit(&apos;fun&apos;)</span><br><span class="line">                //子调用父方法一定要写到子里面 ,用别人的值,方法要写到自身身上</span><br><span class="line">                **this.$emit(&apos;fun&apos;,[....argu])传参要从第二个传值,不带引号**</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el:&apos;#app&apos;,</span><br><span class="line">        data:&#123;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        components:&#123;</span><br><span class="line">            child</span><br><span class="line">        &#125;</span><br><span class="line">        methods:&#123;</span><br><span class="line">            parent()&#123;</span><br><span class="line">                console.log(&apos;调用了父方法&apos;)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git如何上传到github</title>
      <link href="/2019/09/20/git/"/>
      <url>/2019/09/20/git/</url>
      
        <content type="html"><![CDATA[<p>基本命令和问题</p><a id="more"></a><h3 id="用到的git命令"><a href="#用到的git命令" class="headerlink" title="用到的git命令"></a>用到的git命令</h3><blockquote><p>官网下载git 一路傻瓜式安装就行了;</p><p>把你想要上传的所有文件拉到一个文件夹里,在空白区域右键 git bash here</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; git init </span><br><span class="line">&gt; git add . </span><br><span class="line">&gt; git commit -m &apos;你对传到github上的文件的描述&apos;</span><br><span class="line">&gt; git remote add origin &apos;github的地址&apos;</span><br><span class="line">&gt; git push -u origin master </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="首次安装可能会遇到的一些问题"><a href="#首次安装可能会遇到的一些问题" class="headerlink" title="首次安装可能会遇到的一些问题"></a>首次安装可能会遇到的一些问题</h3><ol><li><p>如果窗口看到提示一下两个信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;John Doe&quot;</span><br><span class="line">git config --global user.email johndoe@example.com</span><br><span class="line"></span><br><span class="line">解决办法：按上面的提升，cmd窗口接着输入</span><br><span class="line"></span><br><span class="line">git config --global user.name &quot;这里是你的github用户名  </span><br><span class="line">git config --global user.email xxx@xxx.com(你的邮箱)</span><br></pre></td></tr></table></figure></li><li><p>提交到远程时候,提示:</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fatal:remote origin already exists</span><br><span class="line">解决办法:删除远程git仓库</span><br><span class="line">git remote rm origin</span><br><span class="line">git remote add origin &apos;github的地址&apos;</span><br><span class="line">git push -u origin master </span><br><span class="line">首次登陆需要登陆按照提示输入账户名和密码</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hover的一些微小效果</title>
      <link href="/2019/09/19/hover/"/>
      <url>/2019/09/19/hover/</url>
      
        <content type="html"><![CDATA[<p>百度的简单的效果</p><a id="more"></a><h3 id="css3中hover图片效果"><a href="#css3中hover图片效果" class="headerlink" title="css3中hover图片效果"></a>css3中hover图片效果</h3><ul><li>hover图片从上向下出现一个模糊层<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    *&#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line">    .box&#123;</span><br><span class="line">        height: 300px;</span><br><span class="line">        width: 300px;</span><br><span class="line">        border: 1px solid black;</span><br><span class="line">        position: relative;</span><br><span class="line">    &#125;</span><br><span class="line">    .box1&#123;</span><br><span class="line">        height: 300px;</span><br><span class="line">        width: 300px;</span><br><span class="line">        position: absolute;</span><br><span class="line">        top: -300px;</span><br><span class="line">        left: 0;</span><br><span class="line">        transition: all 0.5s ease;</span><br><span class="line">        background: rgba(0,0,0,0.5); </span><br><span class="line">    &#125;</span><br><span class="line">    .box:hover .box1&#123;</span><br><span class="line">        top:0;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class = &apos;box&apos;&gt;</span><br><span class="line">    &lt;div class = &apos;box1&apos;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">如果想要其他方向显示只需改变方向和hover方向的值</span><br><span class="line">想要谁发生微小动画就要在谁身上添加动画属性</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于HTML的基本知识</title>
      <link href="/2019/09/18/base/"/>
      <url>/2019/09/18/base/</url>
      
        <content type="html"><![CDATA[<p>“9.09-9.20所学的HTML知识总结”</p><a id="more"></a><h3 id="a-img-p-h1-h6"><a href="#a-img-p-h1-h6" class="headerlink" title="a img p h1-h6"></a>a img p h1-h6</h3><blockquote><p>target = ‘_self blank’ _self 自身页面打开可以后退自身标签一般不使用</p><p>blank 新页面打开 不可以后退<br>img 只设置宽或者高另一边会自动按原图宽高比例设置 在VScode上引入上一级图片 ../<br>  引入下一级目录  当前文件夹/                  &gt;<br>p h1-h6 默认有margin</p></blockquote><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> a:link&#123;&#125; </span><br><span class="line"></span><br><span class="line">匹配未被访问时的状态</span><br><span class="line"></span><br><span class="line">a:visited&#123;&#125; </span><br><span class="line"></span><br><span class="line">匹配链接访问过的状态</span><br><span class="line"></span><br><span class="line"> a:active&#123;&#125;</span><br><span class="line"></span><br><span class="line">匹配链接在激活时的状态</span><br><span class="line"></span><br><span class="line"> a:hover&#123;&#125;</span><br><span class="line"></span><br><span class="line">匹配鼠标放上去时的状态</span><br></pre></td></tr></table></figure><h3 id="a标签的link、visited、hover、active是有一定顺序的"><a href="#a标签的link、visited、hover、active是有一定顺序的" class="headerlink" title="a标签的link、visited、hover、active是有一定顺序的"></a>a标签的link、visited、hover、active是有一定顺序的</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a:link </span><br><span class="line">a:visited </span><br><span class="line">a:hover </span><br><span class="line">a:active</span><br></pre></td></tr></table></figure><h3 id="文字多出部分显示省略号"><a href="#文字多出部分显示省略号" class="headerlink" title="文字多出部分显示省略号"></a>文字多出部分显示省略号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">overflow: hidden;</span><br><span class="line">white-space: nowrap;</span><br><span class="line">text-overflow: ellipsis;</span><br></pre></td></tr></table></figure><h3 id="行内元素和块级元素-img算什么-行内元素怎么转化为块级元素"><a href="#行内元素和块级元素-img算什么-行内元素怎么转化为块级元素" class="headerlink" title="行内元素和块级元素?img算什么?行内元素怎么转化为块级元素?"></a>行内元素和块级元素?img算什么?行内元素怎么转化为块级元素?</h3><blockquote><p>行内元素：和有他元素都在一行上,高度、行高及外边距&gt; 和内边距都不可改变,文字图片的宽度不可改变,只能容&gt; 纳文本或者其他行内元素;其中img是行元素;</p><p>行内元素设置 margin padding 无效<br>块级元素：总是在新行上开始,高度、行高及外边距和内边距都可控制,可以容纳内敛元素和其他元素;</p><p>行元素转换为块级元素方式：display：block;</p></blockquote><h3 id="如何解决父元素高度塌陷问题"><a href="#如何解决父元素高度塌陷问题" class="headerlink" title="如何解决父元素高度塌陷问题"></a>如何解决父元素高度塌陷问题</h3><p>1 让父元素浮动<br>2 增加空的元素到最后位置 clear:both<br>3 增加一个类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.clear::after&#123;</span><br><span class="line">    content:&apos;&apos;;</span><br><span class="line">    display:block;</span><br><span class="line">    clear:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><blockquote><p>相对定位:一般微调;不会脱离文档流;</p><p>绝对定位(fixed,absolute):会脱离文档流的元素会变成块级元素,默认情况下,宽度由内容决定<br>                        脱离文档流的元素margin可以使用,但auto失效</p></blockquote><h3 id="将多个元素设置为同一行-清除浮动有几种方式"><a href="#将多个元素设置为同一行-清除浮动有几种方式" class="headerlink" title="将多个元素设置为同一行?清除浮动有几种方式?"></a>将多个元素设置为同一行?清除浮动有几种方式?</h3><blockquote><p>将多个元素设置为同一行：float，inline-block<br>清除浮动的方式:<br>                1. 添加新的元素 、应用 clear：both;<br>                2. 父级div定义 overflow: hidden;</p></blockquote><h3 id="简述几个css-hack"><a href="#简述几个css-hack" class="headerlink" title="简述几个css hack?"></a>简述几个css hack?</h3><h4 id="图片间隙"><a href="#图片间隙" class="headerlink" title="图片间隙"></a>图片间隙</h4><blockquote><p>在div中插入图片，图片会将div下方撑大3px。</p><p>hack1: 将div与img标签写在同一行。</p><p>hack2：给img标签属性添加display：block；</p></blockquote><h4 id="dt-li-中的图片间隙"><a href="#dt-li-中的图片间隙" class="headerlink" title="dt li 中的图片间隙"></a>dt li 中的图片间隙</h4><blockquote><p>hack：给<img>添加display：block；</p></blockquote><h3 id="鼠标指针"><a href="#鼠标指针" class="headerlink" title="鼠标指针"></a>鼠标指针</h3><blockquote><p>hack：若统一某一元素鼠标指针为手型：cursor：pointer；</p><p>当li内的a转化块元素时，给a设置float，IE里面会出现阶梯状</p><p>hack1：给a加display：inline-block；</p><p>hack2：给li加float：left；</p></blockquote><h3 id="href和src区别-title和alt"><a href="#href和src区别-title和alt" class="headerlink" title="href和src区别? title和alt"></a>href和src区别? title和alt</h3><blockquote><p>href (Hypertext Reference)指定网络资源的位置（超文本引用），从而在当前元素或者当前文档和由当前属性定义的需要的锚点或资源之间定义一个链接或者关系，在 link和a 等元素上使用。</p><p>src (Source)属性仅仅嵌入当前资源到当前文档元素定义的位置，是页面必不可少的一部分，是引入。在 img、script、iframe 等元素上使用。</p><p>title：既是html标签，又是html属性，title作为属性时，用来为元素提供额外说明信息.</p><p>alt：alt是html标签的属性，alt属性则是用来指定替换文字，只能用在img、area和input元素中（包括applet元素），用于网页中图片无法正常显示时给用户提供文字说明使其了解图像信息.</p></blockquote><h3 id="如何让一个div水平垂直居中"><a href="#如何让一个div水平垂直居中" class="headerlink" title="如何让一个div水平垂直居中"></a>如何让一个div水平垂直居中</h3><p>方法1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.div1&#123; width:400px;</span><br><span class="line">       height:400px; </span><br><span class="line">       border:#CCC 1px solid;</span><br><span class="line">       background:#99f;</span><br><span class="line">       position:absolute;</span><br><span class="line">       left:50%;   </span><br><span class="line">       top:50%;   </span><br><span class="line">       transform: translate(-50%,-50%); &#125;  </span><br><span class="line"></span><br><span class="line">       &lt;div class=&quot;div1&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>方法2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.div2&#123; width:400px;</span><br><span class="line">       height:400px;</span><br><span class="line">       border:#CCC 1px solid;</span><br><span class="line">       background:#99f;</span><br><span class="line">       position: absolute;</span><br><span class="line">       left:0;</span><br><span class="line">       top: 0;</span><br><span class="line">       bottom: 0;</span><br><span class="line">       right: 0; </span><br><span class="line">       margin: auto; &#125;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;div2&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>方法三</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.div3&#123; width:400px;</span><br><span class="line">      height:400px;</span><br><span class="line">      border:#CCC 1px solid;</span><br><span class="line">  background:#9f9;</span><br><span class="line">    position: absolute;</span><br><span class="line">        left: 50%;top:50%;  </span><br><span class="line"> margin-left:-200px;</span><br><span class="line">  margin-top: -200px;  &#125;  </span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;div3&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="图片和文字在同一行显示"><a href="#图片和文字在同一行显示" class="headerlink" title="图片和文字在同一行显示?"></a>图片和文字在同一行显示?</h3><blockquote><p>1 在css中给div添加上“vertical-align:middle”属性。<br>2 分别把图片和文字放入不同的div中，然后用“margin”属性进行定位，就可以使他们显示在同一行。<br>3 把图片设置为背景图片。</p></blockquote><h3 id="简述一下同步和异步的区别"><a href="#简述一下同步和异步的区别" class="headerlink" title="简述一下同步和异步的区别"></a>简述一下同步和异步的区别</h3><h4 id="同步是阻塞模式-异步是非阻塞模式"><a href="#同步是阻塞模式-异步是非阻塞模式" class="headerlink" title="同步是阻塞模式,异步是非阻塞模式"></a>同步是阻塞模式,异步是非阻塞模式</h4><blockquote><p>同步就是指一个进程在执行某个请求的时候,若该请求需要一段时间才能返回信息,那么这个进程就要一直等待下去,直到收到返回信息才继续执行下去</p><p>异步是指进程不要一直等下去,而是继续执行下面的操作,不管其他进程的状态.当有消息返回时系统会通知进程进行处理,这样可以提高执行的效率</p></blockquote><h3 id="px和em的区别"><a href="#px和em的区别" class="headerlink" title="px和em的区别"></a>px和em的区别</h3><blockquote><p>相同点: px和em都是长度单位;</p><p>异同点: px的值是固定的,指定多少就是多少,计算比较容易.em值是不固定的,并且em会继承父级元素的字体大小.浏览器的默认字体高都是16px.所以未经调整的浏览器都符合:1em = 16px.<br>12px = 0.75em,10px = 0.625em</p></blockquote><h3 id="浏览器的内核分别是什么"><a href="#浏览器的内核分别是什么" class="headerlink" title="浏览器的内核分别是什么?"></a>浏览器的内核分别是什么?</h3><blockquote><p>IE: trident内核<br>Firefox: gecko<br>Safari: webkit<br>Opera: Blink<br>Chrome:Blink </p></blockquote><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p><img src="/.com//wugui.jpg" alt="wugui"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>什么是HTML</title>
      <link href="/2019/07/21/what/"/>
      <url>/2019/07/21/what/</url>
      
        <content type="html"><![CDATA[<p>HTML是一种什么样的语言</p><a id="more"></a><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>HTML 指的是超文本标记语言: HyperText Markup Language<br>HTML 不是一种编程语言，而是一种标记语言<br>标记语言是一套标记标签 (markup tag)<br>HTML 使用标记标签来描述网页<br>HTML 文档包含了HTML 标签及文本内容<br>HTML文档也叫做 web 页面</p><h3 id="如何区分-HTML-和HTML5"><a href="#如何区分-HTML-和HTML5" class="headerlink" title="如何区分 HTML 和HTML5?"></a>如何区分 HTML 和HTML5?</h3><p>DOCTYPE 声明的方式是区分HTML和HTML5标志的一个重要因素,此外,还可以根据新增的结构,功能元素来加以区分.</p><h3 id="页面导入样式是-使用link和-import有什么区别"><a href="#页面导入样式是-使用link和-import有什么区别" class="headerlink" title="页面导入样式是,使用link和@import有什么区别?"></a>页面导入样式是,使用link和@import有什么区别?</h3><blockquote><p>link 属于HTML标签,除了加载CSS外,还能用于定义RSS,</p><p>定义rel连接属性等作用;而@import是CSS提供的,只能作用于加载CSS</p><p>页面被加载是,link会同时加载,而@import引用的CSS会等到页面被加载完在加载</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
