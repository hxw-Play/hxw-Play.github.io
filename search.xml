<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>websocket断线重连机制</title>
      <link href="/2022/06/22/websocket%E6%96%AD%E7%BA%BF%E9%87%8D%E8%BF%9E/"/>
      <url>/2022/06/22/websocket%E6%96%AD%E7%BA%BF%E9%87%8D%E8%BF%9E/</url>
      
        <content type="html"><![CDATA[<p> <strong>websocket的基本事件有onopen、onmessage、onerror、onclose这四个事件，onopen是连接已打开，且可以通信，onmessage是收到消息，onerror是websocket发生错误，onclose是websocket连接关闭。在这以上的四个事件中，我们做各种事件处理</strong></p><a id="more"></a><h3 id="websocket断线重连机制"><a href="#websocket断线重连机制" class="headerlink" title="websocket断线重连机制"></a>websocket断线重连机制</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> ws;<span class="comment">//websocket实例</span></span><br><span class="line"><span class="keyword">var</span> lockReconnect = <span class="literal">false</span>;<span class="comment">//避免重复连接</span></span><br><span class="line"><span class="keyword">var</span> wsUrl = <span class="string">"ws://"</span>+<span class="string">'xxxxxxx'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWebSocket</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">'WebSocket'</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">            ws = <span class="keyword">new</span> WebSocket(url);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">'MozWebSocket'</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">            ws = <span class="keyword">new</span> MozWebSocket(url);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            url = <span class="string">"http://"</span> + <span class="string">'xxxxxxx'</span>;</span><br><span class="line">            ws = <span class="keyword">new</span> SockJS(url);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        initEventHandle();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        reconnect(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initEventHandle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ws.onclose = <span class="function"><span class="keyword">function</span> (<span class="params">evnt</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//console.log('websocket服务关闭了');</span></span><br><span class="line">        reconnect(wsUrl);</span><br><span class="line">    &#125;;</span><br><span class="line">    ws.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">evnt</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//console.log('websocket服务出错了');</span></span><br><span class="line">        reconnect(wsUrl);</span><br><span class="line">    &#125;;</span><br><span class="line">    ws.onopen = <span class="function"><span class="keyword">function</span> (<span class="params">evnt</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//心跳检测重置</span></span><br><span class="line">        heartCheck.reset().start();</span><br><span class="line">    &#125;;</span><br><span class="line">    ws.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">evnt</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//如果获取到消息，心跳检测重置</span></span><br><span class="line">        <span class="comment">//拿到任何消息都说明当前连接是正常的</span></span><br><span class="line">        <span class="comment">//console.log('websocket服务获得数据了');</span></span><br><span class="line">        <span class="comment">//接受消息后的UI变化</span></span><br><span class="line">        doWithMsg(evnt.data);</span><br><span class="line">        heartCheck.reset().start();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//收到消息推送</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doWithMsg</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//......</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reconnect</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lockReconnect) <span class="keyword">return</span>;</span><br><span class="line">    lockReconnect = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//没连接上会一直重连，设置延迟避免请求过多</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        createWebSocket(url);</span><br><span class="line">        lockReconnect = <span class="literal">false</span>;</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//心跳检测</span></span><br><span class="line"><span class="keyword">var</span> heartCheck = &#123;</span><br><span class="line">    timeout: <span class="number">60000</span>,<span class="comment">//60秒</span></span><br><span class="line">    timeoutObj: <span class="literal">null</span>,</span><br><span class="line">    serverTimeoutObj: <span class="literal">null</span>,</span><br><span class="line">    reset: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        clearTimeout(<span class="keyword">this</span>.timeoutObj);</span><br><span class="line">        clearTimeout(<span class="keyword">this</span>.serverTimeoutObj);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    start: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">this</span>.timeoutObj = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//这里发送一个心跳，后端收到后，返回一个心跳消息，</span></span><br><span class="line">            <span class="comment">//onmessage拿到返回的心跳就说明连接正常</span></span><br><span class="line">            ws.send(<span class="string">"HeartBeat"</span>);</span><br><span class="line">            self.serverTimeoutObj = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//如果超过一定时间还没重置，说明后端主动断开了</span></span><br><span class="line">                ws.close();<span class="comment">//如果onclose会执行reconnect，我们执行ws.close()就行了.如果直接执行reconnect 会触发onclose导致重连两次</span></span><br><span class="line">            &#125;, self.timeout)</span><br><span class="line">        &#125;, <span class="keyword">this</span>.timeout)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//初始化websocket</span></span><br><span class="line">createWebSocket(wsUrl);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>小程序订阅消息</title>
      <link href="/2022/05/24/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%B6%88%E6%81%AF%E8%AE%A2%E9%98%85/"/>
      <url>/2022/05/24/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%B6%88%E6%81%AF%E8%AE%A2%E9%98%85/</url>
      
        <content type="html"><![CDATA[<p>​    小程序订阅消息</p><a id="more"></a><h3 id="小程序订阅消息"><a href="#小程序订阅消息" class="headerlink" title="小程序订阅消息"></a>小程序订阅消息</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">wx.requestSubscribeMessage(&#123;</span><br><span class="line">          tmplIds: [<span class="string">'eeSBVVx4XbyFDRqnq9wjGkDJwqHSXBQFu4qOfhAmLbM'</span>,</span><br><span class="line">          <span class="string">'tGLCm02zt4zgWEkkFIYJVn07dDzG0rAXNFLDhJS1tH0'</span>],</span><br><span class="line">          success(res) &#123;</span><br><span class="line">              <span class="built_in">console</span>.log(res)</span><br><span class="line">              <span class="keyword">if</span> (res.eeSBVVx4XbyFDRqnq9wjGkDJwqHSXBQFu4qOfhAmLbM == <span class="string">'accept'</span>) &#123;</span><br><span class="line">                  that.goPay();</span><br><span class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.eeSBVVx4XbyFDRqnq9wjGkDJwqHSXBQFu4qOfhAmLbM == <span class="string">'reject'</span>) &#123;</span><br><span class="line">                  <span class="comment">// 用户历史操作有设置了拒绝 or 关闭了订阅消息的主（总）开关，导致无法推送</span></span><br><span class="line">                  <span class="comment">// console.log(res, '0 拒绝 or 关闭了订阅消息的主（总）开关---');</span></span><br><span class="line">                  that.guideOpenSubscribeMessage();</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  wx.showToast(&#123;</span><br><span class="line">                      title: <span class="string">'授权订阅消息有误'</span>,</span><br><span class="line">                      icon: <span class="string">'none'</span></span><br><span class="line">                  &#125;);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          fail(res) &#123;</span><br><span class="line">              <span class="comment">// 20004:用户关闭了主开关，无法进行订阅,引导开启</span></span><br><span class="line">              <span class="built_in">console</span>.log(res)</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (res.errCode == <span class="number">20004</span>) &#123;</span><br><span class="line">                  <span class="comment">// console.log(res, 'fail:用户关闭了主开关，无法进行订阅,引导开启---');</span></span><br><span class="line">                  that.guideOpenSubscribeMessage();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  guidSubscribeMessageAuthAfter() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">333333</span>)</span><br><span class="line">      <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">      <span class="comment">//引导用户 开启订阅消息 之后，「openSetting」 接口暂时不会返回，用户手动设置后的状态，所以采用「getSetting」接口重新进行查询</span></span><br><span class="line">      wx.getSetting(&#123;</span><br><span class="line">          withSubscriptions: <span class="literal">true</span>,</span><br><span class="line">          success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">let</span> &#123;</span><br><span class="line">                  authSetting = &#123;&#125;,</span><br><span class="line">                      subscriptionsSetting: &#123;</span><br><span class="line">                          mainSwitch = <span class="literal">false</span>,</span><br><span class="line">                          itemSettings = &#123;&#125;</span><br><span class="line">                      &#125; = &#123;&#125;</span><br><span class="line">              &#125; = res;</span><br><span class="line">              <span class="keyword">if</span> (</span><br><span class="line">                  (authSetting[<span class="string">'scope.subscribeMessage'</span>] || mainSwitch) &amp;&amp;</span><br><span class="line">                  itemSettings[<span class="string">'eeSBVVx4XbyFDRqnq9wjGkDJwqHSXBQFu4qOfhAmLbM'</span>] === <span class="string">'accept'</span></span><br><span class="line"></span><br><span class="line">              ) &#123;</span><br><span class="line">                  that.sure();</span><br><span class="line">                  <span class="comment">// console.log('用户手动开启同意了，订阅消息');</span></span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  that.goPay();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  guideOpenSubscribeMessage() &#123;</span><br><span class="line">      <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">      wx.showModal(&#123;</span><br><span class="line">          title: <span class="string">'提示'</span>,</span><br><span class="line">          content: <span class="string">'您关闭了订阅,前去打开吗'</span>,</span><br><span class="line">          success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">if</span> (res.confirm) &#123;</span><br><span class="line">                  that.guidSubscribeMessageAuthAfter();</span><br><span class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.cancel) &#123;</span><br><span class="line">                  <span class="built_in">console</span>.log(<span class="number">4444444444</span>)</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">          &#125;,</span><br><span class="line">          fail: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(res)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue的那些事</title>
      <link href="/2022/05/24/vue%E7%9A%84%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/05/24/vue%E7%9A%84%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>vue的基本语法</p><a id="more"></a><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="vue-中插槽的使用"><a href="#vue-中插槽的使用" class="headerlink" title="vue 中插槽的使用"></a>vue 中插槽的使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">about 路由</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;about&quot;&gt;</span><br><span class="line">    &lt;cTitle&gt;</span><br><span class="line">      精选预告</span><br><span class="line">      &lt;template v-slot:all&gt;更多&lt;/template&gt;</span><br><span class="line">    &lt;/cTitle&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script &gt;</span><br><span class="line">import cTitle from &quot;@/components/search.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;About&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    cTitle,</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(&quot;About mounted&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; &gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">search.vue 组件</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;title&quot;&gt;</span><br><span class="line">    &lt;h3&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/h3&gt;</span><br><span class="line">    &lt;span&gt;&lt;slot name=&quot;all&quot;&gt;&lt;/slot&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.title &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  width: calc(100% - 40px);</span><br><span class="line">  height: 18px;</span><br><span class="line">  margin: 20px auto 11px;</span><br><span class="line">  h3 &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    position: relative;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">    color: #dfdfdf;</span><br><span class="line">    padding-left: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">  span&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    right: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    padding-right: 11px;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">    color:#DFDFDF;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;&gt;</span><br></pre></td></tr></table></figure><p>##两种 keep-alive的使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">  路由文件</span><br><span class="line">  const routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: &apos;/&apos;,</span><br><span class="line">        name: &apos;Home&apos;,</span><br><span class="line">        component: Home,</span><br><span class="line">        meta:&#123;</span><br><span class="line">        keepAlive:true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: &apos;/about&apos;,</span><br><span class="line">        name: &apos;About&apos;,</span><br><span class="line">        // route level code-splitting</span><br><span class="line">        // this generates a separate chunk (about.[hash].js) for this route</span><br><span class="line">        // which is lazy-loaded when the route is visited.</span><br><span class="line">        component: () =&gt; import(/* webpackChunkName: &quot;about&quot; */ &apos;../views/About.vue&apos;),</span><br><span class="line">        meta:&#123;</span><br><span class="line">        keepAlive:false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">App.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;nav&quot;&gt;</span><br><span class="line">      &lt;router-link :to=&quot;&#123;name:&apos;Home&apos;&#125;&quot; tag=&quot;div&quot; class=&quot;home&quot;&gt;1&lt;/router-link&gt;</span><br><span class="line">      &lt;router-link :to=&quot;&#123;name:&apos;About&apos;&#125;&quot; tag=&quot;div&quot; class=&quot;about&quot;&gt;2&lt;/router-link&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- &lt;keep-alive include=&apos;Home&apos;&gt;</span><br><span class="line">      &lt;router-view/&gt;</span><br><span class="line">    &lt;/keep-alive&gt; --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;keep-alive&gt;</span><br><span class="line">      &lt;router-view v-if=&quot;$route.meta.keepAlive&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br><span class="line">    &lt;router-view v-if=&quot;!$route.meta.keepAlive&quot;&gt;&lt;/router-view&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>### </p><h3 id="父子组件的生命周期调用顺序-使用-keep-alive-的情况下"><a href="#父子组件的生命周期调用顺序-使用-keep-alive-的情况下" class="headerlink" title="父子组件的生命周期调用顺序 使用 keep-alive 的情况下"></a>父子组件的生命周期调用顺序 使用 keep-alive 的情况下</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">进入时</span><br><span class="line">Home.vue            home beforeCreate</span><br><span class="line">Home.vue            home created</span><br><span class="line">Home.vue            home beforeMount</span><br><span class="line">TabTitle.vue        title beforeCreate</span><br><span class="line">TabTitle.vue        title created</span><br><span class="line">TabTitle.vue        title beforeMount</span><br><span class="line">TabTitle.vue        title mounted</span><br><span class="line">Home.vue            home mounted</span><br><span class="line">TabTitle.vue        title activated</span><br><span class="line">Home.vue            home activated</span><br><span class="line"></span><br><span class="line">离开页面</span><br><span class="line">TabTitle.vue        title deactivated</span><br><span class="line">Home.vue            home deactivated</span><br></pre></td></tr></table></figure></code></pre><h3 id="computed-和-watch-的-区别"><a href="#computed-和-watch-的-区别" class="headerlink" title="computed 和 watch 的 区别　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　"></a>computed 和 watch 的 区别　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　</h3><ul><li>computed 　具有缓存性　计算属性　不改变就走缓存计算出来之后没有额外的操作</li><li>watch　数据监听 可以执行一些异步操作<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> 进页面不会立即执行</span><br><span class="line">data()&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        name:<span class="string">'张三'</span>,</span><br><span class="line">         obj: &#123;</span><br><span class="line">            a: <span class="number">4545</span>,</span><br><span class="line">         &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">watch:&#123;</span><br><span class="line">    name(newVal,oldVal)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">进页面会立即执行</span><br><span class="line">watch:&#123;</span><br><span class="line">    name:&#123;</span><br><span class="line">        handler(newVal,oldVal)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        immediate: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">深度监听  立即执行</span><br><span class="line">watch:&#123;</span><br><span class="line">    obj:&#123;</span><br><span class="line">        handler(newVal,oldVal)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        immediate: <span class="literal">true</span>,</span><br><span class="line">        deep:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="插槽的使用"><a href="#插槽的使用" class="headerlink" title="插槽的使用"></a>插槽的使用</h3><ul><li>A页面引入了B组件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">A页面 </span><br><span class="line">  &lt;cTitle&gt;</span><br><span class="line">      精选预告               //没名插槽         </span><br><span class="line">      &lt;template v-slot:all&gt;更多&lt;/template&gt;     //具名插槽</span><br><span class="line">   &lt;/cTitle&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">    components: &#123;</span><br><span class="line">        cTitle,</span><br><span class="line">    &#125;,</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line">B页面</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;title&quot;&gt;</span><br><span class="line">    &lt;h3&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/h3&gt;</span><br><span class="line">    &lt;span&gt;&lt;slot name=&quot;all&quot;&gt;&lt;/slot&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="event-bus-的使用"><a href="#event-bus-的使用" class="headerlink" title="event bus 的使用"></a>event bus 的使用</h3><ul><li><p>创建 event-bus.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> EventBus = <span class="keyword">new</span> Vue()</span><br></pre></td></tr></table></figure></li><li><p>调用方法  发送事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- DecreaseCount.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;button @click=&quot;decrease()&quot;&gt;-&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt; import &#123; EventBus &#125; from &quot;../event-bus.js&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;DecreaseCount&quot;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                num: 1,</span><br><span class="line">                deg:180</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            decrease() &#123;</span><br><span class="line">                EventBus.$emit(&quot;decreased&quot;, &#123;</span><br><span class="line">                    num:this.num,</span><br><span class="line">                    deg:this.deg</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;; </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>接收事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot; :style=&quot;&#123;transform: &apos;rotateY(&apos; + degValue + &apos;deg)&apos;&#125;&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;front&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;show-front&quot;&gt; &#123;&#123;fontCount&#125;&#125; &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;back&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;show-back&quot;&gt; &#123;&#123;backCount&#125;&#125; &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt; </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import &#123; EventBus &#125; from &quot;./event-bus.js&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;App&quot;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                degValue:0,</span><br><span class="line">                fontCount:0,</span><br><span class="line">                backCount:0</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line">            EventBus.$on(&quot;incremented&quot;, (&#123;num,deg&#125;) =&gt; &#123;</span><br><span class="line">                this.fontCount += num</span><br><span class="line">                this.$nextTick(()=&gt;&#123;</span><br><span class="line">                    this.backCount += num</span><br><span class="line">                    this.degValue += deg;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;; </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="vuex的使用"><a href="#vuex的使用" class="headerlink" title="vuex的使用"></a>vuex的使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">"vuex"</span>;</span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        age: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        changeAge(state, params) &#123;</span><br><span class="line">        <span class="keyword">this</span>.state.age += params;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        actionsChangeAge(context,params)&#123;</span><br><span class="line">            <span class="comment">// context 上下文对象  包括所有方法和数据</span></span><br><span class="line">            <span class="built_in">console</span>.log(context)</span><br><span class="line">            <span class="built_in">console</span>.log(params)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    getters: &#123;</span><br><span class="line">        doneTodos: <span class="function">(<span class="params">state</span>) =&gt;</span> <span class="function">(<span class="params">id</span>)=&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> state.todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.id == id)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    modules: &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>适应vuex的数据</li></ul><ul><li><p>访问store上的state的数据  state的数据只有 mutations 才能改变<br>通过 this.$store.state.[‘属性名’]</p></li><li><p>调用store的mutations的方法<br>通过this.$store.commit(‘方法名’,参数)<br>通过this.$store.commit(‘vuex里的mutations方法名’,[10,20,30,40,50,60])</p></li><li><p>调用store的actions的方法<br>通过this.$store.dispatch(‘vuex里的actions方法名’,[10,20,30,40,50,60])</p></li><li><p>调用store的getters的方法  计算属性一般用于 computed里面<br>console.log(this.$store.getters.doneTodos(1))</p></li></ul><h2 id="部分深点的"><a href="#部分深点的" class="headerlink" title="部分深点的"></a>部分深点的</h2><h3 id="vue中的key"><a href="#vue中的key" class="headerlink" title="vue中的key"></a>vue中的key</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">vue中key的作用和工作原理</span><br><span class="line">key值的作用</span><br><span class="line">key值大多情况下使用在循环语句中，从本质来讲主要作用大概有以下两点：</span><br><span class="line"></span><br><span class="line">主要用在 Vue 的虚拟 DOM 算法，在新旧 nodes 对比时辨识 VNodes，相当于唯一标识ID。</span><br><span class="line">Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染， 因此使用key值可以提高渲染效率，同理，改变某一元素的key值会使该元素重新被渲染。</span><br><span class="line">key的工作原理</span><br><span class="line"><span class="comment">// 因为key值主要使用在虚拟DOM算法，即diff算法中。所以我们在src\core\vdom\patch.js文件中，从源码级别进行探讨</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先说这里的核心方法patch。这个方法在vue进行update，即将render函数(虚拟DOM生成的函数)转化为真实DOM的时候执行，里面主要首次渲染创建真实DOM树，进行虚拟DOM节点直接的对比，以及真实DOM的更新的一系列操作，并且会进行一系列判断和兼容处理，其中就有对key值的具体使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个方法主要在patch方法中调用</span></span><br><span class="line"><span class="comment">// 方法名很语义化 sameVnode === 相同虚拟DOM节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sameVnode</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="comment">// 判断a, b两个Vnode上的key值是否相等</span></span><br><span class="line">        a.key === b.key &amp;&amp; (</span><br><span class="line">            (</span><br><span class="line">                a.tag === b.tag &amp;&amp;</span><br><span class="line">                a.isComment === b.isComment &amp;&amp;</span><br><span class="line">                isDef(a.data) === isDef(b.data) &amp;&amp;</span><br><span class="line">                sameInputType(a, b)</span><br><span class="line">            ) || (</span><br><span class="line">                isTrue(a.isAsyncPlaceholder) &amp;&amp;</span><br><span class="line">                a.asyncFactory === b.asyncFactory &amp;&amp;</span><br><span class="line">                isUndef(b.asyncFactory.error)</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在简单说下patchVnode方法的作用，这个方法会在patch方法里面调用，是直接对比新旧虚拟Vnode节点，也是diff算法真正执行的地方</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下代码在patchVnode方法中</span></span><br><span class="line"><span class="comment">// 在开始进行判断，符合条件的话就跳出方法，不再进行下面的diff对比</span></span><br><span class="line"><span class="comment">// vnode.key === oldVnode.key判断双方是不是同一个组件</span></span><br><span class="line"><span class="keyword">if</span> (isTrue(vnode.isStatic) &amp;&amp;</span><br><span class="line">    isTrue(oldVnode.isStatic) &amp;&amp;</span><br><span class="line">    vnode.key === oldVnode.key &amp;&amp;</span><br><span class="line">    (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))</span><br><span class="line">    ) &#123;</span><br><span class="line">        vnode.componentInstance = oldVnode.componentInstance</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">结论</span><br><span class="line">在例子中可以看出，对Vnode进行patch的时候会调用sameVnode方法，里面会使用key值是否相等来判断Vnode是否为同一个。并且在对比过程中作为组件复用的一个判断条件。</span><br><span class="line">所以key值是在DOM树进行diff算法时候发挥作用。一个是用来判断新旧Vnode是否为同一个，从而进行下一步的比较以及渲染。另外一个作用就是判断组件是否可以复用，是否需要重新渲染。</span><br><span class="line"></span><br><span class="line">vue中 key 值的作用？</span><br><span class="line">答：当 Vue.js 用 v-<span class="keyword">for</span> 正在更新已渲染过的元素列表时，它默认用“就地复用”策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序， 而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。key的作用让每个item有一个唯一的识别身份，可以下标值index或者id, 主要是为了vue精准的追踪到每一个元素，高效的更新虚拟DOM。</span><br></pre></td></tr></table></figure><h3 id="Vue中的数据更新是异步的，意味着我们在修改完Data之后并不能立刻获取修改后的DOM元素。"><a href="#Vue中的数据更新是异步的，意味着我们在修改完Data之后并不能立刻获取修改后的DOM元素。" class="headerlink" title="Vue中的数据更新是异步的，意味着我们在修改完Data之后并不能立刻获取修改后的DOM元素。"></a>Vue中的数据更新是异步的，意味着我们在修改完Data之后并不能立刻获取修改后的DOM元素。</h3><ol><li>修改 Vue 中的 Data 时，就会触发所有和这个 Data 相关的 Watcher 进行更新。</li><li>wathcher和dep相互记忆  会给dep添加一个id</li><li>首先，会将所有的 Watcher 加入队列 Queue。</li><li>赋值是同步任务  用一个异步任务来解决掉相同的watcher渲染</li><li>过滤掉id一样的防止重复watcher</li><li>然后，调用 nextTick 方法，执行异步任务。</li><li>在异步任务的回调中，对 Queue 中的 Watcher 进行排序，然后执行对应的 DOM 更新。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>uniapp的一些东西</title>
      <link href="/2022/05/24/uniapp%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%BC%E8%88%AA%E6%A0%8F/"/>
      <url>/2022/05/24/uniapp%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%BC%E8%88%AA%E6%A0%8F/</url>
      
        <content type="html"><![CDATA[<p>自定义导航栏 菊花码 小程序升级  简单的上下滑动视频</p><a id="more"></a><h3 id="自定义导航栏"><a href="#自定义导航栏" class="headerlink" title="自定义导航栏"></a>自定义导航栏</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view class=&quot;navBar&quot;&gt;</span><br><span class="line">&lt;view class=&quot;navBar-fixed&quot;&gt;</span><br><span class="line">&lt;!-- 状态栏 --&gt;</span><br><span class="line">&lt;view :style=&quot;&#123;height: statusBarHeight+&apos;px&apos;&#125;&quot;&gt;&lt;/view&gt;</span><br><span class="line">&lt;!-- 导航栏 --&gt;</span><br><span class="line">&lt;view class=&quot;navBar-content&quot; :style=&quot;&#123;width:navBarWidth+&apos;px&apos;,height:navBarHeight+&apos;px&apos;&#125;&quot;&gt;</span><br><span class="line">&lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;view :style=&quot;&#123;height:(navBarHeight+statusBarHeight)+&apos;px&apos;&#125;&quot;&gt;&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&quot;navBar&quot;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">statusBarHeight:20,//状态栏的高度</span><br><span class="line">navBarHeight:44,//导航栏的高度</span><br><span class="line">navBarWidth:375,//导航栏的宽度</span><br><span class="line">&#125;;</span><br><span class="line">&#125;,</span><br><span class="line">onLoad() &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">created() &#123;</span><br><span class="line">//获取手机系统信息</span><br><span class="line">const systemInfo=uni.getSystemInfoSync();</span><br><span class="line">console.log(&quot;[systemInfo]&quot;,systemInfo)</span><br><span class="line">//获取状态栏信息-h5没有状态栏</span><br><span class="line">this.statusBarHeight=systemInfo.statusBarHeight;</span><br><span class="line">//屏幕的宽度</span><br><span class="line">this.navBarWidth=systemInfo.windowWidth;</span><br><span class="line">//获取胶囊信息:uni.getMenuButtonBoundingClientRect--&gt;App | H5 | 支付宝小程序不支持</span><br><span class="line">// #ifndef H5 || APP-PLUS || MP-ALIPAY</span><br><span class="line">const menuButtonBoundingInfo=uni.getMenuButtonBoundingClientRect();</span><br><span class="line">console.log(&quot;[胶囊信息]&quot;,menuButtonBoundingInfo)</span><br><span class="line">// (胶囊底部高度-状态栏的高度)+(胶囊顶部高度-状态栏的高度)*2=导航栏的高度</span><br><span class="line">this.navBarHeight=(menuButtonBoundingInfo.top-systemInfo.statusBarHeight)*2+(menuButtonBoundingInfo.bottom-systemInfo.statusBarHeight);</span><br><span class="line">// #endif</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">.navBar&#123;</span><br><span class="line">.navBar-fixed&#123;</span><br><span class="line">width: 100%;</span><br><span class="line">position:fixed;</span><br><span class="line">top: 0;</span><br><span class="line">left: 0;</span><br><span class="line">z-index: 99;</span><br><span class="line">box-sizing: border-box;</span><br><span class="line">background-color: #0A0E1D;</span><br><span class="line">.navBar-content&#123;</span><br><span class="line">color: #FEFEFE;</span><br><span class="line">display: flex;</span><br><span class="line">flex-direction: row;</span><br><span class="line">align-items: center;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="返回上一级并携带参数"><a href="#返回上一级并携带参数" class="headerlink" title="返回上一级并携带参数"></a>返回上一级并携带参数</h3><ul><li><p>当前页</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">demo() &#123;</span><br><span class="line"><span class="keyword">let</span> pages = getCurrentPages();  <span class="comment">//获取所有页面栈实例列表</span></span><br><span class="line"><span class="keyword">let</span> nowPage = pages[ pages.length - <span class="number">1</span>];  <span class="comment">//当前页</span></span><br><span class="line"><span class="keyword">let</span> prevPage = pages[ pages.length - <span class="number">2</span> ];  <span class="comment">//上一页</span></span><br><span class="line">prevPage.$vm.isLogin = <span class="literal">true</span>;   <span class="comment">//修改上一页data里面的isLogin</span></span><br><span class="line">uni.navigateBack(&#123;</span><br><span class="line">delta:<span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>上一页</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">isLogin: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="上下滑动视频uniapp小程序-uview-ui1-x"><a href="#上下滑动视频uniapp小程序-uview-ui1-x" class="headerlink" title="上下滑动视频uniapp小程序(uview-ui1.x)"></a>上下滑动视频uniapp小程序(uview-ui1.x)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;page-home&quot;&gt;</span><br><span class="line">&lt;view class=&quot;navBar-fixed&quot;&gt;</span><br><span class="line">&lt;!-- 状态栏 --&gt;</span><br><span class="line">&lt;view :style=&quot;&#123;height: statusBarHeight+&apos;px&apos;&#125;&quot;&gt;&lt;/view&gt;</span><br><span class="line">&lt;!-- 导航栏 --&gt;</span><br><span class="line">&lt;view class=&quot;navBar-content&quot; :style=&quot;&#123;width:navBarWidth+&apos;px&apos;,height:navBarHeight+&apos;px&apos;&#125;&quot;&gt;</span><br><span class="line">&lt;view class=&quot;&quot; style=&quot;margin-left: 10px;&quot; @click=&quot;goBack&quot;&gt;</span><br><span class="line">&lt;u-icon name=&quot;arrow-left&quot; color=&quot;#ffffff&quot; size=&quot;40&quot;&gt;&lt;/u-icon&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;view class=&quot;container&quot;&gt;</span><br><span class="line">&lt;swiper class=&quot;videos&quot; vertical @change=&quot;autoPlayVideo&quot;&gt;</span><br><span class="line">&lt;swiper-item v-for=&quot;(item, index) in list&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">&lt;view class=&quot;item&quot;&gt;</span><br><span class="line">&lt;!-- 作者 --&gt;</span><br><span class="line">&lt;view class=&quot;info&quot;&gt;</span><br><span class="line">&lt;view class=&quot;video_by_shop&quot; v-if=&quot;item.relevance &amp;&amp; item.relevance.length&gt;0&quot;</span><br><span class="line">@click=&quot;goShopDetail(item)&quot;&gt;</span><br><span class="line">&lt;image :src=&quot;item.relevance[0].spu.image&quot; mode=&quot;&quot;&gt;&lt;/image&gt;</span><br><span class="line">&lt;text&gt;&#123;&#123; item.relevance[0].spu.store_name &#125;&#125;&lt;/text&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;text class=&quot;name&quot; @click=&quot;pl&quot;&gt;@&#123;&#123; item.author.nickname &#125;&#125;&lt;/text&gt;</span><br><span class="line">&lt;view class=&quot;title&quot;&gt;&#123;&#123; item.title &#125;&#125;&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 统计 --&gt;</span><br><span class="line">&lt;view class=&quot;count&quot;&gt;</span><br><span class="line">&lt;view class=&quot;block&quot; @click=&quot;toPlantUser(item.author.uid)&quot;&gt;</span><br><span class="line">&lt;u-avatar :src=&quot;item.author.avatar&quot; size=&quot;mini&quot;&gt;&lt;/u-avatar&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 点赞 --&gt;</span><br><span class="line">&lt;view class=&quot;block&quot;&gt;</span><br><span class="line">&lt;u-icon name=&quot;heart-fill&quot; :class=&quot;!item.relevance_id ?</span><br><span class="line"> &apos;&apos; : &apos;heart_red&apos;&quot; size=&quot;42&quot; @click=&quot;likeToggle(item.community_id,item.relevance_id,index)&quot;&gt;</span><br><span class="line">&lt;/u-icon&gt;</span><br><span class="line"></span><br><span class="line">&lt;text&gt;&#123;&#123; item.count_start &#125;&#125;&lt;/text&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">&lt;view class=&quot;block&quot; @tap=&quot;openComment&quot;&gt;</span><br><span class="line">&lt;u-icon name=&quot;chat-fill&quot; size=&quot;42&quot;&gt;&lt;/u-icon&gt;</span><br><span class="line">&lt;text&gt;&#123;&#123; item.count_reply &#125;&#125;&lt;/text&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">&lt;view class=&quot;block&quot; @tap=&quot;openShare&quot; style=&quot;position: relative;&quot;&gt;</span><br><span class="line">&lt;u-icon name=&quot;share-fill&quot; size=&quot;42&quot;&gt;&lt;/u-icon&gt;</span><br><span class="line">&lt;text&gt;&#123;&#123; item.share &#125;&#125;&lt;/text&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- #ifdef MP --&gt;</span><br><span class="line">&lt;button style=&quot;width: 100%;height: 100%;position: absolute;opacity: 0;&quot; class=&quot;time&quot;</span><br><span class="line">open-type=&quot;share&quot; hover-class=&apos;none&apos;&gt;&lt;/button&gt;</span><br><span class="line">&lt;!-- #endif --&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 视频 --&gt;</span><br><span class="line">&lt;view class=&quot;video&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;video @click=&quot;$event=&gt;doVideoPlayOrPause($event,item)&quot;</span><br><span class="line">@fullscreenchange=&quot;setVoice($event, index)&quot; ref=&apos;videos&apos; :id=&quot;item.community_id&quot;</span><br><span class="line">data-index=&quot;index&quot; :muted=&quot;currentIndex!==index&quot; autoplay=&quot;autoplay&quot;</span><br><span class="line">:src=&quot;item.video&quot;&gt;&lt;/video&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/swiper-item&gt;</span><br><span class="line">&lt;/swiper&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;view class=&apos;mask&apos; @touchmove.stop.prevent=&quot;false&quot; :hidden=&apos;active==false&apos;&gt;&lt;/view&gt;</span><br><span class="line">&lt;block v-if=&quot;active&quot;&gt;</span><br><span class="line">&lt;view class=&apos;signTip acea-row row-center-wrapper&apos; :class=&apos;active==true?&quot;on&quot;:&quot;&quot;&apos;&gt;</span><br><span class="line">&lt;view class=&apos;signTipLight loadingpic&apos;&gt;&lt;/view&gt;</span><br><span class="line">&lt;view class=&apos;signTipCon&apos;</span><br><span class="line">:style=&quot;&apos;background-image: url(&apos;+domain+&apos;/static/diy/signSuccess&apos;+keyColor+&apos;.png)&apos;&quot;&gt;</span><br><span class="line">&lt;view class=&apos;state&apos;&gt;&#123;&#123; lottory.success || &apos;&apos;&#125;&#125;&lt;/view&gt;</span><br><span class="line">&lt;view class=&apos;integral&apos;&gt;&#123;&#123; lottory.prompt || &apos;&apos; &#125;&#125;&lt;/view&gt;</span><br><span class="line">&lt;view class=&apos;signTipBnt&apos; @click=&apos;active = !active&apos;&gt;好的&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/block&gt;</span><br><span class="line">&lt;!-- 评论 --&gt;</span><br><span class="line">&lt;comment-popup ref=&quot;comment-popup&quot;&gt;&lt;/comment-popup&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 分享 --&gt;</span><br><span class="line">&lt;!-- &lt;share-popup ref=&quot;share-popup&quot;&gt;&lt;/share-popup&gt; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 他提到的宝贝弹窗 --&gt;</span><br><span class="line">&lt;mentioned ref=&quot;mentioned&quot; v-if=&quot;list.length&gt;0 &amp;&amp; list[currentIndex].relevance</span><br><span class="line">&amp;&amp;</span><br><span class="line"> list[currentIndex].relevance.length&gt;0&quot; @close=&quot;close&quot; :list=&quot;list[currentIndex].relevance&quot;</span><br><span class="line">:uid=&quot;list[currentIndex].author.uid&quot;&gt;&lt;/mentioned&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import CommentPopup from &quot;./components/comment&quot;;</span><br><span class="line">// import SharePopup from &quot;./components/share&quot;;</span><br><span class="line">import mentioned from &apos;@/components/mentioned.vue&apos;;</span><br><span class="line">import &#123;</span><br><span class="line">startLottery</span><br><span class="line">&#125; from &apos;@/api/community.js&apos;;</span><br><span class="line">import &#123;</span><br><span class="line">TOKENNAME,</span><br><span class="line">HTTP_REQUEST_URL</span><br><span class="line">&#125; from &apos;@/config/app.js&apos;;</span><br><span class="line">import &#123;</span><br><span class="line">getVideoList,</span><br><span class="line">starCommentApi,</span><br><span class="line">graphicStartApi,</span><br><span class="line">replyLstApi,</span><br><span class="line">plantDetailApi</span><br><span class="line">&#125; from &quot;@/api/community&quot;;</span><br><span class="line"></span><br><span class="line">import &#123;</span><br><span class="line">mapGetters</span><br><span class="line">&#125; from &quot;vuex&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">components: &#123;</span><br><span class="line">CommentPopup,</span><br><span class="line"></span><br><span class="line">mentioned,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">boxStyle: &#123;</span><br><span class="line">&apos;height&apos;: 0,</span><br><span class="line">&apos;width&apos;: &apos;750rpx&apos;,</span><br><span class="line">&#125;,</span><br><span class="line">k: 0,</span><br><span class="line">currentIndex: 0,</span><br><span class="line">list: [],</span><br><span class="line">url: &apos;&apos;,</span><br><span class="line">active: false,</span><br><span class="line">commList: [], //评论列表</span><br><span class="line">where: &#123;</span><br><span class="line">page: 1,</span><br><span class="line">limit: 10</span><br><span class="line">&#125;,</span><br><span class="line">id: 0,</span><br><span class="line">replyData: [],</span><br><span class="line">community_id: &apos;&apos;,</span><br><span class="line">lottory: &#123;&#125;,</span><br><span class="line">domain: HTTP_REQUEST_URL,</span><br><span class="line">key: &apos;&apos;,</span><br><span class="line">currentVideo: &quot;&quot;,</span><br><span class="line">playIngIds: [], //正在播放的视频id列队，列队用于处理滑动过快导致的跳频问题</span><br><span class="line">videoIndex: 0,</span><br><span class="line">currentStatus: &apos;play&apos;,</span><br><span class="line">clickTimer: &apos;&apos;,</span><br><span class="line">clickTime: 0,</span><br><span class="line">statusBarHeight: 20, //状态栏的高度</span><br><span class="line">navBarHeight: 44, //导航栏的高度</span><br><span class="line">navBarWidth: 375, //导航栏的宽度</span><br><span class="line">&#125;;</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">...mapGetters([&apos;isLogin&apos;, &apos;uid&apos;, &apos;viewColor&apos;, &apos;keyColor&apos;]),</span><br><span class="line">&#125;,</span><br><span class="line">onLoad(option) &#123;</span><br><span class="line">this.getPlayVideoList(1, option.id)</span><br><span class="line">this.community_id = option.community_id || &apos;&apos;</span><br><span class="line">this.id = option.community_id || &apos;&apos;</span><br><span class="line">this.getKey();</span><br><span class="line">&#125;,</span><br><span class="line">onReady() &#123;</span><br><span class="line">this.$refs[&quot;comment-popup&quot;].id = this.id;</span><br><span class="line">&#125;,</span><br><span class="line">mounted() &#123;</span><br><span class="line">// 创建视频对象</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">created() &#123;</span><br><span class="line">//获取手机系统信息</span><br><span class="line">const systemInfo = uni.getSystemInfoSync();</span><br><span class="line">console.log(&quot;[systemInfo]&quot;, systemInfo)</span><br><span class="line">//获取状态栏信息-h5没有状态栏</span><br><span class="line">this.statusBarHeight = systemInfo.statusBarHeight;</span><br><span class="line">//屏幕的宽度</span><br><span class="line">this.navBarWidth = systemInfo.windowWidth;</span><br><span class="line">//获取胶囊信息:uni.getMenuButtonBoundingClientRect--&gt;App | H5 | 支付宝小程序不支持</span><br><span class="line">// #ifndef H5 || APP-PLUS || MP-ALIPAY</span><br><span class="line">const menuButtonBoundingInfo = uni.getMenuButtonBoundingClientRect();</span><br><span class="line">console.log(&quot;[胶囊信息]&quot;, menuButtonBoundingInfo)</span><br><span class="line">// (胶囊底部高度-状态栏的高度)+(胶囊顶部高度-状态栏的高度)*2=导航栏的高度</span><br><span class="line">this.navBarHeight = (menuButtonBoundingInfo.top - systemInfo.statusBarHeight) * 2 + (menuButtonBoundingInfo</span><br><span class="line">.bottom - systemInfo.statusBarHeight);</span><br><span class="line">// #endif</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">onShareAppMessage: function() &#123;</span><br><span class="line">let that = this;</span><br><span class="line">startLottery(that.key).then(res =&gt; &#123;</span><br><span class="line">if (res.data.type == 2) &#123;</span><br><span class="line">that.active = true;</span><br><span class="line">that.lottory = res.data;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">return &#123;</span><br><span class="line">title: &apos;&apos;,</span><br><span class="line">imageUrl: that.list.image[0] || &apos;&apos;,</span><br><span class="line">path: &apos;/pages/plantGrass/plant_video_list/plant_video_list?community_id=&apos; + that.community_id,</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">onShareTimeline: function() &#123;</span><br><span class="line">let that = this;</span><br><span class="line">startLottery(that.key).then(res =&gt; &#123;</span><br><span class="line">if (res.data.type == 2) &#123;</span><br><span class="line">that.active = true;</span><br><span class="line">that.lottory = res.data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">return &#123;</span><br><span class="line">title: &apos;&apos;,</span><br><span class="line">query: &#123;</span><br><span class="line">community_id: that.community_id,</span><br><span class="line">&#125;,</span><br><span class="line">imageUrl: that.list.image[0] || &apos;&apos;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">goBack()&#123;</span><br><span class="line">uni.navigateBack(&#123;</span><br><span class="line">delta:1</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">doVideoPlayOrPause(e, item) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if (!this.currentVideo) return;</span><br><span class="line">clearTimeout(this.clickTimer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let currentTime = new Date().getTime();</span><br><span class="line">let timeRange = currentTime - this.clickTime;</span><br><span class="line"></span><br><span class="line">if (timeRange &lt; 300) &#123;</span><br><span class="line">// 双击事件</span><br><span class="line">&#125; else &#123;</span><br><span class="line">this.clickTimer = setTimeout(() =&gt; &#123;</span><br><span class="line">e.preventDefault();</span><br><span class="line">e.stopPropagation();</span><br><span class="line">if (this.currentStatus == &apos;play&apos;) &#123;</span><br><span class="line">this.currentVideo.pause();</span><br><span class="line">this.currentStatus = &apos;pause&apos;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">this.currentVideo.play();</span><br><span class="line">this.currentStatus = &apos;play&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, 300);</span><br><span class="line">&#125;</span><br><span class="line">this.clickTime = new Date().getTime();</span><br><span class="line">&#125;,</span><br><span class="line">toPlantUser(id) &#123;</span><br><span class="line">console.log(id);</span><br><span class="line">uni.navigateTo(&#123;</span><br><span class="line">url: &quot;/pages/plantGrass/plant_user/index?id=&quot; + id</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">getKey() &#123;</span><br><span class="line">plantDetailApi(this.community_id).then(res =&gt; &#123;</span><br><span class="line">this.key = res.data.key</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">goShopDetail(item) &#123;</span><br><span class="line">// console.log(item)</span><br><span class="line">this.$refs.mentioned.showPopup()</span><br><span class="line">&#125;,</span><br><span class="line">close() &#123;</span><br><span class="line">this.$refs.mentioned.closePopup()</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">openComment() &#123;</span><br><span class="line">this.$refs[&quot;comment-popup&quot;].open();</span><br><span class="line">&#125;,</span><br><span class="line">openShare() &#123;</span><br><span class="line">console.log(432432)</span><br><span class="line">&#125;,</span><br><span class="line">getPlayVideoList(page, id) &#123;</span><br><span class="line">// const data = &#123;</span><br><span class="line">// page,</span><br><span class="line">// video_id: id</span><br><span class="line">// &#125;</span><br><span class="line">getVideoList().then(res =&gt; &#123;</span><br><span class="line"></span><br><span class="line">let list = res.data.list;</span><br><span class="line">let will_first = list.filter(item =&gt; item.community_id == this.community_id) || []</span><br><span class="line">let index = list.findIndex(item =&gt; item.community_id == this.community_id);</span><br><span class="line">if (index != 0) &#123;</span><br><span class="line">list.splice(index, 1)</span><br><span class="line">list.unshift(...will_first);</span><br><span class="line">&#125;</span><br><span class="line">for (let i = 0; i &lt; list.length; i++) &#123;</span><br><span class="line">list[i].community_id = list[i].community_id += &apos;&apos;</span><br><span class="line">&#125;</span><br><span class="line">this.list = list;</span><br><span class="line">this.currentVideo = uni.createVideoContext(this.list[0].community_id, this);</span><br><span class="line">this.$nextTick(() =&gt; &#123;</span><br><span class="line">this.$set(this.list[0], &apos;state&apos;, &apos;play&apos;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">likeToggle(id, relevance_id, index) &#123;</span><br><span class="line">let status = relevance_id ? 0 : 1</span><br><span class="line">graphicStartApi(id, &#123;</span><br><span class="line">status: status</span><br><span class="line">&#125;).then(res =&gt; &#123;</span><br><span class="line">if (relevance_id) &#123;</span><br><span class="line">this.list[index].count_start--;</span><br><span class="line">this.list[index].count_start = this.list[index].count_start == 0 ? 0 : this.list[index]</span><br><span class="line">.count_start;</span><br><span class="line">this.list[index].relevance_id = false;</span><br><span class="line">this.$forceUpdate();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">this.list[index].count_start++;</span><br><span class="line">this.list[index].relevance_id = true</span><br><span class="line">this.$forceUpdate();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">starComment(item) &#123;</span><br><span class="line">let that = this;</span><br><span class="line">let status = item.relevance_id ? 0 : 1</span><br><span class="line">starCommentApi(item.reply_id, &#123;</span><br><span class="line">status: status</span><br><span class="line">&#125;).then(res =&gt; &#123;</span><br><span class="line">if (res.status === 200) &#123;</span><br><span class="line">if (item.relevance_id) &#123;</span><br><span class="line">item.count_start--;</span><br><span class="line">that.replyData.start--</span><br><span class="line">item.count_start = item.count_start == 0 ? 0 : item.count_start</span><br><span class="line">that.replyData.start = that.replyData.start == 0 ? 0 : that.replyData.start</span><br><span class="line">item.relevance_id = false</span><br><span class="line">&#125; else &#123;</span><br><span class="line">item.count_start++;</span><br><span class="line">item.relevance_id = true</span><br><span class="line">that.replyData.start++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">that.$util.Tips(&#123;</span><br><span class="line">title: res.message</span><br><span class="line">&#125;);</span><br><span class="line">&#125;).catch(err =&gt; &#123;</span><br><span class="line">uni.showToast(&#123;</span><br><span class="line">title: err,</span><br><span class="line">icon: &apos;none&apos;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">autoPlayVideo(e) &#123;</span><br><span class="line">console.log(e)</span><br><span class="line">let idx = e.target.current;</span><br><span class="line">let id = this.list[idx].community_id;</span><br><span class="line">this.$refs[&quot;comment-popup&quot;].id = id;</span><br><span class="line">if (id) &#123;</span><br><span class="line">this.getKey();</span><br><span class="line">&#125;</span><br><span class="line">console.log(this.video)</span><br><span class="line">this.currentIndex = idx;</span><br><span class="line">// if (this.currentIndex != 0) &#123;</span><br><span class="line">// this.$emit(&apos;update:videoIndex&apos;, this.currentIndex);</span><br><span class="line">// this.videoPlayChange();</span><br><span class="line">// &#125;</span><br><span class="line">// if(this.currentIndex == 0)&#123;</span><br><span class="line">// this.videoPlayChange();</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">this.videoPlayChange();</span><br><span class="line">this.currentStatus = &apos;play&apos;;</span><br><span class="line">// if(currentIndex!=0)&#123;</span><br><span class="line"></span><br><span class="line">// &#125;</span><br><span class="line">// this.video.play()</span><br><span class="line">// this.$refs[&apos;videos&apos;][idx].play()</span><br><span class="line">// if (this.$refs[&apos;videos&apos;][idx - 1]) &#123;</span><br><span class="line">// this.$refs[&apos;videos&apos;][idx - 1].pause()</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">// if (this.$refs[&apos;videos&apos;][idx + 1]) &#123;</span><br><span class="line">// this.$refs[&apos;videos&apos;][idx + 1].pause()</span><br><span class="line">// &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">setVoice(e, idx) &#123;</span><br><span class="line">this.list[idx].muted = !this.list[idx].muted;</span><br><span class="line">&#125;,</span><br><span class="line">videoPlayChange() &#123;</span><br><span class="line">this.stopOtherVideo();</span><br><span class="line">let video = uni.createVideoContext(this.list[this.currentIndex].community_id, this);</span><br><span class="line">this.currentVideo = video;</span><br><span class="line">this.currentVideo.play();</span><br><span class="line">this.currentStatus = &apos;play&apos;;</span><br><span class="line">&#125;,</span><br><span class="line">stopOtherVideo() &#123;</span><br><span class="line">this.list.map(v =&gt; &#123;</span><br><span class="line">let video = uni.createVideoContext(v.community_id, this);</span><br><span class="line">video.seek(1);</span><br><span class="line">video.pause();</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">html &#123;</span><br><span class="line">width: 100% !important;</span><br><span class="line">height: 100% !important;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">width: 100% !important;</span><br><span class="line">height: 100% !important;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body.pages-plantGrass-plant_detail-index uni-page-body &#123;</span><br><span class="line">height: 100%;</span><br><span class="line">width: 100% !important;</span><br><span class="line">background: #ffffff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.navBar-fixed &#123;</span><br><span class="line">width: 100%;</span><br><span class="line">position: fixed;</span><br><span class="line">top: 0;</span><br><span class="line">left: 0;</span><br><span class="line">z-index: 99;</span><br><span class="line">box-sizing: border-box;</span><br><span class="line">background-color: transparent;</span><br><span class="line"></span><br><span class="line">.navBar-content &#123;</span><br><span class="line">color: #FEFEFE;</span><br><span class="line">display: flex;</span><br><span class="line">flex-direction: row;</span><br><span class="line">align-items: center;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">page &#123;</span><br><span class="line">height: 100%;</span><br><span class="line">overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.heart_red &#123;</span><br><span class="line">color: red;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.page-home &#123;</span><br><span class="line">color: #fff;</span><br><span class="line">height: 100%;</span><br><span class="line"></span><br><span class="line">.tabs &#123;</span><br><span class="line">display: flex;</span><br><span class="line">align-items: center;</span><br><span class="line">position: fixed;</span><br><span class="line">top: 20rpx;</span><br><span class="line">left: 20rpx;</span><br><span class="line">z-index: 99;</span><br><span class="line"></span><br><span class="line">.item &#123;</span><br><span class="line">margin: 0 20rpx;</span><br><span class="line">font-size: 24rpx;</span><br><span class="line"></span><br><span class="line">&amp;.is-active &#123;</span><br><span class="line">font-size: 36rpx;</span><br><span class="line">color: #fff;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.container &#123;</span><br><span class="line">height: 100%;</span><br><span class="line"></span><br><span class="line">.videos &#123;</span><br><span class="line">.item &#123;</span><br><span class="line">position: relative;</span><br><span class="line"></span><br><span class="line">.count &#123;</span><br><span class="line">display: flex;</span><br><span class="line">flex-direction: column;</span><br><span class="line">position: absolute;</span><br><span class="line">right: 30rpx;</span><br><span class="line">top: calc(50% - 195rpx);</span><br><span class="line">z-index: 99;</span><br><span class="line"></span><br><span class="line">.block &#123;</span><br><span class="line">display: flex;</span><br><span class="line">flex-direction: column;</span><br><span class="line">justify-content: center;</span><br><span class="line">align-items: center;</span><br><span class="line">height: 130rpx;</span><br><span class="line"></span><br><span class="line">text &#123;</span><br><span class="line">font-size: 24rpx;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.info &#123;</span><br><span class="line">position: absolute;</span><br><span class="line">bottom: 60rpx;</span><br><span class="line">left: 0;</span><br><span class="line">width: 100%;</span><br><span class="line">z-index: 99;</span><br><span class="line">padding: 30rpx;</span><br><span class="line"></span><br><span class="line">.video_by_shop &#123;</span><br><span class="line">width: 200rpx;</span><br><span class="line">display: flex;</span><br><span class="line">margin-bottom: 40rpx;</span><br><span class="line">background-color: #ffffff;</span><br><span class="line">color: #000000;</span><br><span class="line">align-items: center;</span><br><span class="line">border-radius: 8rpx;</span><br><span class="line">padding: 8rpx;</span><br><span class="line"></span><br><span class="line">image &#123;</span><br><span class="line">width: 50rpx;</span><br><span class="line">height: 50rpx;</span><br><span class="line">margin-right: 8rpx;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.avatar &#123;</span><br><span class="line">margin-bottom: 40rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.name &#123;</span><br><span class="line">display: block;</span><br><span class="line">margin-bottom: 20rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.title &#123;</span><br><span class="line">font-size: 28rpx;</span><br><span class="line">margin-bottom: 20rpx;</span><br><span class="line">color: #ccc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.mp3 &#123;</span><br><span class="line">font-size: 28rpx;</span><br><span class="line">color: #ccc;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.videos,</span><br><span class="line">swiper-item,</span><br><span class="line">.item,</span><br><span class="line">.video,</span><br><span class="line">video &#123;</span><br><span class="line">height: 100%;</span><br><span class="line">width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.iconfont &#123;</span><br><span class="line">font-size: 18px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.icon-shoucang1 &#123;</span><br><span class="line">color: #ffffff;</span><br><span class="line">font-size: 18px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.icon-dianzan &#123;</span><br><span class="line">color: red;</span><br><span class="line">font-size: 18px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.signTip &#123;</span><br><span class="line">width: 644rpx;</span><br><span class="line">height: 645rpx;</span><br><span class="line">position: fixed;</span><br><span class="line">top: 50%;</span><br><span class="line">left: 50%;</span><br><span class="line">margin-left: -322rpx;</span><br><span class="line">margin-top: -322.5rpx;</span><br><span class="line">z-index: 99;</span><br><span class="line">text-align: center;</span><br><span class="line">// transition: all 0.3s ease-in-out 0s;</span><br><span class="line">// opacity: 0;</span><br><span class="line">// transform: scale(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.signTip .signTipLight &#123;</span><br><span class="line">background-image: url(&apos;背景图片&apos;);</span><br><span class="line">background-repeat: no-repeat;</span><br><span class="line">background-size: 100% 100%;</span><br><span class="line">width: 100%;</span><br><span class="line">height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.signTip.on &#123;</span><br><span class="line">opacity: 1;</span><br><span class="line">transform: scale(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.signTip .signTipCon &#123;</span><br><span class="line">background-image: url(图片);</span><br><span class="line">background-repeat: no-repeat;</span><br><span class="line">background-size: 100% 100%;</span><br><span class="line">width: 420rpx;</span><br><span class="line">height: 420rpx;</span><br><span class="line">margin-top: -700rpx;</span><br><span class="line">position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.signTip .signTipCon .state &#123;</span><br><span class="line">font-size: 34rpx;</span><br><span class="line">color: #fff;</span><br><span class="line">margin-top: 150rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.signTip .signTipCon .integral &#123;</span><br><span class="line">font-size: 30rpx;</span><br><span class="line">color: rgba(255, 255, 255, 0.6);</span><br><span class="line">margin-top: 9rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.signTip .signTipCon .signTipBnt &#123;</span><br><span class="line">font-size: 30rpx;</span><br><span class="line">color: #eb4331;</span><br><span class="line">width: 260rpx;</span><br><span class="line">height: 76rpx;</span><br><span class="line">background-image: linear-gradient(-90deg, var(#FDA923) 0%, var(#FD6523) 100%);</span><br><span class="line">;</span><br><span class="line">// background-image: linear-gradient(-90deg, #FDA923 0%, #FD6523; 100%);</span><br><span class="line">border-radius: 38rpx;</span><br><span class="line">line-height: 76rpx;</span><br><span class="line">margin: 48rpx auto 0 auto;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="小程序太阳码-以及升级版本"><a href="#小程序太阳码-以及升级版本" class="headerlink" title="小程序太阳码 以及升级版本"></a>小程序太阳码 以及升级版本</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">     onLaunch: <span class="function"><span class="keyword">function</span>(<span class="params">option</span>) </span>&#123;</span><br><span class="line">     <span class="comment">// #ifdef MP</span></span><br><span class="line">        </span><br><span class="line">         <span class="keyword">if</span> (option.query.hasOwnProperty(<span class="string">'scene'</span>)) &#123;</span><br><span class="line">                     <span class="keyword">switch</span> (option.scene) &#123;</span><br><span class="line">                         <span class="comment">//扫描小程序码</span></span><br><span class="line">                         <span class="keyword">case</span> <span class="number">1047</span>:</span><br><span class="line">                             <span class="built_in">console</span>.log(option, <span class="string">'val'</span>)</span><br><span class="line">                             <span class="keyword">let</span> val = that.$util.getUrlParams(<span class="built_in">decodeURIComponent</span>(option.query.scene));</span><br><span class="line">                             that.globalData.code = val;</span><br><span class="line">                             that.globalData.uid = val</span><br><span class="line">                             <span class="keyword">break</span>;</span><br><span class="line">                             <span class="comment">//长按图片识别小程序码</span></span><br><span class="line">                         <span class="keyword">case</span> <span class="number">1048</span>:</span><br><span class="line">                             that.globalData.code = option.query.scene;</span><br><span class="line">                             <span class="keyword">break</span>;</span><br><span class="line">                             <span class="comment">//手机相册选取小程序码</span></span><br><span class="line">                         <span class="keyword">case</span> <span class="number">1049</span>:</span><br><span class="line">                             that.globalData.code = option.query.scene;</span><br><span class="line">                             <span class="keyword">break</span>;</span><br><span class="line">                             <span class="comment">//直接进入小程序</span></span><br><span class="line">                         <span class="keyword">case</span> <span class="number">1001</span>:</span><br><span class="line">                             that.globalData.spid = option.query.scene;</span><br><span class="line">                             <span class="keyword">break</span>;</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">const</span> updateManager = wx.getUpdateManager();</span><br><span class="line">                 updateManager.onCheckForUpdate(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">                     <span class="comment">// 请求完新版本信息的回调</span></span><br><span class="line">                 &#125;);</span><br><span class="line">                 updateManager.onUpdateReady(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                     wx.showModal(&#123;</span><br><span class="line">                         title: <span class="string">"更新提示"</span>,</span><br><span class="line">                         content: <span class="string">"新版本已经准备好，是否重启应用？"</span>,</span><br><span class="line">                         success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">                             <span class="keyword">if</span> (res.confirm) &#123;</span><br><span class="line">                                 <span class="comment">// 新的版本已经下载好，调用 applyUpdate 应用新版本并重启</span></span><br><span class="line">                                 updateManager.applyUpdate();</span><br><span class="line">                             &#125;</span><br><span class="line">                         &#125;,</span><br><span class="line">                     &#125;);</span><br><span class="line">                 &#125;);</span><br><span class="line">                 updateManager.onUpdateFailed(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                     <span class="keyword">return</span> that.Tips(&#123;</span><br><span class="line">                         title: <span class="string">"新版本下载失败"</span>,</span><br><span class="line">                     &#125;);</span><br><span class="line">                 &#125;);</span><br><span class="line">     &#125;</span><br><span class="line"><span class="comment">// #endif</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>简单的大文件切片上传</title>
      <link href="/2022/03/18/%E7%AE%80%E5%8D%95%E7%9A%84%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2022/03/18/%E7%AE%80%E5%8D%95%E7%9A%84%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<p>html+express 实现切片上传</p><a id="more"></a><h2 id="简单的大文件上传"><a href="#简单的大文件上传" class="headerlink" title="简单的大文件上传"></a>简单的大文件上传</h2><h3 id="前端html"><a href="#前端html" class="headerlink" title="前端html"></a>前端html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">progress</span> <span class="attr">id</span>=<span class="string">"progress"</span> <span class="attr">value</span>=<span class="string">'0'</span>&gt;</span><span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h1</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"uploader"</span> <span class="attr">id</span>=<span class="string">"uploader"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"output"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcdn.net/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcdn.net/ajax/libs/axios/0.21.1/axios.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">const</span> uploader = <span class="built_in">document</span>.getElementById(<span class="string">"uploader"</span>);</span></span><br><span class="line"><span class="javascript">       <span class="keyword">const</span> output = <span class="built_in">document</span>.getElementById(<span class="string">"output"</span>);</span></span><br><span class="line"><span class="javascript">       <span class="keyword">const</span> progress = <span class="built_in">document</span>.getElementById(<span class="string">"progress"</span>);</span></span><br><span class="line"><span class="javascript">       <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">file</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">const</span> reader = <span class="keyword">new</span> FileReader();</span></span><br><span class="line"><span class="javascript">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">           reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">           resolve(reader.result);</span><br><span class="line">           &#125;;</span><br><span class="line"><span class="javascript">           reader.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">           reject(<span class="string">"err"</span>);</span></span><br><span class="line">           &#125;;</span><br><span class="line">           reader.readAsBinaryString(file);</span><br><span class="line">       &#125;);</span><br><span class="line">       &#125;</span><br><span class="line"><span class="javascript">       uploader.addEventListener(<span class="string">"change"</span>, <span class="keyword">async</span> (event) =&gt; &#123;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">const</span> &#123; files &#125; = event.target;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">const</span> [file] = files;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">if</span> (!file) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">       uploader.value = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">const</span> content = <span class="keyword">await</span> read(file);</span></span><br><span class="line"><span class="javascript">       <span class="keyword">const</span> hash = CryptoJS.MD5(content);</span></span><br><span class="line"><span class="javascript">       <span class="keyword">const</span> &#123; size, name, type &#125; = file;</span></span><br><span class="line">       progress.max = size;</span><br><span class="line"><span class="javascript">       <span class="keyword">const</span> chunkSize = <span class="number">64</span> * <span class="number">1024</span>;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">let</span> uploaded = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">let</span> local = localStorage.getItem(hash);</span></span><br><span class="line"><span class="javascript">       <span class="keyword">if</span> (local) &#123;</span></span><br><span class="line"><span class="javascript">           uploaded = <span class="built_in">Number</span>(local);</span></span><br><span class="line">       &#125;</span><br><span class="line"><span class="javascript">       <span class="keyword">let</span> pool = []; <span class="comment">//并发池</span></span></span><br><span class="line"><span class="javascript">       <span class="keyword">let</span> max = <span class="number">3</span>; <span class="comment">//最大并发量</span></span></span><br><span class="line"><span class="javascript">       <span class="keyword">while</span> (uploaded &lt; size) &#123;</span></span><br><span class="line"><span class="javascript">           <span class="keyword">const</span> chunk = file.slice(uploaded, uploaded + chunkSize, type);</span></span><br><span class="line"><span class="javascript">           <span class="keyword">const</span> formData = <span class="keyword">new</span> FormData();</span></span><br><span class="line"><span class="javascript">           formData.append(<span class="string">"name"</span>, name);</span></span><br><span class="line"><span class="javascript">           formData.append(<span class="string">"type"</span>, type);</span></span><br><span class="line"><span class="javascript">           formData.append(<span class="string">"size"</span>, size);</span></span><br><span class="line"><span class="javascript">           formData.append(<span class="string">"file"</span>, chunk);</span></span><br><span class="line"><span class="javascript">           formData.append(<span class="string">"hash"</span>, hash);</span></span><br><span class="line"><span class="javascript">           formData.append(<span class="string">"offset"</span>, uploaded);</span></span><br><span class="line"><span class="javascript">           <span class="comment">// let task = axios.post("/api/upload", formData);</span></span></span><br><span class="line"><span class="javascript">           <span class="comment">// task.then((data) =&gt; &#123;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">           <span class="comment">//   //请求结束后将该Promise任务从并发池中移除</span></span></span><br><span class="line"><span class="javascript">           <span class="comment">//   // let index = pool.findIndex((t) =&gt; t === task);</span></span></span><br><span class="line"><span class="javascript">           <span class="comment">//   // pool.splice(index);</span></span></span><br><span class="line"><span class="javascript">           <span class="comment">//   pool =  pool.filter((t) =&gt; t != task);</span></span></span><br><span class="line"><span class="javascript">           <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="javascript">           <span class="comment">// pool.push(task);</span></span></span><br><span class="line"><span class="javascript">           <span class="comment">// console.log(pool.length)</span></span></span><br><span class="line"><span class="javascript">           <span class="comment">// await Promise.race(pool);</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">           <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">           <span class="comment">// await axios.post("/api/upload", formData);</span></span></span><br><span class="line"><span class="javascript">           <span class="comment">// 上传切片</span></span></span><br><span class="line"><span class="javascript">           <span class="keyword">let</span> task = axios.post(<span class="string">"/api/upload"</span>, formData);</span></span><br><span class="line"><span class="javascript">           task.then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">               <span class="comment">//请求结束后将该Promise任务从并发池中移除</span></span></span><br><span class="line"><span class="javascript">               <span class="keyword">let</span> index = pool.findIndex(<span class="function">(<span class="params">t</span>) =&gt;</span> t === task);</span></span><br><span class="line">               pool.splice(index);</span><br><span class="line">           &#125;);</span><br><span class="line">           pool.push(task);</span><br><span class="line"><span class="javascript">           <span class="keyword">if</span> (pool.length === max) &#123;</span></span><br><span class="line"><span class="javascript">               <span class="comment">//每当并发池跑完一个任务，就再塞入一个任务</span></span></span><br><span class="line"><span class="javascript">               <span class="keyword">await</span> <span class="built_in">Promise</span>.race(pool);</span></span><br><span class="line">           &#125;</span><br><span class="line"><span class="javascript">           &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="javascript">           output.innerText = <span class="string">"上传失败"</span> + e.message;</span></span><br><span class="line">           &#125;</span><br><span class="line">           uploaded += chunk.size;</span><br><span class="line"><span class="javascript">           localStorage.setItem(<span class="string">"hash"</span>, uploaded);</span></span><br><span class="line">           progress.value = uploaded;</span><br><span class="line">       &#125;</span><br><span class="line"><span class="javascript">       output.innerText = <span class="string">"上传成功"</span>;</span></span><br><span class="line"><span class="javascript">       localStorage.setItem(<span class="string">"hash"</span>, <span class="number">0</span>);</span></span><br><span class="line">       &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="后台express"><a href="#后台express" class="headerlink" title="后台express"></a>后台express</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">const</span> uploader = <span class="built_in">require</span>(<span class="string">"express-fileupload"</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; resolve, extname &#125; = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">promises: &#123; writeFile, appendFile &#125;,</span><br><span class="line">existsSync,</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line">app.use(express.static(<span class="string">"pubilc"</span>));</span><br><span class="line">app.use(express.json());</span><br><span class="line">app.use(express.urlencoded(&#123; <span class="attr">urlencoded</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">app.use(uploader());</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">"/api/upload"</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> &#123; name, type, size, offset, hash &#125; = req.body;</span><br><span class="line"><span class="comment">// console.log(size);</span></span><br><span class="line"><span class="comment">// console.log(offset);</span></span><br><span class="line"><span class="comment">// console.log(hash);</span></span><br><span class="line"><span class="keyword">const</span> &#123; file &#125; = req.files;</span><br><span class="line"><span class="keyword">const</span> ext = extname(name);</span><br><span class="line"><span class="keyword">const</span> filename = resolve(__dirname, <span class="string">`./pubilc/<span class="subst">$&#123;hash&#125;</span><span class="subst">$&#123;ext&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (offset) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!existsSync(filename)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1111</span>);</span><br><span class="line">        <span class="keyword">await</span> writeFile(filename, file.data);</span><br><span class="line">        res.send(&#123;</span><br><span class="line">            message: <span class="string">"created"</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// res.status(400).send(&#123;</span></span><br><span class="line">        <span class="comment">//   message: "文件不存在",</span></span><br><span class="line">        <span class="comment">// &#125;);</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> appendFile(filename, file.data);</span><br><span class="line">        res.send(&#123;</span><br><span class="line">            message: <span class="string">"追加"</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">"/api/get"</span>, (req, res) =&gt; &#123;</span><br><span class="line">    res.send(&#123;</span><br><span class="line">        msg: <span class="string">"success"</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(port, () =&gt; &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"启动express项目"</span>, port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一个简单的上传控制并发</title>
      <link href="/2022/03/18/%E5%B9%B6%E5%8F%91/"/>
      <url>/2022/03/18/%E5%B9%B6%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>简单的控制并发</p><a id="more"></a><h3 id="控制并发"><a href="#控制并发" class="headerlink" title="控制并发"></a>控制并发</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!DOCTYPE html&gt;</span><br><span class="line">    &lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        //自定义请求函数</span><br><span class="line">        var request = url =&gt; &#123;</span><br><span class="line">            return new Promise(resolve =&gt; &#123;</span><br><span class="line">                setTimeout(() =&gt; &#123;</span><br><span class="line">                    resolve(`任务$&#123;url&#125;完成`)</span><br><span class="line">                &#125;, 1000)</span><br><span class="line">            &#125;).then(res =&gt; &#123;</span><br><span class="line">                console.log(&apos;外部逻辑&apos;, res);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        // 执行任务</span><br><span class="line">        async function fn() &#123;</span><br><span class="line">            let urls = [&apos;bytedance.com&apos;, &apos;tencent.com&apos;, &apos;alibaba.com&apos;, &apos;microsoft.com&apos;, &apos;apple.com&apos;, &apos;hulu.com&apos;,</span><br><span class="line">                &apos;amazon.com&apos;</span><br><span class="line">            ] // 请求地址</span><br><span class="line">            let pool = [] //并发池</span><br><span class="line">            let max = 3 //最大并发量</span><br><span class="line">            for (let i = 0; i &lt; urls.length; i++) &#123;</span><br><span class="line">                let url = urls[i]</span><br><span class="line">                let task = request(url);</span><br><span class="line">                task.then((data) =&gt; &#123;</span><br><span class="line">                    //每当并发池跑完一个任务,从并发池删除个任务</span><br><span class="line">                    pool.splice(pool.indexOf(task), 1)</span><br><span class="line">                    console.log(`$&#123;url&#125; 结束，当前并发数：$&#123;pool.length&#125;`);</span><br><span class="line">                &#125;)</span><br><span class="line">                pool.push(task);</span><br><span class="line">                if (pool.length === max) &#123;</span><br><span class="line">                    //利用Promise.race方法来获得并发池中某任务完成的信号</span><br><span class="line">                    //跟await结合当有任务完成才让程序继续执行,让循环把并发池塞满</span><br><span class="line">                    await Promise.race(pool)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        fn()</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack</title>
      <link href="/2022/03/02/webpack%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/03/02/webpack%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>webpack的基本配置</p><a id="more"></a><h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><ul><li><p>基本配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">  mode: &quot;development&quot;,</span><br><span class="line">  entry: &quot;./src/main.js&quot;,</span><br><span class="line">  devtool:false,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &quot;js/[name]bundle.js&quot;,</span><br><span class="line">     //chunkFilename我的理解是未被列在entry中，却又需要被打包出来的文件命名配  置。比如异步加载</span><br><span class="line">    chunkFilename:&apos;[name].[hash:6].chunk.js&apos;, </span><br><span class="line">    path: path.resolve(__dirname, &quot;./build&quot;),</span><br><span class="line">    publicPath:&apos;./&apos;,</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve:&#123;</span><br><span class="line">    extensions:[&apos;.js&apos;,&apos;.json&apos;,&apos;.wasm&apos;,&apos;.mjs&apos;],   //处理不带引入文件后缀问题</span><br><span class="line">    alias:&#123;</span><br><span class="line">      &apos;@&apos;:path.resolve(__dirname,&apos;./src&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">   externals: &#123;</span><br><span class="line">    //可以用cdn 引入Vue Vue-router  去除外部的inport Vue from &apos;vue&apos; 以及 Vue.use(****)</span><br><span class="line">    vue: &quot;Vue&quot;,</span><br><span class="line">    &quot;vue-router&quot;: &quot;VueRouter&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  optimization:&#123;     </span><br><span class="line">    minimize: true,       //去除webpack自带的打包.txt后缀</span><br><span class="line">    minimizer: [new TerserPlugin(),new HtmlMinimizerPlugin()],</span><br><span class="line">    // minimize:true,</span><br><span class="line">    // minimizer:[</span><br><span class="line">    //   new TerserPlugin(&#123;</span><br><span class="line">    //     extractComponents:false</span><br><span class="line">    //   &#125;)</span><br><span class="line">    // ],</span><br><span class="line">    splitChunks:&#123;</span><br><span class="line">      chunks:&apos;all&apos;,</span><br><span class="line">      // minChunks:1,</span><br><span class="line">      cacheGroups:&#123;</span><br><span class="line">        vendor:&#123;</span><br><span class="line">          test:/[\\/]node_modules[\\/]/,</span><br><span class="line">          filename:&quot;[id]_vendor.js&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        default:&#123;</span><br><span class="line">          filename:&apos;common_[id].js&apos;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>.browserslistrc caniuse.com  浏览器的兼容</p></li><li><p>postcss-preset-env 里面包含 autoprefixer  用于加载浏览器前缀 -webkit-user-select </p></li><li><p>plugin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">require(&quot;clean-webpack-plugin&quot;);//每次打包都会清楚dist里面的文件</span><br><span class="line">require(&quot;html-webpack-plugin&quot;); //模板文件</span><br><span class="line">require(&apos;mini-css-extract-plugin&apos;) //生成单独的css文件</span><br><span class="line">require(&quot;css-minimizer-webpack-plugin&quot;); // 压缩css</span><br><span class="line">require(&apos;terser-webpack-plugin&apos;)  //压缩js</span><br><span class="line">require(&quot;html-minimizer-webpack-plugin&quot;); //压缩html</span><br><span class="line">require(&quot;compression-webpack-plugin&quot;)  用来开启gzip</span><br></pre></td></tr></table></figure></li><li><p>loader</p><pre><code>style-loader      //内嵌html里面通过&lt;style&gt;&lt;/style&gt;的形式css-loader        //处理css 以及 import &apos;@/xxx.css&apos;postcss-loader    //用于加载浏览器前缀 -webkit-user-select less/scss-loader  //处理scss/less文件url-loader        //用于处理把文件多少的转化为base64格式</code></pre></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>浏览器的缓存</title>
      <link href="/2021/12/28/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/"/>
      <url>/2021/12/28/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p>浏览器的强缓存和协商缓存 vue-cli缓存策略  </p><a id="more"></a><h3 id="浏览器的缓存-html-css-js-png-jpg………"><a href="#浏览器的缓存-html-css-js-png-jpg………" class="headerlink" title="浏览器的缓存(html,css,js,png,jpg………)"></a>浏览器的缓存(html,css,js,png,jpg………)</h3><ul><li><p>协商缓存会和服务器进行一次交互(304)</p><ul><li>需要设置不能够强缓存 ctx.set(‘Cache-Control’, ‘no-cache’)</li><li>有变化就会直接请求到最新的资源</li></ul></li><li><p>Memory Cache：基于内存的缓存，读取高效速度快，但是一旦关闭网页，内存就释放了。</p></li><li><p>Disk Cache：基于磁盘的缓存，容量大，读取慢</p></li><li><p>强缓存设置的时间过期 ——-&gt; 协商缓存 ——&gt; 服务器</p><ul><li>缓存设置的时间不过期 一直都会是老数据</li></ul></li></ul><h3 id="基于-koa-实现的缓存策略"><a href="#基于-koa-实现的缓存策略" class="headerlink" title="基于 koa 实现的缓存策略"></a>基于 koa 实现的缓存策略</h3><ul><li>npm install koa2-generator -g</li><li>koa2 <code>项目名称</code>  <figure class="highlight plain"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">/*app.js*/</span><br><span class="line">const Koa = require(&apos;koa&apos;)</span><br><span class="line">const app = new Koa()</span><br><span class="line">const fs = require(&apos;fs&apos;)</span><br><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">const crypto = require(&apos;crypto&apos;)</span><br><span class="line"></span><br><span class="line">// 定义资源类型常量列表</span><br><span class="line">const mimes = &#123;</span><br><span class="line">css: &apos;text/css&apos;,</span><br><span class="line">less: &apos;text/css&apos;,</span><br><span class="line">gif: &apos;image/gif&apos;,</span><br><span class="line">html: &apos;text/html&apos;,</span><br><span class="line">ico: &apos;image/x-icon&apos;,</span><br><span class="line">jpeg: &apos;image/jpeg&apos;,</span><br><span class="line">jpg: &apos;image/jpeg&apos;,</span><br><span class="line">js: &apos;text/javascript&apos;,</span><br><span class="line">json: &apos;application/json&apos;,</span><br><span class="line">pdf: &apos;application/pdf&apos;,</span><br><span class="line">png: &apos;image/png&apos;,</span><br><span class="line">svg: &apos;image/svg+xml&apos;,</span><br><span class="line">swf: &apos;application/x-shockwave-flash&apos;,</span><br><span class="line">tiff: &apos;image/tiff&apos;,</span><br><span class="line">txt: &apos;text/plain&apos;,</span><br><span class="line">wav: &apos;audio/x-wav&apos;,</span><br><span class="line">wma: &apos;audio/x-ms-wma&apos;,</span><br><span class="line">wmv: &apos;video/x-ms-wmv&apos;,</span><br><span class="line">xml: &apos;text/xml&apos;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 解析资源类型</span><br><span class="line">function parseMime(url) &#123;</span><br><span class="line">// path.extname获取路径中文件的后缀名</span><br><span class="line">let extName = path.extname(url)</span><br><span class="line">extName = extName ? extName.slice(1) : &apos;unknown&apos;</span><br><span class="line">return mimes[extName]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const parseStatic = (dir) =&gt; &#123;</span><br><span class="line">return new Promise((resolve) =&gt; &#123;</span><br><span class="line">    resolve(fs.readFileSync(dir), &apos;binary&apos;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getFileStat(filePath) &#123;</span><br><span class="line">return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    fs.stat(filePath, function (err, stats) &#123;</span><br><span class="line">    if (stats) &#123;</span><br><span class="line">        resolve(stats)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use(async (ctx) =&gt; &#123;</span><br><span class="line">const url = ctx.request.url</span><br><span class="line">if (url === &apos;/&apos;) &#123;</span><br><span class="line">    // 访问根路径返回index.html</span><br><span class="line">    ctx.set(&apos;Content-Type&apos;, &apos;text/html&apos;)</span><br><span class="line">    ctx.body = await parseStatic(&apos;./index.html&apos;)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    const filePath = path.resolve(__dirname, `.$&#123;url&#125;`)</span><br><span class="line">    ctx.set(&apos;Content-Type&apos;, parseMime(url))</span><br><span class="line">    /**</span><br><span class="line">    * @title 强缓存</span><br><span class="line">    * @descript Expires设置30秒后过期</span><br><span class="line">    */</span><br><span class="line">    ctx.set(&apos;Expires&apos;, new Date(Date.now() + 30000))</span><br><span class="line">    ctx.body = await parseStatic(filePath)</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    * @title 强缓存</span><br><span class="line">    * @descript Cache-Control max-age=300 设置30秒后过期</span><br><span class="line">    */</span><br><span class="line">    // ctx.set(&apos;Cache-Control&apos;, &apos;max-age=1&apos;)</span><br><span class="line">    // ctx.body = await parseStatic(filePath)</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    * @title 协商缓存</span><br><span class="line">    * @descript Last-Modified、if-modified-since</span><br><span class="line">    */</span><br><span class="line">    // ctx.set(&apos;Cache-Control&apos;, &apos;no-cache&apos;)</span><br><span class="line">    // const ifModifiedSince = ctx.request.header[&apos;if-modified-since&apos;]</span><br><span class="line">    // const fileStat = await getFileStat(filePath)</span><br><span class="line">    // if (ifModifiedSince === fileStat.mtime.toGMTString()) &#123;</span><br><span class="line">    //   ctx.status = 304</span><br><span class="line">    // &#125; else &#123;</span><br><span class="line">    //   ctx.set(&apos;Last-Modified&apos;, fileStat.mtime.toGMTString())</span><br><span class="line">    //   ctx.body = await parseStatic(filePath)</span><br><span class="line">    // &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    * @title 协商缓存</span><br><span class="line">    * @descript etag、if-none-match</span><br><span class="line">    */</span><br><span class="line">    // ctx.set(&apos;Cache-Control&apos;, &apos;no-cache&apos;)</span><br><span class="line">    // const fileBuffer = await parseStatic(filePath)</span><br><span class="line">    // const ifNoneMatch = ctx.request.headers[&apos;if-none-match&apos;]</span><br><span class="line">    // const hash = crypto.createHash(&apos;md5&apos;)</span><br><span class="line">    // hash.update(fileBuffer)</span><br><span class="line">    // const etag = `&quot;$&#123;hash.digest(&apos;hex&apos;)&#125;&quot;`</span><br><span class="line">    // if (ifNoneMatch === etag) &#123;</span><br><span class="line">    //   ctx.status = 304</span><br><span class="line">    // &#125; else &#123;</span><br><span class="line">    //   ctx.set(&apos;etag&apos;, etag)</span><br><span class="line">    //   ctx.body = fileBuffer</span><br><span class="line">    // &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(3000, () =&gt; &#123;</span><br><span class="line">console.log(&apos;starting at port 3000&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="vue-cli缓存策略"><a href="#vue-cli缓存策略" class="headerlink" title="vue-cli缓存策略"></a>vue-cli缓存策略</h3><ul><li>由于打包后的js、css和图片，一般名称都带有hash值，名称中的hash变了，自然会拉取新文件，所以我们可以将这类文件设置为强制缓存，只要文件名不变，就一直缓存，比如缓存100天或者一年。</li><li>而html文件则不能设为强制缓存，一般html名称是没法带hash值的，所以html如果设置了强制缓存，则永远也没法更新，html不更新，其引用的js、css等名称也不会更新，则整个服务都没有更新，只能让用户清除缓存了。所以针对html文件，我们可以设置协商缓存或者直接不使用缓存，本身html文件都比较小，我是直接使用了不缓存</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一个关于video播放暂停的发布订阅模式</title>
      <link href="/2021/12/23/Vue-Video-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/"/>
      <url>/2021/12/23/Vue-Video-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</url>
      
        <content type="html"><![CDATA[<p>了解下发布订阅模式</p><a id="more"></a><h3 id="pubsub-js"><a href="#pubsub-js" class="headerlink" title="pubsub.js"></a>pubsub.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">main.js中引入这个js</span><br><span class="line"></span><br><span class="line">import myevent from &quot;@/utils/pubsub&quot;;</span><br><span class="line"></span><br><span class="line">Vue.prototype.$event = new myevent();</span><br><span class="line"></span><br><span class="line">export default class myEvent &#123;</span><br><span class="line">  // 存储事件队列</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    this.msg = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">  * subscribe 订阅事件</span><br><span class="line">  * @param &#123;*&#125; key 事件标识符</span><br><span class="line">  * @param &#123;*&#125; fn  事件方法</span><br><span class="line">  *</span><br><span class="line">  */</span><br><span class="line">  subscribe(key, fn) &#123;</span><br><span class="line">    if (typeof fn != &quot;function&quot;) return;</span><br><span class="line">    // 如果次队列不存在,创建队列</span><br><span class="line">    if (!this.msg[key]) this.msg[key] = [];</span><br><span class="line">    //添加事件到消息队列中去</span><br><span class="line">    this.msg[key].push(fn);</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">  *</span><br><span class="line">  * 发布队列中所有事件，通知所有订阅者</span><br><span class="line">  *</span><br><span class="line">  */</span><br><span class="line">  publish() &#123;</span><br><span class="line">    // 获取参数key,并删除第一个参数</span><br><span class="line">    let key = Array.prototype.shift.call(arguments);</span><br><span class="line">    let fns = this.msgp[key];</span><br><span class="line">    //事件为空就返回</span><br><span class="line">    if (!fns || !fns.length) return;</span><br><span class="line">    fns.forEach((res) =&gt; &#123;</span><br><span class="line">      res.apply(null, arguments);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">  * @param &#123;*&#125; key 事件标识符</span><br><span class="line">  * @param &#123;*&#125; fn  事件方法</span><br><span class="line">  *</span><br><span class="line">  */</span><br><span class="line">  remove(key, fn) &#123;</span><br><span class="line">    let fns = this.msg[key];</span><br><span class="line">    // 如果不存在,直接返回</span><br><span class="line">    if (!fns || !fns.length) return;</span><br><span class="line">    // 如果不传入fn 则删除这个队列</span><br><span class="line">    if (!fn) &#123;</span><br><span class="line">      delete this.msg[key];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      for (let i = 0; i &lt; fns.length; i++) &#123;</span><br><span class="line">        let item = fns[i];</span><br><span class="line">        if (item === fn || item.fn === fn) &#123;</span><br><span class="line">          fns.splice(i, 1);</span><br><span class="line">          break;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">  *</span><br><span class="line">  * 获取当前队列数</span><br><span class="line">  */</span><br><span class="line">  getQueue(key) &#123;</span><br><span class="line">    if (!this.msg[key]) return undefined;</span><br><span class="line">    return this.msg[key].length;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Video-vue"><a href="#Video-vue" class="headerlink" title="Video.vue"></a>Video.vue</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;video</span><br><span class="line">      :src=&quot;url&quot;</span><br><span class="line">      :id=&quot;id&quot;</span><br><span class="line">      :controls=&quot;videoOptions.controls&quot;</span><br><span class="line">      class=&quot;video-js vjs-big-play-centered vjs-fluid&quot;</span><br><span class="line">      webkit-playsinline=&quot;true&quot;</span><br><span class="line">      playsinline=&quot;true&quot;</span><br><span class="line">      x-webkit-airplay=&quot;allow&quot;</span><br><span class="line">      x5-playsinline</span><br><span class="line">      style=&quot;width: 100%&quot;</span><br><span class="line">      @play=&quot;onPlayerPlay&quot;</span><br><span class="line">      @pause=&quot;onPlayerPause&quot;</span><br><span class="line">      ref=&quot;video&quot;</span><br><span class="line">    &gt;&lt;/video&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; v4 as uuidv4 &#125; from &quot;uuid&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;showVideo&quot;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    url: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &quot;&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      id: &quot;&quot;,</span><br><span class="line">      videoOptions: &#123;</span><br><span class="line">        controls: true,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.id = uuidv4();</span><br><span class="line">    this.$event.subscribe(&quot;eventSuspend&quot;, this.receiveSuspend);</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    receiveSuspend(id) &#123;</span><br><span class="line">      //   console.log(&quot;暂停播放suspend&quot;, this.id, id);</span><br><span class="line">      // 接收的 id与本视频id不符 则停止播放</span><br><span class="line">      if (id &amp;&amp; this.id &amp;&amp; id !== this.id) &#123;</span><br><span class="line">        this.onPlayerPause();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    onPlayerPlay() &#123;</span><br><span class="line">      this.$event.publish(&quot;eventSuspend&quot;, this.id);</span><br><span class="line">    &#125;,</span><br><span class="line">    onPlayerPause() &#123;</span><br><span class="line">      let id = this.id;</span><br><span class="line">      var myVideo = document.getElementById(`$&#123;id&#125;`);</span><br><span class="line">      myVideo.pause();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  destroyed() &#123;</span><br><span class="line">    this.$event.remove(&quot;eventSuspend&quot;, this.eventSuspend);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class Subject &#123;</span><br><span class="line">       constructor() &#123;</span><br><span class="line">           this.subs = [];</span><br><span class="line">       &#125;</span><br><span class="line">       addSub(sub) &#123;</span><br><span class="line">           this.subs.push(sub);</span><br><span class="line">       &#125;</span><br><span class="line">       notify() &#123;</span><br><span class="line">           this.subs.forEach(sub =&gt; &#123;</span><br><span class="line">               sub.update();</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   // 观察者，等待被触发</span><br><span class="line">   class Observer &#123;</span><br><span class="line">       constructor(name, subject) &#123;</span><br><span class="line">           this.name = name</span><br><span class="line">           this.subject = subject</span><br><span class="line">       &#125;</span><br><span class="line">       update() &#123;</span><br><span class="line">           console.log(`update`)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   let subject = new Subject();</span><br><span class="line">   let ob = new Observer();</span><br><span class="line">   //目标添加观察者了</span><br><span class="line">   subject.addSub(ob);</span><br><span class="line">   //目标发布消息调用观察者的更新方法了</span><br><span class="line">   subject.notify(); //update</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一个倒计时组件</title>
      <link href="/2021/12/23/Vue-count-down/"/>
      <url>/2021/12/23/Vue-count-down/</url>
      
        <content type="html"><![CDATA[<p>各种活动页面都会有倒计时功能,记录一下</p><a id="more"></a><ul><li><p>利用slot-scope的方式暴露出去值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">  &lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;_base-count-down no-rtl&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">      &lt;slot</span><br><span class="line">        v-bind=&quot;&#123;</span><br><span class="line">          d: days,</span><br><span class="line">          h: hours,</span><br><span class="line">          m: mins,</span><br><span class="line">          s: seconds,</span><br><span class="line">          hh: `00$&#123;hours&#125;`.slice(-2),</span><br><span class="line">          mm: `00$&#123;mins&#125;`.slice(-2),</span><br><span class="line">          ss: `00$&#123;seconds&#125;`.slice(-2),</span><br><span class="line">        &#125;&quot;</span><br><span class="line">      &gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data: () =&gt; (&#123;</span><br><span class="line">    days: &quot;0&quot;,</span><br><span class="line">    hours: &quot;00&quot;,</span><br><span class="line">    mins: &quot;00&quot;,</span><br><span class="line">    seconds: &quot;00&quot;,</span><br><span class="line">    timer: null,</span><br><span class="line">    curTime: 0,</span><br><span class="line">  &#125;),</span><br><span class="line">  props: &#123;</span><br><span class="line">    time: &#123;</span><br><span class="line">      type: [Number, String],</span><br><span class="line">      default: 3600,</span><br><span class="line">    &#125;,</span><br><span class="line">    refreshCounter: &#123;</span><br><span class="line">      type: [Number, String],</span><br><span class="line">      default: 0,</span><br><span class="line">    &#125;,</span><br><span class="line">    end: &#123;</span><br><span class="line">      type: [Number, String],</span><br><span class="line">      default: 0,</span><br><span class="line">    &#125;,</span><br><span class="line">    isMiniSecond: &#123;</span><br><span class="line">      type: Boolean,</span><br><span class="line">      default: false,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    duration() &#123;</span><br><span class="line">      if (this.end) &#123;</span><br><span class="line">        let end = String(this.end).length &gt;= 13 ? +this.end : +this.end * 1000;</span><br><span class="line">        end -= Date.now();</span><br><span class="line">        return end;</span><br><span class="line">      &#125;</span><br><span class="line">      const time = this.isMiniSecond</span><br><span class="line">        ? Math.round(+this.time / 1000)</span><br><span class="line">        : Math.round(+this.time);</span><br><span class="line">      return time;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.countDown();</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    duration() &#123;</span><br><span class="line">      this.countDown();</span><br><span class="line">    &#125;,</span><br><span class="line">    refreshCounter() &#123;</span><br><span class="line">      this.countDown();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    durationFormatter(time) &#123;</span><br><span class="line">      if (!time) return &#123; ss: 0 &#125;;</span><br><span class="line">      let t = time;</span><br><span class="line">      const ss = t % 60;</span><br><span class="line">      t = (t - ss) / 60;</span><br><span class="line">      if (t &lt; 1) return &#123; ss &#125;;</span><br><span class="line">      const mm = t % 60;</span><br><span class="line">      t = (t - mm) / 60;</span><br><span class="line">      if (t &lt; 1) return &#123; mm, ss &#125;;</span><br><span class="line">      const hh = t % 24;</span><br><span class="line">      t = (t - hh) / 24;</span><br><span class="line">      if (t &lt; 1) return &#123; hh, mm, ss &#125;;</span><br><span class="line">      const dd = t;</span><br><span class="line">      return &#123; dd, hh, mm, ss &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    countDown() &#123;</span><br><span class="line">      this.curTime = Date.now();</span><br><span class="line">      this.getTime(this.duration);</span><br><span class="line">    &#125;,</span><br><span class="line">    getTime(time) &#123;</span><br><span class="line">      this.timer &amp;&amp; clearTimeout(this.timer);</span><br><span class="line">      if (time &lt; 0) &#123;</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      const &#123; dd, hh, mm, ss &#125; = this.durationFormatter(time);</span><br><span class="line">      this.days = dd || 0;</span><br><span class="line">      // this.hours = `00$&#123;hh || &apos;&apos;&#125;`.slice(-2);</span><br><span class="line">      // this.mins = `00$&#123;mm || &apos;&apos;&#125;`.slice(-2);</span><br><span class="line">      // this.seconds = `00$&#123;ss || &apos;&apos;&#125;`.slice(-2);</span><br><span class="line">      this.hours = hh || 0;</span><br><span class="line">      this.mins = mm || 0;</span><br><span class="line">      this.seconds = ss || 0;</span><br><span class="line">      this.timer = setTimeout(() =&gt; &#123;</span><br><span class="line">        const now = Date.now();</span><br><span class="line">        const diffTime = Math.floor((now - this.curTime) / 1000);</span><br><span class="line">        const step = diffTime &gt; 1 ? diffTime : 1; // 页面退到后台的时候不会计时，对比时间差，大于1s的重置倒计时</span><br><span class="line">        this.curTime = now;</span><br><span class="line">        this.getTime(time - step);</span><br><span class="line">      &#125;, 1000);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>调用倒计时组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    hom</span><br><span class="line">    &lt;cut-down&gt;</span><br><span class="line">      &lt;template v-slot:default=&quot;slotProps&quot;&gt;</span><br><span class="line">        &#123;&#123; slotProps &#125;&#125;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/cut-down&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import CutDown from &quot;@/components/CountDown.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;&#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    CutDown,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue.use()的理解</title>
      <link href="/2021/11/04/Vue-use/"/>
      <url>/2021/11/04/Vue-use/</url>
      
        <content type="html"><![CDATA[<p>在用Vue使用别人的组件时，会用到 <code>Vue.use()</code> 。例如：<code>Vue.use(VueRouter)</code>、<code>Vue.use(vant)</code></p><a id="more"></a><h3 id="Vue-use-plugin"><a href="#Vue-use-plugin" class="headerlink" title="Vue.use( plugin )"></a><a href="https://cn.vuejs.org/v2/api/#Vue-use" target="_blank" rel="noopener">Vue.use( plugin )</a></h3><ul><li><p><strong>用法</strong>：</p><p>安装 Vue.js 插件。如果插件是一个对象，必须提供 <code>install</code> 方法。如果插件是一个函数，它会被作为 install 方法。install 方法调用时，会将 Vue 作为参数传入。</p><p>该方法需要在调用 <code>new Vue()</code> 之前被调用。</p><p>当 install 方法被同一个插件多次调用，插件将只会被安装一次</p></li></ul><ul><li><p>src新建目录 plugin</p><p>​                        ——-   install</p><p>​                            —— index.js</p><p>​                            ——loading.vue</p><ul><li><p>loading.vue </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    我是loading20</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default&#123;</span><br><span class="line">    created()&#123;</span><br><span class="line">      this.$toast(&apos;hahahaha&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>index.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import LoadingComponent from &quot;./loading.vue&quot;;</span><br><span class="line">const Loading = &#123;</span><br><span class="line">  install(Vue) &#123;</span><br><span class="line">    Vue.component(&quot;Loading&quot;, LoadingComponent);</span><br><span class="line">    </span><br><span class="line">    Vue.prototype.$myMethod = function (a) &#123;</span><br><span class="line">      //可通过this.$myMethod调用</span><br><span class="line">      return (a = a &lt; 20 ? true : false);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    Vue.myGlobalMethod = function (a) &#123;</span><br><span class="line">      // 通过Vue.myGlobalMethod 调用</span><br><span class="line">      return (a = a &lt; 20 ? true : false);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    Vue.filter(&apos;capitalize&apos;, function (value) &#123;</span><br><span class="line">      if (!value) return &apos;&apos;</span><br><span class="line">      value = value.toString()</span><br><span class="line">      return value.charAt(0).toUpperCase() + value.slice(1)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">export default Loading;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>main.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import Loading  from &apos;./plugin/install&apos;;</span><br><span class="line"></span><br><span class="line">Vue.use(Loading);</span><br><span class="line"></span><br><span class="line">即可使用plugin-&gt;index.js 里面定义的方法</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue.extend的理解</title>
      <link href="/2021/11/02/vue-extend/"/>
      <url>/2021/11/02/vue-extend/</url>
      
        <content type="html"><![CDATA[<p>在使用vant的过程中，我相信你在使用到类似this.$toast功能的时候，会觉得这个功能真的非常方便，不用import入组件，全局都可以调用。它就是通过Vue.extend + $mount实现。</p><a id="more"></a><h2 id="扩展实例构造器"><a href="#扩展实例构造器" class="headerlink" title="扩展实例构造器"></a>扩展实例构造器</h2><ul><li>Vue.extend返回的是一个“扩展实例构造器”，也就是一个预设了部分选项的 Vue 实例构造器。刚学的时候对“扩展实例构造器”这一名词感觉很疑惑，其实它就像构造函数，构造函数中会事先定义好一些属性，new出来的对象也就默认有构造函数中的属性，同理Vue.extend也是如此，看下例<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;mount-point&quot;&gt;&lt;/div&gt;</span><br><span class="line">// 创建构造器</span><br><span class="line">var Profile = Vue.extend(&#123;</span><br><span class="line">template: &apos;&lt;p&gt;&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125; aka &#123;&#123;alias&#125;&#125;&lt;/p&gt;&apos;,</span><br><span class="line">data: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">    firstName: &apos;Walter&apos;,</span><br><span class="line">    lastName: &apos;White&apos;,</span><br><span class="line">    alias: &apos;Heisenberg&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">// 创建 Profile 实例，并挂载到一个元素上。</span><br><span class="line">new Profile().$mount(&apos;#mount-point&apos;)</span><br></pre></td></tr></table></figure></li></ul><p>结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Walter White aka Heisenberg&lt;/p&gt;</span><br></pre></td></tr></table></figure><ul><li><p>我们试着搞一个弹框的组件 </p><ul><li>新建文件夹 plugin<pre><code>---taost文件夹       --- toast.vue          --- toast.js</code></pre></li></ul></li><li><p>toast.vue 用于创建一个component 供Vue.extend使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;transition name=&quot;toast&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;toastWrap&quot; v-if=&quot;toastShow&quot; v-html=&quot;toastVal&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">    name: &quot;Toast&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">    .toastWrap &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    left: 50%;</span><br><span class="line">    padding: 5px 10px;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">    transform: translateX(-50%) translateY(-50%);</span><br><span class="line">    color: #ffffff;</span><br><span class="line">    z-index: 999999;</span><br><span class="line">    background-color: rgba(0, 0, 0, 0.6);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>toast.js 使用Vue.extend  并挂载到Vue实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &quot;vue&quot;;</span><br><span class="line">import toastComponent from &quot;./toast.vue&quot;;</span><br><span class="line">const ToastConstructor = Vue.extend(toastComponent);</span><br><span class="line">function showToast(toastVal = &quot;哈哈哈&quot;, time = 5000) &#123;</span><br><span class="line">let div = document.createElement(&quot;div&quot;);</span><br><span class="line">div.setAttribute(&quot;id&quot;, &quot;toast&quot;);</span><br><span class="line">document.body.appendChild(div);</span><br><span class="line">let ToastDOM = new ToastConstructor(&#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            toastVal: toastVal,</span><br><span class="line">            toastShow: false,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;).$mount(&quot;#toast&quot;)</span><br><span class="line">ToastDOM.toastShow = true;</span><br><span class="line">let timer = setTimeout(() =&gt; &#123;</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    ToastDOM.toastShow = false;</span><br><span class="line">&#125;, time);</span><br><span class="line">&#125;</span><br><span class="line">Vue.prototype.$toast = showToast;</span><br></pre></td></tr></table></figure></li></ul><p>在main.js 引入 全局就能使用this.$toast(‘哈哈哈哈’)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>百度地图</title>
      <link href="/2021/10/25/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE/"/>
      <url>/2021/10/25/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>百度地图</p><a id="more"></a><h3 id="百度地图几万条数据不会卡顿"><a href="#百度地图几万条数据不会卡顿" class="headerlink" title="百度地图几万条数据不会卡顿"></a>百度地图几万条数据不会卡顿</h3><p>gitee地址 <a href="https://gitee.com/too_difficult/bmap" target="_blank" rel="noopener">百度地图</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue</title>
      <link href="/2021/01/30/vue%E4%B8%AD.sync%E7%9A%84%E7%94%A8%E6%B3%95/"/>
      <url>/2021/01/30/vue%E4%B8%AD.sync%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>vue中.sync的用法 v-model实现组件数据双向绑定</p><a id="more"></a><h3 id="sync的用法"><a href="#sync的用法" class="headerlink" title=".sync的用法"></a>.sync的用法</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h1 v-show=&quot;isShow&quot;&gt;我是父组件&lt;/h1&gt;</span><br><span class="line">    &lt;button&gt;点我&lt;/button&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;child :show.sync=&apos;isShow&apos;&gt;&lt;/child&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;./js/vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.component(&apos;child&apos;, &#123;</span><br><span class="line">        props: &#123;</span><br><span class="line">            show: &#123;</span><br><span class="line">                type: Boolean,</span><br><span class="line">                default: false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: `</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div&gt;我是子组件&lt;/div&gt;</span><br><span class="line">            &lt;h1&gt;&#123;&#123;  show &#125;&#125;&lt;/h1&gt;</span><br><span class="line">            &lt;button @click=&quot;handleClick&quot;&gt;.sync改变父组件的状态&lt;/button&gt;&lt;/div&gt;</span><br><span class="line">           </span><br><span class="line">        `,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleClick() &#123;</span><br><span class="line">                this.$emit(&apos;update:show&apos;, !this.show)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                isShow: true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></code></pre><h3 id="v-model实现组件数据双向绑定"><a href="#v-model实现组件数据双向绑定" class="headerlink" title="v-model实现组件数据双向绑定"></a>v-model实现组件数据双向绑定</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;p&gt;v-model封装组件&lt;/p&gt;</span><br><span class="line">        &lt;increase v-model=&quot;index&quot;&gt;&lt;/increase&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123; index &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import increase from &quot;@/components/increase&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &quot;Home&quot;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        increase,</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            index: 0,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">子组件</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;button @click=&quot;increase&quot; style=&quot;border: 1px solid black&quot;&gt;increase&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;vmodel&quot;,</span><br><span class="line">        props: &#123;</span><br><span class="line">            value: &#123;</span><br><span class="line">                type: Number,</span><br><span class="line">                default: 0,</span><br><span class="line">             &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            increase() &#123;</span><br><span class="line">                this.$emit(&quot;input&quot;, this.value + 1);</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>react的基础学习</title>
      <link href="/2021/01/26/react%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/01/26/react%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>js</p><a id="more"></a><h2 id="使用jsx创建虚拟dom"><a href="#使用jsx创建虚拟dom" class="headerlink" title="使用jsx创建虚拟dom"></a>使用jsx创建虚拟dom</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;2_使用js创建虚拟DOM&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个“容器” --&gt;</span><br><span class="line">&lt;div id=&quot;test&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 引入react核心库 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot; &gt; </span><br><span class="line">//1.创建虚拟DOM</span><br><span class="line">const VDOM = React.createElement(&apos;h1&apos;,&#123;id:&apos;title&apos;&#125;,React.createElement(&apos;span&apos;,&#123;&#125;,&apos;Hello,React&apos;))</span><br><span class="line">//2.渲染虚拟DOM到页面</span><br><span class="line">ReactDOM.render(VDOM,document.getElementById(&apos;test&apos;))</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="jsx语法规则"><a href="#jsx语法规则" class="headerlink" title="jsx语法规则"></a>jsx语法规则</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;jsx语法规则&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.title&#123;</span><br><span class="line">background-color: orange;</span><br><span class="line">width: 200px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个“容器” --&gt;</span><br><span class="line">&lt;div id=&quot;test&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 引入react核心库 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/babel&quot; &gt;</span><br><span class="line">const myId = &apos;aTgUiGu&apos;</span><br><span class="line">const myData = &apos;HeLlo,rEaCt&apos;</span><br><span class="line"></span><br><span class="line">//1.创建虚拟DOM</span><br><span class="line">const VDOM = (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h2 className=&quot;title&quot; id=&#123;myId.toLowerCase()&#125;&gt;</span><br><span class="line">&lt;span style=&#123;&#123;color:&apos;white&apos;,fontSize:&apos;29px&apos;&#125;&#125;&gt;&#123;myData.toLowerCase()&#125;&lt;/span&gt;</span><br><span class="line">&lt;/h2&gt;</span><br><span class="line">&lt;h2 className=&quot;title&quot; id=&#123;myId.toUpperCase()&#125;&gt;</span><br><span class="line">&lt;span style=&#123;&#123;color:&apos;white&apos;,fontSize:&apos;29px&apos;&#125;&#125;&gt;&#123;myData.toLowerCase()&#125;&lt;/span&gt;</span><br><span class="line">&lt;/h2&gt;</span><br><span class="line">&lt;input type=&quot;text&quot;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">//2.渲染虚拟DOM到页面</span><br><span class="line">ReactDOM.render(VDOM,document.getElementById(&apos;test&apos;))</span><br><span class="line"></span><br><span class="line">/* </span><br><span class="line">jsx语法规则：</span><br><span class="line">1.定义虚拟DOM时，不要写引号。</span><br><span class="line">2.标签中混入JS表达式时要用&#123;&#125;。</span><br><span class="line">3.样式的类名指定不要用class，要用className。</span><br><span class="line">4.内联样式，要用style=&#123;&#123;key:value&#125;&#125;的形式去写。</span><br><span class="line">5.只有一个根标签</span><br><span class="line">6.标签必须闭合</span><br><span class="line">7.标签首字母</span><br><span class="line">(1).若小写字母开头，则将该标签转为html中同名元素，若html中无该标签对应的同名元素，则报错。</span><br><span class="line">(2).若大写字母开头，react就去渲染对应的组件，若组件没有定义，则报错。</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="createRef的使用"><a href="#createRef的使用" class="headerlink" title="createRef的使用"></a>createRef的使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;4_createRef&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个“容器” --&gt;</span><br><span class="line">&lt;div id=&quot;test&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 引入react核心库 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">//创建组件</span><br><span class="line">class Demo extends React.Component&#123;</span><br><span class="line">/* </span><br><span class="line">React.createRef调用后可以返回一个容器，该容器可以存储被ref所标识的节点,该容器是“专人专用”的</span><br><span class="line"> */</span><br><span class="line">myRef = React.createRef()</span><br><span class="line">myRef2 = React.createRef()</span><br><span class="line">//展示左侧输入框的数据</span><br><span class="line">showData = ()=&gt;&#123;</span><br><span class="line">alert(this.myRef.current.value);</span><br><span class="line">&#125;</span><br><span class="line">//展示右侧输入框的数据</span><br><span class="line">showData2 = ()=&gt;&#123;</span><br><span class="line">alert(this.myRef2.current.value);</span><br><span class="line">&#125;</span><br><span class="line">render()&#123;</span><br><span class="line">return(</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;input ref=&#123;this.myRef&#125; type=&quot;text&quot; placeholder=&quot;点击按钮提示数据&quot;/&gt;&amp;nbsp;</span><br><span class="line">&lt;button onClick=&#123;this.showData&#125;&gt;点我提示左侧的数据&lt;/button&gt;&amp;nbsp;</span><br><span class="line">&lt;input onBlur=&#123;this.showData2&#125; ref=&#123;this.myRef2&#125; type=&quot;text&quot; placeholder=&quot;失去焦点提示数据&quot;/&gt;&amp;nbsp;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//渲染组件到页面</span><br><span class="line">ReactDOM.render(&lt;Demo a=&quot;1&quot; b=&quot;2&quot;/&gt;,document.getElementById(&apos;test&apos;))</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="react生命周期-旧"><a href="#react生命周期-旧" class="headerlink" title="react生命周期(旧)"></a>react生命周期(旧)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;2_react生命周期(旧)&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个“容器” --&gt;</span><br><span class="line">&lt;div id=&quot;test&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 引入react核心库 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">/* </span><br><span class="line">1. 初始化阶段: 由ReactDOM.render()触发---初次渲染</span><br><span class="line">1.constructor()</span><br><span class="line">2.componentWillMount()</span><br><span class="line">3.render()</span><br><span class="line">4.componentDidMount() =====&gt; 常用</span><br><span class="line">一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息</span><br><span class="line">2. 更新阶段: 由组件内部this.setSate()或父组件render触发</span><br><span class="line">1.shouldComponentUpdate()</span><br><span class="line">2.componentWillUpdate()</span><br><span class="line">3.render() =====&gt; 必须使用的一个</span><br><span class="line">4.componentDidUpdate()</span><br><span class="line">3. 卸载组件: 由ReactDOM.unmountComponentAtNode()触发</span><br><span class="line">1.componentWillUnmount()  =====&gt; 常用</span><br><span class="line">一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息</span><br><span class="line">*/</span><br><span class="line">//创建组件</span><br><span class="line">class Count extends React.Component&#123;</span><br><span class="line"></span><br><span class="line">//构造器</span><br><span class="line">constructor(props)&#123;</span><br><span class="line">console.log(&apos;Count---constructor&apos;);</span><br><span class="line">super(props)</span><br><span class="line">//初始化状态</span><br><span class="line">this.state = &#123;count:0&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//加1按钮的回调</span><br><span class="line">add = ()=&gt;&#123;</span><br><span class="line">//获取原状态</span><br><span class="line">const &#123;count&#125; = this.state</span><br><span class="line">//更新状态</span><br><span class="line">this.setState(&#123;count:count+1&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//卸载组件按钮的回调</span><br><span class="line">death = ()=&gt;&#123;</span><br><span class="line">ReactDOM.unmountComponentAtNode(document.getElementById(&apos;test&apos;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//强制更新按钮的回调</span><br><span class="line">force = ()=&gt;&#123;</span><br><span class="line">this.forceUpdate()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//组件将要挂载的钩子</span><br><span class="line">componentWillMount()&#123;</span><br><span class="line">console.log(&apos;Count---componentWillMount&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//组件挂载完毕的钩子</span><br><span class="line">componentDidMount()&#123;</span><br><span class="line">console.log(&apos;Count---componentDidMount&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//组件将要卸载的钩子</span><br><span class="line">componentWillUnmount()&#123;</span><br><span class="line">console.log(&apos;Count---componentWillUnmount&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//控制组件更新的“阀门”</span><br><span class="line">shouldComponentUpdate()&#123;</span><br><span class="line">console.log(&apos;Count---shouldComponentUpdate&apos;);</span><br><span class="line">return true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//组件将要更新的钩子</span><br><span class="line">componentWillUpdate()&#123;</span><br><span class="line">console.log(&apos;Count---componentWillUpdate&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//组件更新完毕的钩子</span><br><span class="line">componentDidUpdate()&#123;</span><br><span class="line">console.log(&apos;Count---componentDidUpdate&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render()&#123;</span><br><span class="line">console.log(&apos;Count---render&apos;);</span><br><span class="line">const &#123;count&#125; = this.state</span><br><span class="line">return(</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h2&gt;当前求和为：&#123;count&#125;&lt;/h2&gt;</span><br><span class="line">&lt;button onClick=&#123;this.add&#125;&gt;点我+1&lt;/button&gt;</span><br><span class="line">&lt;button onClick=&#123;this.death&#125;&gt;卸载组件&lt;/button&gt;</span><br><span class="line">&lt;button onClick=&#123;this.force&#125;&gt;不更改任何状态中的数据，强制更新一下&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//父组件A</span><br><span class="line">class A extends React.Component&#123;</span><br><span class="line">//初始化状态</span><br><span class="line">state = &#123;carName:&apos;奔驰&apos;&#125;</span><br><span class="line"></span><br><span class="line">changeCar = ()=&gt;&#123;</span><br><span class="line">this.setState(&#123;carName:&apos;奥拓&apos;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render()&#123;</span><br><span class="line">return(</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;div&gt;我是A组件&lt;/div&gt;</span><br><span class="line">&lt;button onClick=&#123;this.changeCar&#125;&gt;换车&lt;/button&gt;</span><br><span class="line">&lt;B carName=&#123;this.state.carName&#125;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//子组件B</span><br><span class="line">class B extends React.Component&#123;</span><br><span class="line">//组件将要接收新的props的钩子</span><br><span class="line">componentWillReceiveProps(props)&#123;</span><br><span class="line">console.log(&apos;B---componentWillReceiveProps&apos;,props);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//控制组件更新的“阀门”</span><br><span class="line">shouldComponentUpdate()&#123;</span><br><span class="line">console.log(&apos;B---shouldComponentUpdate&apos;);</span><br><span class="line">return true</span><br><span class="line">&#125;</span><br><span class="line">//组件将要更新的钩子</span><br><span class="line">componentWillUpdate()&#123;</span><br><span class="line">console.log(&apos;B---componentWillUpdate&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//组件更新完毕的钩子</span><br><span class="line">componentDidUpdate()&#123;</span><br><span class="line">console.log(&apos;B---componentDidUpdate&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render()&#123;</span><br><span class="line">console.log(&apos;B---render&apos;);</span><br><span class="line">return(</span><br><span class="line">&lt;div&gt;我是B组件，接收到的车是:&#123;this.props.carName&#125;&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//渲染组件</span><br><span class="line">ReactDOM.render(&lt;Count/&gt;,document.getElementById(&apos;test&apos;))</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="react生命周期-新"><a href="#react生命周期-新" class="headerlink" title="react生命周期(新)"></a>react生命周期(新)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;3_react生命周期(新)&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个“容器” --&gt;</span><br><span class="line">&lt;div id=&quot;test&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 引入react核心库 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/17.0.1/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/17.0.1/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/17.0.1/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">//创建组件</span><br><span class="line">class Count extends React.Component&#123;</span><br><span class="line">/* </span><br><span class="line">1. 初始化阶段: 由ReactDOM.render()触发---初次渲染</span><br><span class="line">1.constructor()</span><br><span class="line">2.getDerivedStateFromProps </span><br><span class="line">3.render()</span><br><span class="line">4.componentDidMount() =====&gt; 常用</span><br><span class="line">一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息</span><br><span class="line">2. 更新阶段: 由组件内部this.setSate()或父组件重新render触发</span><br><span class="line">1.getDerivedStateFromProps</span><br><span class="line">2.shouldComponentUpdate()</span><br><span class="line">3.render()</span><br><span class="line">4.getSnapshotBeforeUpdate</span><br><span class="line">5.componentDidUpdate()</span><br><span class="line">3. 卸载组件: 由ReactDOM.unmountComponentAtNode()触发</span><br><span class="line">1.componentWillUnmount()  =====&gt; 常用</span><br><span class="line">一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息</span><br><span class="line">*/</span><br><span class="line">//构造器</span><br><span class="line">constructor(props)&#123;</span><br><span class="line">console.log(&apos;Count---constructor&apos;);</span><br><span class="line">super(props)</span><br><span class="line">//初始化状态</span><br><span class="line">this.state = &#123;count:0&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//加1按钮的回调</span><br><span class="line">add = ()=&gt;&#123;</span><br><span class="line">//获取原状态</span><br><span class="line">const &#123;count&#125; = this.state</span><br><span class="line">//更新状态</span><br><span class="line">this.setState(&#123;count:count+1&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//卸载组件按钮的回调</span><br><span class="line">death = ()=&gt;&#123;</span><br><span class="line">ReactDOM.unmountComponentAtNode(document.getElementById(&apos;test&apos;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//强制更新按钮的回调</span><br><span class="line">force = ()=&gt;&#123;</span><br><span class="line">this.forceUpdate()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//若state的值在任何时候都取决于props，那么可以使用getDerivedStateFromProps</span><br><span class="line">static getDerivedStateFromProps(props,state)&#123;</span><br><span class="line">console.log(&apos;getDerivedStateFromProps&apos;,props,state);</span><br><span class="line">return null</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//在更新之前获取快照</span><br><span class="line">getSnapshotBeforeUpdate()&#123;</span><br><span class="line">console.log(&apos;getSnapshotBeforeUpdate&apos;);</span><br><span class="line">return &apos;atguigu&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//组件挂载完毕的钩子</span><br><span class="line">componentDidMount()&#123;</span><br><span class="line">console.log(&apos;Count---componentDidMount&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//组件将要卸载的钩子</span><br><span class="line">componentWillUnmount()&#123;</span><br><span class="line">console.log(&apos;Count---componentWillUnmount&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//控制组件更新的“阀门”</span><br><span class="line">shouldComponentUpdate()&#123;</span><br><span class="line">console.log(&apos;Count---shouldComponentUpdate&apos;);</span><br><span class="line">return true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//组件更新完毕的钩子</span><br><span class="line">componentDidUpdate(preProps,preState,snapshotValue)&#123;</span><br><span class="line">console.log(&apos;Count---componentDidUpdate&apos;,preProps,preState,snapshotValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render()&#123;</span><br><span class="line">console.log(&apos;Count---render&apos;);</span><br><span class="line">const &#123;count&#125; = this.state</span><br><span class="line">return(</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h2&gt;当前求和为：&#123;count&#125;&lt;/h2&gt;</span><br><span class="line">&lt;button onClick=&#123;this.add&#125;&gt;点我+1&lt;/button&gt;</span><br><span class="line">&lt;button onClick=&#123;this.death&#125;&gt;卸载组件&lt;/button&gt;</span><br><span class="line">&lt;button onClick=&#123;this.force&#125;&gt;不更改任何状态中的数据，强制更新一下&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//渲染组件</span><br><span class="line">ReactDOM.render(&lt;Count count=&#123;199&#125;/&gt;,document.getElementById(&apos;test&apos;))</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="key的作用"><a href="#key的作用" class="headerlink" title="key的作用"></a>key的作用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;key的作用&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;test&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;!-- 引入react核心库 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 引入react-dom --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 引入babel --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">/*</span><br><span class="line">   经典面试题:</span><br><span class="line">      1). react/vue中的key有什么作用？（key的内部原理是什么？）</span><br><span class="line">      2). 为什么遍历列表时，key最好不要用index?</span><br><span class="line">      </span><br><span class="line">1. 虚拟DOM中key的作用：</span><br><span class="line">1). 简单的说: key是虚拟DOM对象的标识, 在更新显示时key起着极其重要的作用。</span><br><span class="line"></span><br><span class="line">2). 详细的说: 当状态中的数据发生变化时，react会根据【新数据】生成【新的虚拟DOM】, </span><br><span class="line">随后React进行【新虚拟DOM】与【旧虚拟DOM】的diff比较，比较规则如下：</span><br><span class="line"></span><br><span class="line">a. 旧虚拟DOM中找到了与新虚拟DOM相同的key：</span><br><span class="line">(1).若虚拟DOM中内容没变, 直接使用之前的真实DOM</span><br><span class="line">(2).若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM</span><br><span class="line"></span><br><span class="line">b. 旧虚拟DOM中未找到与新虚拟DOM相同的key</span><br><span class="line">根据数据创建新的真实DOM，随后渲染到到页面</span><br><span class="line"></span><br><span class="line">2. 用index作为key可能会引发的问题：</span><br><span class="line">1. 若对数据进行：逆序添加、逆序删除等破坏顺序操作:</span><br><span class="line">会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题, 但效率低。</span><br><span class="line"></span><br><span class="line">2. 如果结构中还包含输入类的DOM：</span><br><span class="line">会产生错误DOM更新 ==&gt; 界面有问题。</span><br><span class="line"></span><br><span class="line">3. 注意！如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，</span><br><span class="line">仅用于渲染列表用于展示，使用index作为key是没有问题的。</span><br><span class="line"></span><br><span class="line">3. 开发中如何选择key?:</span><br><span class="line">1.最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。</span><br><span class="line">2.如果确定只是简单的展示数据，用index也是可以的。</span><br><span class="line">   */</span><br><span class="line"></span><br><span class="line">/* </span><br><span class="line">慢动作回放----使用index索引值作为key</span><br><span class="line"></span><br><span class="line">初始数据：</span><br><span class="line">&#123;id:1,name:&apos;小张&apos;,age:18&#125;,</span><br><span class="line">&#123;id:2,name:&apos;小李&apos;,age:19&#125;,</span><br><span class="line">初始的虚拟DOM：</span><br><span class="line">&lt;li key=0&gt;小张---18&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class="line">&lt;li key=1&gt;小李---19&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">更新后的数据：</span><br><span class="line">&#123;id:3,name:&apos;小王&apos;,age:20&#125;,</span><br><span class="line">&#123;id:1,name:&apos;小张&apos;,age:18&#125;,</span><br><span class="line">&#123;id:2,name:&apos;小李&apos;,age:19&#125;,</span><br><span class="line">更新数据后的虚拟DOM：</span><br><span class="line">&lt;li key=0&gt;小王---20&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class="line">&lt;li key=1&gt;小张---18&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class="line">&lt;li key=2&gt;小李---19&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">慢动作回放----使用id唯一标识作为key</span><br><span class="line"></span><br><span class="line">初始数据：</span><br><span class="line">&#123;id:1,name:&apos;小张&apos;,age:18&#125;,</span><br><span class="line">&#123;id:2,name:&apos;小李&apos;,age:19&#125;,</span><br><span class="line">初始的虚拟DOM：</span><br><span class="line">&lt;li key=1&gt;小张---18&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class="line">&lt;li key=2&gt;小李---19&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">更新后的数据：</span><br><span class="line">&#123;id:3,name:&apos;小王&apos;,age:20&#125;,</span><br><span class="line">&#123;id:1,name:&apos;小张&apos;,age:18&#125;,</span><br><span class="line">&#123;id:2,name:&apos;小李&apos;,age:19&#125;,</span><br><span class="line">更新数据后的虚拟DOM：</span><br><span class="line">&lt;li key=3&gt;小王---20&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class="line">&lt;li key=1&gt;小张---18&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class="line">&lt;li key=2&gt;小李---19&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line">class Person extends React.Component&#123;</span><br><span class="line"></span><br><span class="line">state = &#123;</span><br><span class="line">persons:[</span><br><span class="line">&#123;id:1,name:&apos;小张&apos;,age:18&#125;,</span><br><span class="line">&#123;id:2,name:&apos;小李&apos;,age:19&#125;,</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add = ()=&gt;&#123;</span><br><span class="line">const &#123;persons&#125; = this.state</span><br><span class="line">const p = &#123;id:persons.length+1,name:&apos;小王&apos;,age:20&#125;</span><br><span class="line">this.setState(&#123;persons:[p,...persons]&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render()&#123;</span><br><span class="line">return (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h2&gt;展示人员信息&lt;/h2&gt;</span><br><span class="line">&lt;button onClick=&#123;this.add&#125;&gt;添加一个小王&lt;/button&gt;</span><br><span class="line">&lt;h3&gt;使用index（索引值）作为key&lt;/h3&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&#123;</span><br><span class="line">this.state.persons.map((personObj,index)=&gt;&#123;</span><br><span class="line">return &lt;li key=&#123;index&#125;&gt;&#123;personObj.name&#125;---&#123;personObj.age&#125;&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;h3&gt;使用id（数据的唯一标识）作为key&lt;/h3&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&#123;</span><br><span class="line">this.state.persons.map((personObj)=&gt;&#123;</span><br><span class="line">return &lt;li key=&#123;personObj.id&#125;&gt;&#123;personObj.name&#125;---&#123;personObj.age&#125;&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Person/&gt;,document.getElementById(&apos;test&apos;))</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="todoList案例相关知识点"><a href="#todoList案例相关知识点" class="headerlink" title="todoList案例相关知识点"></a>todoList案例相关知识点</h2><ul><li><p>1.拆分组件、实现静态组件，注意：className、style的写法</p></li><li><p>2.动态初始化列表，如何确定将数据放在哪个组件的state中？</p><pre><code>——某个组件使用：放在其自身的state中——某些组件使用：放在他们共同的父组件state中（官方称此操作为：状态提升）</code></pre></li><li><p>3.关于父子之间通信：</p><pre><code>1.【父组件】给【子组件】传递数据：通过props传递2.【子组件】给【父组件】传递数据：通过props传递，要求父提前给子传递一个函数</code></pre><p>4.注意defaultChecked 和 checked的区别，类似的还有：defaultValue 和 value</p><p>5.状态在哪里，操作状态的方法就在哪里</p></li></ul><h2 id="二、github搜索案例相关知识点"><a href="#二、github搜索案例相关知识点" class="headerlink" title="二、github搜索案例相关知识点"></a>二、github搜索案例相关知识点</h2><ul><li><p>1.设计状态时要考虑全面，例如带有网络请求的组件，要考虑请求失败怎么办。</p></li><li><p>2.ES6小知识点：解构赋值+重命名</p></li></ul><p>​          let obj = {a:{b:1}}</p><p>​          const {a} = obj; //传统解构赋值</p><p>​          const {a:{b}} = obj; //连续解构赋值</p><p>​          const {a:{b:value}} = obj; //连续解构赋值+重命名</p><ul><li>3.消息订阅与发布机制</li></ul><p>​          1.先订阅，再发布（理解：有一种隔空对话的感觉）</p><p>​          2.适用于任意组件间通信</p><p>​          3.要在组件的componentWillUnmount中取消订阅</p><ul><li>4.fetch发送请求（关注分离的设计思想）</li></ul><p>​          try {</p><p>​            const response= await fetch(<code>/api1/search/users2?q=${keyWord}</code>)</p><p>​            const data = await response.json()</p><p>​            console.log(data);</p><p>​          } catch (error) {</p><p>​            console.log(‘请求出错’,error);</p><p>​          }</p><p>​        </p><h2 id="三、路由的基本使用"><a href="#三、路由的基本使用" class="headerlink" title="三、路由的基本使用"></a>三、路由的基本使用</h2><ul><li><p>1.明确好界面中的导航区、展示区</p></li><li><p>2.导航区的a标签改为Link标签</p></li></ul><p>​            <link to="/xxxxx">Demo</p><ul><li>3.展示区写Route标签进行路径的匹配</li></ul><p>​            <route path="/xxxx" component="{Demo}/"></route></p><ul><li>4.<app>的最外侧包裹了一个<browserrouter>或<hashrouter></hashrouter></browserrouter></app></li></ul><h2 id="四、路由组件与一般组件"><a href="#四、路由组件与一般组件" class="headerlink" title="四、路由组件与一般组件"></a>四、路由组件与一般组件</h2><p>1.写法不同：</p><p>​            一般组件：<demo></demo></p><p>​            路由组件：<route path="/demo" component="{Demo}/"></route></p><p>​      2.存放位置不同：</p><p>​            一般组件：components</p><p>​            路由组件：pages</p><p>​      3.接收到的props不同：</p><p>​            一般组件：写组件标签时传递了什么，就能收到什么</p><p>​            路由组件：接收到三个固定的属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">​                     history:</span><br><span class="line"></span><br><span class="line">​                            go: ƒ go(n)</span><br><span class="line"></span><br><span class="line">​                            goBack: ƒ goBack()</span><br><span class="line"></span><br><span class="line">​                            goForward: ƒ goForward()</span><br><span class="line"></span><br><span class="line">​                            push: ƒ push(path, state)</span><br><span class="line"></span><br><span class="line">​                            replace: ƒ replace(path, state)</span><br><span class="line"></span><br><span class="line">​                      location:</span><br><span class="line"></span><br><span class="line">​                            pathname: &quot;/about&quot;</span><br><span class="line"></span><br><span class="line">​                            search: &quot;&quot;</span><br><span class="line"></span><br><span class="line">​                            state: undefined</span><br><span class="line"></span><br><span class="line">​                      match:</span><br><span class="line"></span><br><span class="line">​                            params: &#123;&#125;</span><br><span class="line"></span><br><span class="line">​                            path: &quot;/about&quot;</span><br><span class="line"></span><br><span class="line">​                            url: &quot;/about&quot;</span><br></pre></td></tr></table></figure><h2 id="五、NavLink与封装NavLink"><a href="#五、NavLink与封装NavLink" class="headerlink" title="五、NavLink与封装NavLink"></a>五、NavLink与封装NavLink</h2><p>​        1. NavLink可以实现路由链接的高亮，通过activeClassName指定样式名</p><h2 id="六、Switch的使用"><a href="#六、Switch的使用" class="headerlink" title="六、Switch的使用"></a>六、Switch的使用</h2><p>​        1.通常情况下，path和component是一一对应的关系。</p><p>​        2.Switch可以提高路由匹配效率(单一匹配)。</p><h2 id="七、解决多级路径刷新页面样式丢失的问题"><a href="#七、解决多级路径刷新页面样式丢失的问题" class="headerlink" title="七、解决多级路径刷新页面样式丢失的问题"></a>七、解决多级路径刷新页面样式丢失的问题</h2><p>​        1.public/index.html 中 引入样式时不写 ./ 写 / （常用）</p><p>​        2.public/index.html 中 引入样式时不写 ./ 写 %PUBLIC_URL% （常用）</p><p>​        3.使用HashRouter</p><h2 id="八、路由的严格匹配与模糊匹配"><a href="#八、路由的严格匹配与模糊匹配" class="headerlink" title="八、路由的严格匹配与模糊匹配"></a>八、路由的严格匹配与模糊匹配</h2><p>​        1.默认使用的是模糊匹配（简单记：【输入的路径】必须包含要【匹配的路径】，且顺序要一致）</p><p>​        2.开启严格匹配：<route exact="{true}" path="/about" component="{About}/"></route></p><p>​        3.严格匹配不要随便开启，需要再开，有些时候开启会导致无法继续匹配二级路由</p><h2 id="九、Redirect的使用"><a href="#九、Redirect的使用" class="headerlink" title="九、Redirect的使用"></a>九、Redirect的使用</h2><p>​        1.一般写在所有路由注册的最下方，当所有路由都无法匹配时，跳转到Redirect指定的路由</p><p>​        2.具体编码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">​            &lt;Switch&gt;</span><br><span class="line"></span><br><span class="line">​              &lt;Route path=&quot;/about&quot; component=&#123;About&#125;/&gt;</span><br><span class="line"></span><br><span class="line">​              &lt;Route path=&quot;/home&quot; component=&#123;Home&#125;/&gt;</span><br><span class="line"></span><br><span class="line">​              &lt;Redirect to=&quot;/about&quot;/&gt;</span><br><span class="line"></span><br><span class="line">​            &lt;/Switch&gt;</span><br></pre></td></tr></table></figure><h2 id="十、嵌套路由"><a href="#十、嵌套路由" class="headerlink" title="十、嵌套路由"></a>十、嵌套路由</h2><p>​        1.注册子路由时要写上父路由的path值</p><p>​        2.路由的匹配是按照注册路由的顺序进行的</p><h2 id="十一、向路由组件传递参数"><a href="#十一、向路由组件传递参数" class="headerlink" title="十一、向路由组件传递参数"></a>十一、向路由组件传递参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">​        1.params参数</span><br><span class="line"></span><br><span class="line">​              路由链接(携带参数)：&lt;Link to=&apos;/demo/test/tom/18&apos;&#125;&gt;详情&lt;/Link&gt;</span><br><span class="line"></span><br><span class="line">​              注册路由(声明接收)：&lt;Route path=&quot;/demo/test/:name/:age&quot; component=&#123;Test&#125;/&gt;</span><br><span class="line"></span><br><span class="line">​              接收参数：this.props.match.params</span><br><span class="line"></span><br><span class="line">​        2.search参数</span><br><span class="line"></span><br><span class="line">​              路由链接(携带参数)：&lt;Link to=&apos;/demo/test?name=tom&amp;age=18&apos;&#125;&gt;详情&lt;/Link&gt;</span><br><span class="line"></span><br><span class="line">​              注册路由(无需声明，正常注册即可)：&lt;Route path=&quot;/demo/test&quot; component=&#123;Test&#125;/&gt;</span><br><span class="line"></span><br><span class="line">​              接收参数：this.props.location.search</span><br><span class="line"></span><br><span class="line">​              备注：获取到的search是urlencoded编码字符串，需要借助querystring解析</span><br><span class="line"></span><br><span class="line">​        3.state参数</span><br><span class="line"></span><br><span class="line">​              路由链接(携带参数)：&lt;Link to=&#123;&#123;pathname:&apos;/demo/test&apos;,state:&#123;name:&apos;tom&apos;,age:18&#125;&#125;&#125;&gt;详情&lt;/Link&gt;</span><br><span class="line"></span><br><span class="line">​              注册路由(无需声明，正常注册即可)：&lt;Route path=&quot;/demo/test&quot; component=&#123;Test&#125;/&gt;</span><br><span class="line"></span><br><span class="line">​              接收参数：this.props.location.state</span><br><span class="line"></span><br><span class="line">​              备注：刷新也可以保留住参数</span><br></pre></td></tr></table></figure><p>​        </p><h2 id="十二、编程式路由导航"><a href="#十二、编程式路由导航" class="headerlink" title="十二、编程式路由导航"></a>十二、编程式路由导航</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">​          借助this.prosp.history对象上的API对操作路由跳转、前进、后退</span><br><span class="line"></span><br><span class="line">​              -this.prosp.history.push()</span><br><span class="line"></span><br><span class="line">​              -this.prosp.history.replace()</span><br><span class="line"></span><br><span class="line">​              -this.prosp.history.goBack()</span><br><span class="line"></span><br><span class="line">​              -this.prosp.history.goForward()</span><br><span class="line"></span><br><span class="line">​              -this.prosp.history.go()</span><br></pre></td></tr></table></figure><h2 id="十三、BrowserRouter与HashRouter的区别"><a href="#十三、BrowserRouter与HashRouter的区别" class="headerlink" title="十三、BrowserRouter与HashRouter的区别"></a>十三、BrowserRouter与HashRouter的区别</h2><p>​      1.底层原理不一样：</p><p>​            BrowserRouter使用的是H5的history API，不兼容IE9及以下版本。</p><p>​            HashRouter使用的是URL的哈希值。</p><p>​      2.path表现形式不一样</p><p>​            BrowserRouter的路径中没有#,例如：localhost:3000/demo/test</p><p>​            HashRouter的路径包含#,例如：localhost:3000/#/demo/test</p><p>​      3.刷新后对路由state参数的影响</p><p>​            (1).BrowserRouter没有任何影响，因为state保存在history对象中。</p><p>​            (2).HashRouter刷新后会导致路由state参数的丢失！！！</p><p>​      4.备注：HashRouter可以用于解决一些路径错误相关的问题。</p><h2 id="十四、antd的按需引入-自定主题"><a href="#十四、antd的按需引入-自定主题" class="headerlink" title="十四、antd的按需引入+自定主题"></a>十四、antd的按需引入+自定主题</h2><ul><li><p>1.安装依赖：yarn add react-app-rewired customize-cra babel-plugin-import less less-loader</p></li><li><p>2.修改package.json</p></li></ul><p>​          ….</p><p>​            “scripts”: {</p><p>​              “start”: “react-app-rewired start”,</p><p>​              “build”: “react-app-rewired build”,</p><p>​              “test”: “react-app-rewired test”,</p><p>​              “eject”: “react-scripts eject”</p><p>​            },</p><p>​          ….</p><ul><li>3.根目录下创建config-overrides.js</li></ul><p>​         //配置具体的修改规则</p><p>​          const { override, fixBabelImports,addLessLoader} = require(‘customize-cra’);</p><p>​          module.exports = override(</p><p>​            fixBabelImports(‘import’, {</p><p>​              libraryName: ‘antd’,</p><p>​              libraryDirectory: ‘es’,</p><p>​              style: true,</p><p>​            }),</p><p>​            addLessLoader({</p><p>​              lessOptions:{</p><p>​                javascriptEnabled: true,</p><p>​                modifyVars: { ‘@primary-color’: ‘green’ },</p><p>​              }</p><p>​            }),</p><p>​          );</p><p>​     </p><p>   4.备注：不用在组件里亲自引入样式了，即：import ‘antd/dist/antd.css’应该删掉</p><h2 id="1-求和案例-redux精简版"><a href="#1-求和案例-redux精简版" class="headerlink" title="1.求和案例_redux精简版"></a>1.求和案例_redux精简版</h2><p>​    (1).去除Count组件自身的状态</p><p>​    (2).src下建立:</p><p>​            -redux</p><p>​              -store.js</p><p>​              -count_reducer.js</p><p>​    (3).store.js：</p><p>​          1).引入redux中的createStore函数，创建一个store</p><p>​          2).createStore调用时要传入一个为其服务的reducer</p><p>​          3).记得暴露store对象</p><p>​    (4).count_reducer.js：</p><p>​          1).reducer的本质是一个函数，接收：preState,action，返回加工后的状态</p><p>​          2).reducer有两个作用：初始化状态，加工状态</p><p>​          3).reducer被第一次调用时，是store自动触发的，</p><p>​                  传递的preState是undefined,</p><p>​                  传递的action是:{type:‘@@REDUX/INIT_a.2.b.4}</p><p>​    (5).在index.js中监测store中状态的改变，一旦发生改变重新渲染<app></app></p><p>​        备注：redux只负责管理状态，至于状态的改变驱动着页面的展示，要靠我们自己写。</p><h2 id="2-求和案例-redux完整版"><a href="#2-求和案例-redux完整版" class="headerlink" title="2.求和案例_redux完整版"></a>2.求和案例_redux完整版</h2><p>​    新增文件：</p><p>​      1.count_action.js 专门用于创建action对象</p><p>​      2.constant.js 放置容易写错的type值</p><h2 id="3-求和案例-redux异步action版"><a href="#3-求和案例-redux异步action版" class="headerlink" title="3.求和案例_redux异步action版"></a>3.求和案例_redux异步action版</h2><p>​     (1).明确：延迟的动作不想交给组件自身，想交给action</p><p>​     (2).何时需要异步action：想要对状态进行操作，但是具体的数据靠异步任务返回。</p><p>​     (3).具体编码：</p><p>​          1).yarn add redux-thunk，并配置在store中</p><p>​          2).创建action的函数不再返回一般对象，而是一个函数，该函数中写异步任务。</p><p>​          3).异步任务有结果后，分发一个同步的action去真正操作数据。</p><p>​     (4).备注：异步action不是必须要写的，完全可以自己等待异步任务的结果了再去分发同步action。</p><h2 id="4-求和案例-react-redux基本使用"><a href="#4-求和案例-react-redux基本使用" class="headerlink" title="4.求和案例_react-redux基本使用"></a>4.求和案例_react-redux基本使用</h2><p>​      (1).明确两个概念：</p><p>​            1).UI组件:不能使用任何redux的api，只负责页面的呈现、交互等。</p><p>​            2).容器组件：负责和redux通信，将结果交给UI组件。</p><p>​      (2).如何创建一个容器组件————靠react-redux 的 connect函数</p><p>​              connect(mapStateToProps,mapDispatchToProps)(UI组件)</p><p>​                -mapStateToProps:映射状态，返回值是一个对象</p><p>​                -mapDispatchToProps:映射操作状态的方法，返回值是一个对象</p><p>​      (3).备注1：容器组件中的store是靠props传进去的，而不是在容器组件中直接引入</p><p>​      (4).备注2：mapDispatchToProps，也可以是一个对象</p><h2 id="5-求和案例-react-redux优化"><a href="#5-求和案例-react-redux优化" class="headerlink" title="5.求和案例_react-redux优化"></a>5.求和案例_react-redux优化</h2><p>​      (1).容器组件和UI组件整合一个文件</p><p>​      (2).无需自己给容器组件传递store，给<app>包裹一个<provider store="{store}">即可。</provider></app></p><p>​      (3).使用了react-redux后也不用再自己检测redux中状态的改变了，容器组件可以自动完成这个工作。</p><p>​      (4).mapDispatchToProps也可以简单的写成一个对象</p><p>​      (5).一个组件要和redux“打交道”要经过哪几步？</p><p>​              (1).定义好UI组件—不暴露</p><p>​              (2).引入connect生成一个容器组件，并暴露，写法如下：</p><p>​                  connect(</p><p>​                    state =&gt; ({key:value}), //映射状态</p><p>​                    {key:xxxxxAction} //映射操作状态的方法</p><p>​                  )(UI组件)</p><p>​              (4).在UI组件中通过this.props.xxxxxxx读取和操作状态</p><h2 id="6-求和案例-react-redux数据共享版"><a href="#6-求和案例-react-redux数据共享版" class="headerlink" title="6.求和案例_react-redux数据共享版"></a>6.求和案例_react-redux数据共享版</h2><p>​      (1).定义一个Pserson组件，和Count组件通过redux共享数据。</p><p>​      (2).为Person组件编写：reducer、action，配置constant常量。</p><p>​      (3).重点：Person的reducer和Count的Reducer要使用combineReducers进行合并，</p><p>​          合并后的总状态是一个对象！！！</p><p>​      (4).交给store的是总reducer，最后注意在组件中取出状态的时候，记得“取到位”。</p><h2 id="7-求和案例-react-redux开发者工具的使用"><a href="#7-求和案例-react-redux开发者工具的使用" class="headerlink" title="7.求和案例_react-redux开发者工具的使用"></a>7.求和案例_react-redux开发者工具的使用</h2><p>​      (1).yarn add redux-devtools-extension</p><p>​      (2).store中进行配置</p><p>​          import {composeWithDevTools} from ‘redux-devtools-extension’</p><p>​          const store = createStore(allReducer,composeWithDevTools(applyMiddleware(thunk)))</p><h2 id="8-求和案例-react-redux最终版"><a href="#8-求和案例-react-redux最终版" class="headerlink" title="8.求和案例_react-redux最终版"></a>8.求和案例_react-redux最终版</h2><p>​      (1).所有变量名字要规范，尽量触发对象的简写形式。</p><p>​      (2).reducers文件夹中，编写index.js专门用于汇总并暴露所有的reducer</p><h2 id="1-setState"><a href="#1-setState" class="headerlink" title="1. setState"></a>1. setState</h2><h3 id="setState更新状态的2种写法"><a href="#setState更新状态的2种写法" class="headerlink" title="setState更新状态的2种写法"></a>setState更新状态的2种写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(1). setState(stateChange, [callback])------对象式的setState</span><br><span class="line">            1.stateChange为状态改变对象(该对象可以体现出状态的更改)</span><br><span class="line">            2.callback是可选的回调函数, 它在状态更新完毕、界面也更新后(render调用后)才被调用</span><br><span class="line"></span><br><span class="line">(2). setState(updater, [callback])------函数式的setState</span><br><span class="line">            1.updater为返回stateChange对象的函数。</span><br><span class="line">            2.updater可以接收到state和props。</span><br><span class="line">            4.callback是可选的回调函数, 它在状态更新、界面也更新后(render调用后)才被调用。</span><br><span class="line">总结:</span><br><span class="line">1.对象式的setState是函数式的setState的简写方式(语法糖)</span><br><span class="line">2.使用原则：</span><br><span class="line">(1).如果新状态不依赖于原状态 ===&gt; 使用对象方式</span><br><span class="line">(2).如果新状态依赖于原状态 ===&gt; 使用函数方式</span><br><span class="line">(3).如果需要在setState()执行后获取最新的状态数据, </span><br><span class="line">要在第二个callback函数中读取</span><br></pre></td></tr></table></figure><hr><h2 id="2-lazyLoad"><a href="#2-lazyLoad" class="headerlink" title="2. lazyLoad"></a>2. lazyLoad</h2><h3 id="路由组件的lazyLoad"><a href="#路由组件的lazyLoad" class="headerlink" title="路由组件的lazyLoad"></a>路由组件的lazyLoad</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.通过React的lazy函数配合import()函数动态加载路由组件 ===&gt; 路由组件代码会被分开打包</span></span><br><span class="line"><span class="keyword">const</span> Login = lazy(<span class="function"><span class="params">()</span>=&gt;</span><span class="keyword">import</span>(<span class="string">'@/pages/Login'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.通过&lt;Suspense&gt;指定在加载得到路由打包文件前显示一个自定义loading界面</span></span><br><span class="line">&lt;Suspense fallback=&#123;&lt;h1&gt;loading.....&lt;<span class="regexp">/h1&gt;&#125;&gt;</span></span><br><span class="line"><span class="regexp">       &lt;Switch&gt;</span></span><br><span class="line"><span class="regexp">           &lt;Route path="/</span>xxx<span class="string">" component=&#123;Xxxx&#125;/&gt;</span></span><br><span class="line"><span class="string">           &lt;Redirect to="</span>/login<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">       &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">   &lt;/Suspense&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-Hooks"><a href="#3-Hooks" class="headerlink" title="3. Hooks"></a>3. Hooks</h2><h4 id="1-React-Hook-Hooks是什么"><a href="#1-React-Hook-Hooks是什么" class="headerlink" title="1. React Hook/Hooks是什么?"></a>1. React Hook/Hooks是什么?</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(1). Hook是React 16.8.0版本增加的新特性/新语法</span><br><span class="line">(2). 可以让你在函数组件中使用 state 以及其他的 React 特性</span><br></pre></td></tr></table></figure><h4 id="2-三个常用的Hook"><a href="#2-三个常用的Hook" class="headerlink" title="2. 三个常用的Hook"></a>2. 三个常用的Hook</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1). State Hook: React.useState()</span><br><span class="line">(2). Effect Hook: React.useEffect()</span><br><span class="line">(3). Ref Hook: React.useRef()</span><br></pre></td></tr></table></figure><h4 id="3-State-Hook"><a href="#3-State-Hook" class="headerlink" title="3. State Hook"></a>3. State Hook</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(1). State Hook让函数组件也可以有state状态, 并进行状态数据的读写操作</span><br><span class="line">(2). 语法: const [xxx, setXxx] = React.useState(initValue)  </span><br><span class="line">(3). useState()说明:</span><br><span class="line">        参数: 第一次初始化指定的值在内部作缓存</span><br><span class="line">        返回值: 包含2个元素的数组, 第1个为内部当前状态值, 第2个为更新状态值的函数</span><br><span class="line">(4). setXxx()2种写法:</span><br><span class="line">        setXxx(newValue): 参数为非函数值, 直接指定新的状态值, 内部用其覆盖原来的状态值</span><br><span class="line">        setXxx(value =&gt; newValue): 参数为函数, 接收原本的状态值, 返回新的状态值, 内部用其覆盖原来的状态值</span><br></pre></td></tr></table></figure><h4 id="4-Effect-Hook"><a href="#4-Effect-Hook" class="headerlink" title="4. Effect Hook"></a>4. Effect Hook</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(1). Effect Hook 可以让你在函数组件中执行副作用操作(用于模拟类组件中的生命周期钩子)</span><br><span class="line">(2). React中的副作用操作:</span><br><span class="line">        发ajax请求数据获取</span><br><span class="line">        设置订阅 / 启动定时器</span><br><span class="line">        手动更改真实DOM</span><br><span class="line">(3). 语法和说明: </span><br><span class="line">        useEffect(() =&gt; &#123; </span><br><span class="line">          // 在此可以执行任何带副作用操作</span><br><span class="line">          return () =&gt; &#123; // 在组件卸载前执行</span><br><span class="line">            // 在此做一些收尾工作, 比如清除定时器/取消订阅等</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, [stateValue]) // 如果指定的是[], 回调函数只会在第一次render()后执行</span><br><span class="line">    </span><br><span class="line">(4). 可以把 useEffect Hook 看做如下三个函数的组合</span><br><span class="line">        componentDidMount()</span><br><span class="line">        componentDidUpdate()</span><br><span class="line">    componentWillUnmount()</span><br></pre></td></tr></table></figure><h4 id="5-Ref-Hook"><a href="#5-Ref-Hook" class="headerlink" title="5. Ref Hook"></a>5. Ref Hook</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1). Ref Hook可以在函数组件中存储/查找组件内的标签或任意其它数据</span><br><span class="line">(2). 语法: const refContainer = useRef()</span><br><span class="line">(3). 作用:保存标签对象,功能与React.createRef()一样</span><br></pre></td></tr></table></figure><hr><h2 id="4-Fragment"><a href="#4-Fragment" class="headerlink" title="4. Fragment"></a>4. Fragment</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre><code>&lt;Fragment&gt;&lt;Fragment&gt;&lt;&gt;&lt;/&gt;</code></pre><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><blockquote><p>可以不用必须有一个真实的DOM根标签了</p></blockquote><hr><h2 id="5-Context"><a href="#5-Context" class="headerlink" title="5. Context"></a>5. Context</h2><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><blockquote><p>一种组件间通信方式, 常用于【祖组件】与【后代组件】间通信</p></blockquote><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) 创建Context容器对象：</span><br><span class="line"><span class="keyword">const</span> XxxContext = React.createContext()  </span><br><span class="line"></span><br><span class="line"><span class="number">2</span>) 渲染子组时，外面包裹xxxContext.Provider, 通过value属性给后代组件传递数据：</span><br><span class="line">&lt;xxxContext.Provider value=&#123;数据&#125;&gt;</span><br><span class="line">子组件</span><br><span class="line">    &lt;<span class="regexp">/xxxContext.Provider&gt;</span></span><br><span class="line"><span class="regexp">    </span></span><br><span class="line"><span class="regexp">3) 后代组件读取数据：</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/第一种方式:仅适用于类组件 </span></span><br><span class="line"><span class="regexp">  static contextType = xxxContext  /</span><span class="regexp">/ 声明接收context</span></span><br><span class="line"><span class="regexp">  this.context /</span><span class="regexp">/ 读取context中的value数据</span></span><br><span class="line"><span class="regexp">  </span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/第二种方式: 函数组件与类组件都可以</span></span><br><span class="line"><span class="regexp">  &lt;xxxContext.Consumer&gt;</span></span><br><span class="line"><span class="regexp">    &#123;</span></span><br><span class="line"><span class="regexp">      value =&gt; ( /</span><span class="regexp">/ value就是context中的value数据</span></span><br><span class="line"><span class="regexp">        要显示的内容</span></span><br><span class="line"><span class="regexp">      )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>xxxContext.Consumer&gt;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><pre><code>在应用开发中一般不用context, 一般都它的封装react插件</code></pre><hr><h2 id="6-组件优化"><a href="#6-组件优化" class="headerlink" title="6. 组件优化"></a>6. 组件优化</h2><h3 id="Component的2个问题"><a href="#Component的2个问题" class="headerlink" title="Component的2个问题"></a>Component的2个问题</h3><blockquote><ol><li><p>只要执行setState(),即使不改变状态数据, 组件也会重新render()</p></li><li><p>只当前组件重新render(), 就会自动重新render子组件 ==&gt; 效率低</p></li></ol></blockquote><h3 id="效率高的做法"><a href="#效率高的做法" class="headerlink" title="效率高的做法"></a>效率高的做法</h3><blockquote><p> 只有当组件的state或props数据发生改变时才重新render()</p></blockquote><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><blockquote><p> Component中的shouldComponentUpdate()总是返回true</p></blockquote><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><pre><code>办法1:     重写shouldComponentUpdate()方法    比较新旧state或props数据, 如果有变化才返回true, 如果没有返回false办法2:      使用PureComponent    PureComponent重写了shouldComponentUpdate(), 只有state或props数据有变化才返回true    注意:         只是进行state和props数据的浅比较, 如果只是数据对象内部数据变了, 返回false          不要直接修改state数据, 而是要产生新数据项目中一般使用PureComponent来优化</code></pre><hr><h2 id="7-render-props"><a href="#7-render-props" class="headerlink" title="7. render props"></a>7. render props</h2><h3 id="如何向组件内部动态传入带内容的结构-标签"><a href="#如何向组件内部动态传入带内容的结构-标签" class="headerlink" title="如何向组件内部动态传入带内容的结构(标签)?"></a>如何向组件内部动态传入带内容的结构(标签)?</h3><pre><code>Vue中:     使用slot技术, 也就是通过组件标签体传入结构  &lt;AA&gt;&lt;BB/&gt;&lt;/AA&gt;React中:    使用children props: 通过组件标签体传入结构    使用render props: 通过组件标签属性传入结构, 一般用render函数属性</code></pre><h3 id="children-props"><a href="#children-props" class="headerlink" title="children props"></a>children props</h3><pre><code>&lt;A&gt;  &lt;B&gt;xxxx&lt;/B&gt;&lt;/A&gt;{this.props.children}问题: 如果B组件需要A组件内的数据, ==&gt; 做不到 </code></pre><h3 id="render-props"><a href="#render-props" class="headerlink" title="render props"></a>render props</h3><pre><code>&lt;A render={(data) =&gt; &lt;C data={data}&gt;&lt;/C&gt;}&gt;&lt;/A&gt;A组件: {this.props.render(内部state数据)}C组件: 读取A组件传入的数据显示 {this.props.data} </code></pre><hr><h2 id="8-错误边界"><a href="#8-错误边界" class="headerlink" title="8. 错误边界"></a>8. 错误边界</h2><h4 id="理解："><a href="#理解：" class="headerlink" title="理解："></a>理解：</h4><p>错误边界：用来捕获后代组件错误，渲染出备用页面</p><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><p>只能捕获后代组件生命周期产生的错误，不能捕获自己组件产生的错误和其他组件在合成事件、定时器中产生的错误</p><h5 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h5><p>getDerivedStateFromError配合componentDidCatch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生命周期函数，一旦后台组件报错，就会触发</span></span><br><span class="line"><span class="keyword">static</span> getDerivedStateFromError(error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">    <span class="comment">// 在render之前触发</span></span><br><span class="line">    <span class="comment">// 返回新的state</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        hasError: <span class="literal">true</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">componentDidCatch(error, info) &#123;</span><br><span class="line">    <span class="comment">// 统计页面的错误。发送请求发送到后台去</span></span><br><span class="line">    <span class="built_in">console</span>.log(error, info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-组件通信方式总结"><a href="#9-组件通信方式总结" class="headerlink" title="9. 组件通信方式总结"></a>9. 组件通信方式总结</h2><h4 id="方式："><a href="#方式：" class="headerlink" title="方式："></a>方式：</h4><pre><code>props：    (1).children props    (2).render props消息订阅-发布：    pubs-sub、event等等集中式管理：    redux、dva等等conText:    生产者-消费者模式</code></pre><h4 id="组件间的关系"><a href="#组件间的关系" class="headerlink" title="组件间的关系"></a>组件间的关系</h4><pre><code>父子组件：props兄弟组件(非嵌套组件)：消息订阅-发布、集中式管理祖孙组件(跨级组件)：消息订阅-发布、集中式管理、conText(用的少)</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js的那些事</title>
      <link href="/2020/10/09/%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/10/09/%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>关于面试的js</p><a id="more"></a><h3 id="脱离文档流的元素会引起-回流和重绘-transform-不会"><a href="#脱离文档流的元素会引起-回流和重绘-transform-不会" class="headerlink" title="脱离文档流的元素会引起 回流和重绘 transform 不会"></a>脱离文档流的元素会引起 回流和重绘 transform 不会</h3><h3 id="浏览器输入-url-发生了什么"><a href="#浏览器输入-url-发生了什么" class="headerlink" title="浏览器输入 url 发生了什么"></a>浏览器输入 url 发生了什么</h3><ol><li>进行 dns 解析 游览器查找域名的 IP 地址</li><li>建立 tcp 链接</li><li>浏览器向 WEB 服务器发起 Http 请求</li><li>服务器端处理</li><li>关闭 TCP 链接</li><li>游览器解析资源</li><li>游览器布局渲染</li></ol><h3 id="防抖和节流-防抖-Debouncing-最后一个人说了算-和-函数节流（Throttling）-第一个人说了算"><a href="#防抖和节流-防抖-Debouncing-最后一个人说了算-和-函数节流（Throttling）-第一个人说了算" class="headerlink" title="防抖和节流 防抖(Debouncing)最后一个人说了算 和 函数节流（Throttling）  第一个人说了算"></a>防抖和节流 防抖(Debouncing)最后一个人说了算 和 函数节流（Throttling）  第一个人说了算</h3><p>Throttle：第一个人说了算</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function _throttle(fn, interval) &#123;</span><br><span class="line">             var last;</span><br><span class="line">             var timer;</span><br><span class="line">             var interval = interval || 200;</span><br><span class="line">             return function() &#123;</span><br><span class="line">                 var th = this;</span><br><span class="line">                 var args = arguments;</span><br><span class="line">                 var now = +new Date();</span><br><span class="line">                 if (last &amp;&amp; now - last &lt; interval) &#123;</span><br><span class="line">                     clearTimeout(timer);</span><br><span class="line">                     timer = setTimeout(function() &#123;</span><br><span class="line">                         last = now;</span><br><span class="line">                         fn.apply(th, args);</span><br><span class="line">                     &#125;, interval);</span><br><span class="line">                 &#125; else &#123;</span><br><span class="line">                     last = now;</span><br><span class="line">                     fn.apply(th, args);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">        vue中调用</span><br><span class="line">        rotate:_throttle(function()&#123;</span><br><span class="line">           this.rotateDraw()</span><br><span class="line">        &#125;,4000),</span><br></pre></td></tr></table></figure><p>Debounce：最后一个人说了算</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function debunce(fn, wait, immediate) &#123;</span><br><span class="line">        let timeout;</span><br><span class="line">        return function () &#123;</span><br><span class="line">            let ctx = this;</span><br><span class="line">            let arg = arguments</span><br><span class="line">            clearTimeout(timeout);</span><br><span class="line">            if (immediate) &#123;</span><br><span class="line">                let callNow = !timeout;</span><br><span class="line">                timeout = setTimeout(() =&gt; &#123;</span><br><span class="line">                    timeout = null;</span><br><span class="line">                &#125;, wait)</span><br><span class="line">                if (callNow) fn.apply(ctx, arg)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                timeout = setTimeout(() =&gt; &#123;</span><br><span class="line">                    fn.apply(ctx, arg)</span><br><span class="line">                &#125;, wait);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="h5-配置跨域-uniapp"><a href="#h5-配置跨域-uniapp" class="headerlink" title="h5 配置跨域 uniapp"></a>h5 配置跨域 uniapp</h3><pre><code> &quot;h5&quot; : {    &quot;devServer&quot; : {        &quot;proxy&quot; : {            &quot;/api&quot; : {                &quot;target&quot; : &quot;http://task.zhuanqianwa.com&quot;,                &quot;changeOrigin&quot; : true,                &quot;secure&quot; : false,                &quot;pathRewrite&quot; : {                    &quot;/api&quot; : &quot;/api&quot;                }            }        }    }}</code></pre><h3 id="call-apply-bind"><a href="#call-apply-bind" class="headerlink" title="call apply bind"></a>call apply bind</h3><p><strong>call apply 会立即执行</strong></p><ul><li><p>call</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">;(function test()&#123;</span><br><span class="line"></span><br><span class="line">&#125;.call(context,1,2,3,4))()</span><br></pre></td></tr></table></figure></li><li><p>apply</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">;(function test()&#123;</span><br><span class="line"></span><br><span class="line">&#125;.call(context,[1,2,3,4]))()</span><br></pre></td></tr></table></figure></li><li><p>bind</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var _this = function test()&#123;</span><br><span class="line"></span><br><span class="line">&#125;.bind(context,1,2,3,4)</span><br></pre></td></tr></table></figure></li></ul><h3 id="长按事件"><a href="#长按事件" class="headerlink" title="长按事件"></a>长按事件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">长按事件</span><br><span class="line">var timeOutEvent=0;//定时器</span><br><span class="line">//开始按</span><br><span class="line">function gtouchstart(ele)&#123;</span><br><span class="line">var e = window.event</span><br><span class="line">var x = e.touches[0].pageX,y=e.touches[0].pageY</span><br><span class="line">    timeOutEvent = setTimeout(&quot;longPress(&quot;+x+&quot;,&quot;+y+&quot;)&quot;,500);//这里设置定时器，定义长按500毫秒触发长按事件，时间可以自己改，个人感觉500毫秒非常合适</span><br><span class="line">    return false;</span><br><span class="line">&#125;;</span><br><span class="line">//手释放，如果在500毫秒内就释放，则取消长按事件，此时可以执行onclick应该执行的事件</span><br><span class="line">function gtouchend()&#123;</span><br><span class="line">    clearTimeout(timeOutEvent);//清除定时器</span><br><span class="line">    if(timeOutEvent!=0)&#123;</span><br><span class="line">        //这里写要执行的内容（尤如onclick事件）</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;;</span><br><span class="line">//如果手指有移动，则取消所有事件，此时说明用户只是要移动而不是长按</span><br><span class="line">function gtouchmove()&#123;</span><br><span class="line">    clearTimeout(timeOutEvent);//清除定时器</span><br><span class="line">    timeOutEvent = 0;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">//真正长按后应该执行的内容</span><br><span class="line">function longPress(x,y)&#123;</span><br><span class="line">    timeOutEvent = 0;</span><br><span class="line">    $api.css($api.dom(&apos;.shadow&apos;), &apos;display:inline-block;top:&apos; + y + &apos;px;left:&apos; + x + &apos;px;&apos;);</span><br><span class="line">    //执行长按要执行的内容，如弹出菜单</span><br><span class="line">    console.log(&quot;长按事件触发发&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><ul><li>instanceof 运算符用于测试构造函数的 prototype 属性是否出现在对象的原型链中的任何位置</li></ul><h3 id="构造函数-new-的过程"><a href="#构造函数-new-的过程" class="headerlink" title="构造函数 new 的过程"></a>构造函数 new 的过程</h3><ol><li>创建了一个新对象</li><li>将构造函数的作用域赋值给了新对象 也就是说 谁被 new 了 this 就指向谁 p.<strong>proto</strong> = Person.prototype;</li><li>执行构造函数中的代码，构造函数中的 this 指向该对象 Person.call(p, “balle”, 10);</li><li>如果函数没有返回值，最后再隐式的把 this 对象 return 出来</li><li>有返回值(返回的是一般数据类型的话,就返回原对象)<br>(返回的值是不是一个对象，如果是一个对象，我们就返回这个对象)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function Person(name, age) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.age = age;</span><br><span class="line">&#125;;</span><br><span class="line">Person.prototype.show = function() &#123;</span><br><span class="line">    console.log(this.name, this.age);</span><br><span class="line">&#125;;</span><br><span class="line">var p = new Person(&quot;bella&quot;, 10);</span><br></pre></td></tr></table></figure><ul><li>过程</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Person() &#123;</span><br><span class="line">    var this = &#123;</span><br><span class="line">        __proto__: Person.prototype</span><br><span class="line">    &#125;</span><br><span class="line">    this.name = name</span><br><span class="line">    this.age  = age</span><br><span class="line"></span><br><span class="line">    return this</span><br><span class="line">&#125;</span><br><span class="line">var person = new Person()</span><br></pre></td></tr></table></figure><h3 id="export-和-export-default-的区别"><a href="#export-和-export-default-的区别" class="headerlink" title="export 和 export default 的区别"></a>export 和 export default 的区别</h3><ul><li>可以有多个 expot 但必须只有一个 export default</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">export function getList(params) &#123;</span><br><span class="line">    return request(&#123;</span><br><span class="line">        url: &apos;/vue-admin-template/table/list&apos;,</span><br><span class="line">        method: &apos;get&apos;,</span><br><span class="line">        params</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">export function login(params) &#123;</span><br><span class="line">    return request(&#123;</span><br><span class="line">        url: &apos;/vue-admin-template/table/login&apos;,</span><br><span class="line">        method: &apos;get&apos;,</span><br><span class="line">        params</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let a = 10;</span><br><span class="line">let b = 10;</span><br><span class="line">export default&#123;</span><br><span class="line">    a,</span><br><span class="line">    b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="js-预编译的四部曲"><a href="#js-预编译的四部曲" class="headerlink" title="js 预编译的四部曲"></a>js 预编译的四部曲</h3><p>js 是解释性语言，主要特点为解释一行执行一行。<br>而在 js 运行是会进行三件事</p><ol><li>语法分析 语法分析会在代码执行前进行通篇检查,以排除一些低级错误</li><li>预编译 预编译发生在代码执行的前一刻</li><li>解释执行 解释执行顾名思义就是执行代码</li></ol><ul><li>预编译的四部曲：</li></ul><ol><li>创建 GO/AO 对象</li><li>找形参和变量声明，将变量和形参名作为 AO 属性名，值为 undefined</li><li>将实参值和形参统一</li><li>在函数体里面找函数声明，值赋予函数体</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">    function fn(a) &#123;</span><br><span class="line">            console.log(a); //function a() &#123; &#125;</span><br><span class="line">            var a = 123;</span><br><span class="line">            console.log(a); //123</span><br><span class="line">            function a() &#123; &#125;</span><br><span class="line">            console.log(a); //123</span><br><span class="line">            var b = function () &#123; &#125;</span><br><span class="line">            console.log(b); //funb</span><br><span class="line">            function d() &#123; &#125;</span><br><span class="line">            console.log(d) //fund</span><br><span class="line">        &#125;</span><br><span class="line">        fn(1);</span><br><span class="line">1.  创建AO对象：我们隐式的在函数中创建了一个AO的对象来盛放函数中的变量，此时对象中并没有值</span><br><span class="line">2.  找形参和变量声明，将变量和形参名作为 AO 属性名，值为 undefined</span><br><span class="line">    AO&#123;</span><br><span class="line">        a:undefined,</span><br><span class="line">        b:undefined</span><br><span class="line">    &#125;</span><br><span class="line">3. 将实参值和形参统一 </span><br><span class="line">     AO&#123;</span><br><span class="line">        a:1,</span><br><span class="line">        b:undefined</span><br><span class="line">    &#125;</span><br><span class="line">4. 在函数体里面找函数声明，值赋予函数体；函数声明提到最前面</span><br><span class="line">     AO&#123;</span><br><span class="line">        a:function a() &#123; &#125;,</span><br><span class="line">        b:undefined</span><br><span class="line">        d:function d() &#123; &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="箭头函数this指向-箭头函数this指向window-箭头函数的this指向上一层非箭头函数的this的值或全局对象-window-undefined"><a href="#箭头函数this指向-箭头函数this指向window-箭头函数的this指向上一层非箭头函数的this的值或全局对象-window-undefined" class="headerlink" title="箭头函数this指向( 箭头函数this指向window  箭头函数的this指向上一层非箭头函数的this的值或全局对象(window,undefined) )"></a>箭头函数this指向( 箭头函数this指向window  箭头函数的this指向上一层非箭头函数的this的值或全局对象(window,undefined) )</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">var age = &apos;21&apos;</span><br><span class="line">         var obj = &#123;</span><br><span class="line">            name:&apos;张三&apos;,</span><br><span class="line">            age:18,</span><br><span class="line">            jump:()=&gt;&#123;      //箭头函数this指向window  箭头函数的this指向上一层非箭头函数的this的值或全局对象(window,undefined)</span><br><span class="line">            setTimeout(()=&gt;&#123;</span><br><span class="line">                console.log(this.age) //21</span><br><span class="line">            &#125;,1000)</span><br><span class="line">           </span><br><span class="line">            &#125;,</span><br><span class="line">            hh:function()&#123;    </span><br><span class="line">                console.log(this.age) //18</span><br><span class="line">            &#125;, </span><br><span class="line">             gg:function()&#123;    </span><br><span class="line">                setTimeout(()=&gt;&#123;</span><br><span class="line">                console.log(this.age)//18</span><br><span class="line">            &#125;,1000)</span><br><span class="line">            &#125;,</span><br><span class="line">            say:()=&gt;&#123;      //箭头函数this指向window</span><br><span class="line">                console.log(this.age) //21</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         obj.say();</span><br><span class="line">         obj.jump();</span><br><span class="line">         obj.hh();</span><br><span class="line">         obj.gg();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>elementUI + vue全家桶  权限</title>
      <link href="/2020/08/29/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%9D%83%E9%99%90/"/>
      <url>/2020/08/29/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<p>elementUI + vue全家桶  权限 </p><a id="more"></a><h2 id="前台控制权限"><a href="#前台控制权限" class="headerlink" title="前台控制权限"></a>前台控制权限</h2><ul><li><p>登录页面控制权限<br>根据用户登录获取到唯一标识 token  存到本地存储 localStorage.setItem(‘bf-token’)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">  router.beforeEach(async(to, from, next) =&gt; &#123;</span><br><span class="line">// start progress bar  //进度条   NProgress(可有可无)</span><br><span class="line">NProgress.start()</span><br><span class="line"></span><br><span class="line">// set page title</span><br><span class="line">document.title = getPageTitle(to.meta.title)</span><br><span class="line"></span><br><span class="line">// determine whether the user has logged in</span><br><span class="line">const hasToken = window.localStorage.getItem(&apos;bf-token&apos;)</span><br><span class="line"></span><br><span class="line">if (hasToken) &#123;</span><br><span class="line">  if (to.path === &apos;/login&apos;) &#123;</span><br><span class="line">    // if is logged in, redirect to the home page</span><br><span class="line">    next(&#123; path: &apos;/&apos; &#125;)</span><br><span class="line">    NProgress.done()</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // 是否已经初始化menu</span><br><span class="line">    // 在vuex中添加了一个标识 isInitMenu  来标识是否初始化了菜单</span><br><span class="line">    const isInitMenu = store.state.user.isInitMenu</span><br><span class="line">    // 如果vuex存在 直接放行</span><br><span class="line">    if (isInitMenu) &#123;</span><br><span class="line">      next()</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      console.log(&apos;没有菜单,准备获取你造吗?&apos;)</span><br><span class="line"></span><br><span class="line">      // id 是用户登录之后 返回的id</span><br><span class="line">      var id = JSON.parse(window.localStorage.getItem(&apos;bf-user-info&apos;)).id</span><br><span class="line">      // 重新获取</span><br><span class="line">      store.dispatch(&apos;user/getUserMenus&apos;, id)</span><br><span class="line">        .then(() =&gt; &#123;</span><br><span class="line">          next(to.path)</span><br><span class="line">        &#125;).catch(err =&gt; &#123;</span><br><span class="line">          console.log(err)</span><br><span class="line">          // remove token and go to login page to re-login</span><br><span class="line">          store.commit(&apos;user/RESET_LOGIN_INFO&apos;)</span><br><span class="line">          next(`/login`)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  /* has no token*/</span><br><span class="line">  if (whiteList.indexOf(to.path) !== -1) &#123;</span><br><span class="line">    // in the free login whitelist, go directly</span><br><span class="line">    next()</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // other pages that do not have permission to access are redirected to the login page.</span><br><span class="line">    next(`/login?redirect=$&#123;to.path&#125;`)</span><br><span class="line">    NProgress.done()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>user.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">import router from &apos;@/router&apos;</span><br><span class="line">import &#123; asyncRoutes &#125; from &apos;@/router/index&apos;</span><br><span class="line">import loginApi from &apos;@/api/login&apos;</span><br><span class="line"></span><br><span class="line">const getDefaultState = () =&gt; &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    routes: [],</span><br><span class="line">    isInitMenu: false // 本来不想加这个变量 但是会存在有些账号返回的菜单本来就是[]; 为了区分是刷新导致的routes为[]还是获取的本来就是[]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const state = getDefaultState()</span><br><span class="line"></span><br><span class="line">const mutations = &#123;</span><br><span class="line">  SET_ROUTES(state, routes) &#123;</span><br><span class="line">    // 在vuex中保存所有最终路由的目的,是为了显示sideBar</span><br><span class="line">    state.routes = routes</span><br><span class="line">    // 因为一旦刷新了浏览器 vuex内容将会丢失 在导航守卫就可以根据 isInitMenu字段判断是否被刷新了</span><br><span class="line">    // 如果刷了导致vuex内容丢失,那么sidebar组建将无法正确渲染  所以会需要重新获取菜单</span><br><span class="line">    state.isInitMenu = true</span><br><span class="line">  &#125;,</span><br><span class="line">  RESET_LOGIN_INFO(state) &#123;</span><br><span class="line">    window.localStorage.removeItem(&apos;bf-token&apos;)</span><br><span class="line">    window.localStorage.removeItem(&apos;bf-user-info&apos;)</span><br><span class="line">    state.routes = []</span><br><span class="line">    state.isInitMenu = false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const actions = &#123;</span><br><span class="line">  getUserMenus(&#123; commit, state &#125;, id) &#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">      var routesTree = []</span><br><span class="line">      // 发送请求  根据用户id获取用户初始化动态菜单权限列表</span><br><span class="line">      loginApi.getClientMenu(&#123;</span><br><span class="line">        id: id</span><br><span class="line">      &#125;).then(res =&gt; &#123;</span><br><span class="line">        // 解析菜单</span><br><span class="line">        var menus = res.data</span><br><span class="line">          console.log(res)</span><br><span class="line">        for (let i = 0; i &lt; menus.length; i++) &#123;</span><br><span class="line">          var m = menus[i]</span><br><span class="line">          if (m.level == 1) &#123;</span><br><span class="line">            // 从路由组中找到 name相同的一级对象</span><br><span class="line">            var routeOne = asyncRoutes.find(item =&gt; item.name == m.name)</span><br><span class="line">            // console.log(&apos;m=&gt;&apos;, m)</span><br><span class="line">            // 过滤字节点</span><br><span class="line">            if (m.children) &#123;</span><br><span class="line">              // 过滤m中包含的</span><br><span class="line">              routeOne.children = routeOne.children.filter(item =&gt; m.children.some(mItem =&gt; mItem.name == item.name))</span><br><span class="line">              console.log(&apos;routeOne.children&apos;, routeOne.children)</span><br><span class="line">            &#125;</span><br><span class="line">            if (routeOne) &#123;</span><br><span class="line">              routesTree.push(routeOne)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 404 page must be placed at the end !!!</span><br><span class="line">        var last404 = &#123; path: &apos;*&apos;, redirect: &apos;/404&apos;, hidden: true &#125;</span><br><span class="line">        routesTree.push(last404)</span><br><span class="line">        // 1. 构建动态路由   用于形成新的路由对象</span><br><span class="line">        router.addRoutes(routesTree)</span><br><span class="line">        // 2. 使sideBar可以动态构建</span><br><span class="line">        commit(&apos;SET_ROUTES&apos;, routesTree)</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;).catch(err =&gt; &#123;</span><br><span class="line">        console.log(err)</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  doLogin(&#123; commit &#125;, data) &#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">      loginApi.doLogin(data)</span><br><span class="line">        .then(res =&gt; &#123;</span><br><span class="line">          if (res.code == &apos;S&apos;) &#123;</span><br><span class="line">          // 把token存储和其他信息作为vuex处理</span><br><span class="line">            window.localStorage.setItem(&apos;bf-token&apos;, res.token)</span><br><span class="line">            window.localStorage.setItem(&apos;bf-user-info&apos;, JSON.stringify(res.userInfo))</span><br><span class="line">            resolve(res.code)</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            reject()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;).catch(err =&gt; &#123;</span><br><span class="line">          console.log(err)</span><br><span class="line">          reject(err)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  namespaced: true,</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>user.js</p><pre><code></code></pre></li></ul><pre><code>import router from &apos;./router&apos;import store from &apos;./store&apos;import { Message } from &apos;element-ui&apos;import NProgress from &apos;nprogress&apos; // progress barimport &apos;nprogress/nprogress.css&apos; // progress bar styleimport getPageTitle from &apos;@/utils/get-page-title&apos;NProgress.configure({ showSpinner: false }) // NProgress Configurationconst whiteList = [&apos;/login&apos;] // no redirect whitelistrouter.beforeEach(async(to, from, next) =&gt; {  // start progress bar  NProgress.start()  // set page title  document.title = getPageTitle(to.meta.title)  // determine whether the user has logged in  const hasToken = window.localStorage.getItem(&apos;bf-token&apos;)  if (hasToken) {    if (to.path === &apos;/login&apos;) {      // if is logged in, redirect to the home page      next({ path: &apos;/&apos; })      NProgress.done()    } else {      // 是否已经初始化menu      // 在vuex中添加了一个标识 isInitMenu  来标识是否初始化了菜单      const isInitMenu = store.state.user.isInitMenu      // 如果vuex存在 直接放行      if (isInitMenu) {        next()      } else {        console.log(&apos;没有菜单,准备获取你造吗?&apos;)        // id 是用户登录之后 返回的id        var id = JSON.parse(window.localStorage.getItem(&apos;bf-user-info&apos;)).id        // 重新获取        store.dispatch(&apos;user/getUserMenus&apos;, id)          .then(() =&gt; {            next(to.path)          }).catch(err =&gt; {            console.log(err)            store.commit(&apos;user/RESET_LOGIN_INFO&apos;)            next(`/login`)          })      }    }  } else {    /* has no token*/    if (whiteList.indexOf(to.path) !== -1) {      // in the free login whitelist, go directly      next()    } else {      // other pages that do not have permission to access are redirected to the login page.      next(`/login?redirect=${to.path}`)      NProgress.done()    }  }})router.afterEach(() =&gt; {  // finish progress bar  NProgress.done()})``` </code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于上传的那些事</title>
      <link href="/2020/03/07/upload%E4%B8%8A%E4%BC%A0/"/>
      <url>/2020/03/07/upload%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<p> 拖拽上传 get post</p><a id="more"></a><h3 id="拖拽上传"><a href="#拖拽上传" class="headerlink" title="拖拽上传"></a>拖拽上传</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        .upload-box &#123;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background: #eee;</span><br><span class="line">            padding: 10px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .upload-box-p .plupload-preview &#123;</span><br><span class="line">            flex-wrap: wrap;</span><br><span class="line">            /*height:60%;*/</span><br><span class="line">            list-style: none;</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .upload-box-p &#123;</span><br><span class="line">            border: 1px dashed #ada2a2;</span><br><span class="line">            height: 100%;</span><br><span class="line">            display: flex;</span><br><span class="line">            flex-direction: column;</span><br><span class="line">            justify-content: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .upload-box-desc &#123;</span><br><span class="line">            color: #888;</span><br><span class="line">            font-size: 2em;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"upload-box-p"</span> <span class="attr">id</span>=<span class="string">"uploadBoxArea"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"upload-box-btn"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"upload-box-desc"</span>&gt;</span>您也可以拖拽文件到虚线框中进行转换<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">data-titleback</span>=<span class="string">"false"</span> <span class="attr">id</span>=<span class="string">"plupload-avatar"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">class</span>=<span class="string">"btn btn-success btn-lg plupload"</span> <span class="attr">data-input-id</span>=<span class="string">"c-avatar"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">data-mimetype</span>=<span class="string">"application/octet-stream"</span> <span class="attr">data-multiple</span>=<span class="string">"false"</span> <span class="attr">data-preview-id</span>=<span class="string">"p-avatar"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-upload"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 点此上传word文件</span><br><span class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        var dz = document.getElementById('uploadBoxArea');</span><br><span class="line">        dz.ondragover = function (ev) &#123;</span><br><span class="line">            //阻止浏览器默认打开文件的操作</span><br><span class="line">            ev.preventDefault();</span><br><span class="line">            //拖入文件后边框颜色变红</span><br><span class="line">            this.style.borderColor = 'red';</span><br><span class="line">        &#125;</span><br><span class="line">        dz.ondragleave = function () &#123;</span><br><span class="line">            //恢复边框颜色</span><br><span class="line">            this.style.borderColor = 'gray';</span><br><span class="line">        &#125;</span><br><span class="line">        dz.ondrop = function (ev) &#123;</span><br><span class="line">            console.log(ev.dataTransfer.files)</span><br><span class="line">            //恢复边框颜色</span><br><span class="line">            this.style.borderColor = 'gray';</span><br><span class="line">            //阻止浏览器默认打开文件的操作</span><br><span class="line">            ev.preventDefault();</span><br><span class="line">            var files = ev.dataTransfer.files;</span><br><span class="line">            if (files.length &gt; 0) &#123;</span><br><span class="line">                //fastadmin框架调用的真实文件上传方法，对应改成你自己的逻辑</span><br><span class="line">                // Upload.api.send(files[0], function (data) &#123;</span><br><span class="line">                //     Controller.uploadSuccess(data);</span><br><span class="line">                // &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="upload-vant-上传图片"><a href="#upload-vant-上传图片" class="headerlink" title="upload vant 上传图片"></a>upload vant 上传图片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;demo&quot;&gt;</span><br><span class="line">        &lt;Uploader :after-read=&quot;afterRead&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Vue from &apos;vue&apos;;</span><br><span class="line">import &#123; Uploader &#125; from &apos;vant&apos;;</span><br><span class="line">import &apos;vant/lib/uploader/style&apos;;</span><br><span class="line">import axios from &apos;axios&apos;;</span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        Uploader</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        afterRead(file) &#123;</span><br><span class="line">            const url = &apos;http://www.bufantec.com/api/leju/admin/material/uploadImg&apos;;</span><br><span class="line">            // 此时可以自行将文件上传至服务器</span><br><span class="line">            console.log(file);</span><br><span class="line">            // 1. 获取file对象 从打印的结果可以看到结构</span><br><span class="line">            var fileObj = file.file;</span><br><span class="line">            // 2. 创建formdata对象 包装数据</span><br><span class="line">            var fd = new FormData();</span><br><span class="line">            // 3. 添加file, key必须是&apos;file&apos;</span><br><span class="line">            fd.append(&apos;file&apos;,fileObj);</span><br><span class="line">            // 4. 发送数据</span><br><span class="line">            axios.post(</span><br><span class="line">                url,</span><br><span class="line">                fd</span><br><span class="line">            ).then(res=&gt;&#123;</span><br><span class="line">                console.log(res);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="uniapp-上传图片"><a href="#uniapp-上传图片" class="headerlink" title="uniapp 上传图片"></a>uniapp 上传图片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;button type=&quot;primary&quot; @tap=&quot;selAvatar&quot;&gt;上传头像&lt;/button&gt;</span><br><span class="line">&lt;image style=&quot;width:100px;height: 100px;&quot; :src=&quot;avatar&quot; mode=&quot;&quot;&gt;&lt;/image&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">avatar: &apos;&apos;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">     methods()&#123;</span><br><span class="line">       selAvatar()&#123;</span><br><span class="line">// 调用uniapp api ,可以访问手机相册</span><br><span class="line">uni.chooseImage(&#123;</span><br><span class="line">    count: 1, //默认9</span><br><span class="line">    sizeType: [&apos;original&apos;, &apos;compressed&apos;], //可以指定是原图还是压缩图，默认二者都有</span><br><span class="line">    sourceType: [&apos;album&apos;], //从相册选择</span><br><span class="line">    success: function (res) &#123;</span><br><span class="line">// 默认选择的结果是数组类型  这里只选第一个</span><br><span class="line">    var file = res.tempFilePaths[0];</span><br><span class="line">// 执行上传</span><br><span class="line">uni.uploadFile(&#123;</span><br><span class="line">    url: settingFile.host+&apos;/api/leju/admin/material/uploadImg&apos;, //仅为示例，非真实的接口地址</span><br><span class="line">    filePath: file,</span><br><span class="line">    name: &apos;file&apos;,</span><br><span class="line">    success: (uploadFileRes) =&gt; &#123;</span><br><span class="line">var resObj = JSON.parse(uploadFileRes.data);</span><br><span class="line">_this.avatar = resObj.ossUrl</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;// 上传头像</span><br></pre></td></tr></table></figure><h3 id="七牛云-阿里云上传"><a href="#七牛云-阿里云上传" class="headerlink" title="七牛云 阿里云上传"></a>七牛云 阿里云上传</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> imgUpload(tempFilePaths, filepath) &#123;</span><br><span class="line"><span class="keyword">let</span> global_upload_type = <span class="keyword">this</span>.globalDatas.upload_type;</span><br><span class="line"><span class="keyword">let</span> upload_type;</span><br><span class="line"><span class="keyword">let</span> url = HTTP_REQUEST_URL + <span class="string">'/api/upload/video'</span>;</span><br><span class="line"><span class="keyword">let</span> formData = &#123;&#125;</span><br><span class="line"><span class="keyword">if</span> (global_upload_type &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">data</span><br><span class="line">&#125; = <span class="keyword">await</span> tempKey();</span><br><span class="line">upload_type = data.type;</span><br><span class="line"><span class="keyword">if</span> (upload_type == <span class="string">"OSS"</span>) &#123;</span><br><span class="line">url = data.host</span><br><span class="line">formData = &#123;</span><br><span class="line">key: filepath,</span><br><span class="line">policy: data.policy, <span class="comment">//后台获取超时时间</span></span><br><span class="line">OSSAccessKeyId: data.accessid, <span class="comment">//后台获取临时ID</span></span><br><span class="line">success_action_status: <span class="string">'200'</span>, <span class="comment">//让服务端返回200,不然，默认会返回204</span></span><br><span class="line">signature: data.signature <span class="comment">//后台获取签名</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(upload_type == <span class="string">"QINIU"</span>)&#123;</span><br><span class="line">url = data.domain</span><br><span class="line">formData = &#123;</span><br><span class="line"><span class="string">'key'</span>: data.key,<span class="comment">//key值</span></span><br><span class="line"><span class="string">'token'</span>: data.token ,<span class="comment">//七牛云token值</span></span><br><span class="line"><span class="string">'fname'</span>: filepath</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> that = <span class="keyword">this</span>;</span><br><span class="line">uni.showLoading(&#123;</span><br><span class="line">title: <span class="string">'上传中'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> uploadTask = uni.uploadFile(&#123;</span><br><span class="line">url: url,</span><br><span class="line">filePath: tempFilePaths,</span><br><span class="line">name: <span class="string">'file'</span>,</span><br><span class="line">formData: formData,</span><br><span class="line">header: &#123;</span><br><span class="line"><span class="comment">// #ifdef MP</span></span><br><span class="line"><span class="string">"Content-Type"</span>: <span class="string">"multipart/form-data"</span>,</span><br><span class="line"><span class="comment">// #endif</span></span><br><span class="line">[TOKENNAME]: <span class="string">'Bearer '</span> + store.state.app.token</span><br><span class="line">&#125;,</span><br><span class="line">success: <span class="function">(<span class="params">uploadFileRes</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(uploadFileRes)</span><br><span class="line"><span class="built_in">console</span>.log(filepath)</span><br><span class="line"><span class="keyword">if</span> (global_upload_type &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(upload_type == <span class="string">"OSS"</span>)&#123;</span><br><span class="line"><span class="keyword">let</span> src = url + <span class="string">"/"</span> + filepath;</span><br><span class="line">that.videoArr.push(src)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(upload_type == <span class="string">"QINIU"</span>)&#123;</span><br><span class="line"><span class="keyword">let</span> data = <span class="built_in">JSON</span>.parse(uploadFileRes.data);</span><br><span class="line"><span class="keyword">let</span> src =   url + <span class="string">"/"</span> + filepath;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">let</span> data = <span class="built_in">JSON</span>.parse(uploadFileRes.data);</span><br><span class="line">that.videoArr.push(data.data.src)</span><br><span class="line">&#125;</span><br><span class="line">that.$util.Tips(&#123;</span><br><span class="line">title: <span class="string">"上传成功"</span></span><br><span class="line">&#125;);</span><br><span class="line">uni.hideLoading();</span><br><span class="line">&#125;,</span><br><span class="line">fail: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(err)</span><br><span class="line">that.$util.Tips(&#123;</span><br><span class="line">title: <span class="string">"上传失败"</span></span><br><span class="line">&#125;);</span><br><span class="line">uni.hideLoading();</span><br><span class="line">&#125;,</span><br><span class="line">complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">uni.hideLoading();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue双向数据绑定</title>
      <link href="/2020/02/21/%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/"/>
      <url>/2020/02/21/%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<p>粗浅理解</p><a id="more"></a><h1 id="对-MVVM-的理解"><a href="#对-MVVM-的理解" class="headerlink" title="对 MVVM 的理解"></a>对 <strong>MVVM</strong> 的理解</h1><p><strong>MVVM</strong> 分为 <strong>Model</strong>,<strong>View</strong>,<strong>ViewModel</strong> 三者<br><strong>Model</strong> 代表数据模型,数据和业务逻辑都在 Model 层中定义<br><strong>View</strong> 代表 UI 视图,负责数据的展示<br><strong>ViewModel</strong> 负责监听 Model 中数据的改变并且控制视图的更行,处理用户交互操作<br>Model 和 View 并无直接关联,而是通过 ViewModel 来进行联系的,Model 和 ViewModel 之间有着双向数据绑定的联系.因此当 Model 中的数据改变是会触发 View 层的触发,View 中由于用户操作而改变的数据也会在 Model 中通步</p><h1 id="Vue的双向数据绑定是如何实现的"><a href="#Vue的双向数据绑定是如何实现的" class="headerlink" title="Vue的双向数据绑定是如何实现的?"></a>Vue的双向数据绑定是如何实现的?</h1><ul><li>简单来说就是 <strong>数据劫持</strong>和<strong>发布订阅者模式</strong>实现的</li></ul><ol><li>需要Observe的数据对象进行递归遍历,包括子属性对象的属性,都加上setter和getter这样的话,就给这个对象的某个值赋值,就会触发setter,那么就能监听到了数据变化</li><li>Compile解析模板指令,将模板中的变量替换成数据,然后初始化渲染页面视图,并将每个指令对应的节点绑定更新函数,添加监听数据的订阅者,一旦数据有变动,收到通知,更新视图</li><li>Watcher订阅者是Observe 和Compile之间通信的桥梁,主要做的事情是:<br> (1) 在自身实例化时往属性订阅器(dep)里面添加自己<br> (2) 自身必须有一个update()方法<br> (3) 待属性变动dep.notice()通知时,能调用自身的update方法,并触发Compile中绑定的回调</li><li>MVVM作为数据绑定的入口,整合Observe,Compile和Watcher三者,通过Compile来解析编译模板指令,最终利用Watcher搭起Observe和Compile之间的通信桥梁,达到数据变化-&gt;视图更新;视图交互变化(input)-&gt;数据model变更的双向数据绑定效果 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;双向数据绑定&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-model=&apos;name&apos;&gt;</span><br><span class="line">        &lt;div v-text=&apos;name&apos;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        class Vue &#123;</span><br><span class="line">            constructor(options) &#123;</span><br><span class="line"></span><br><span class="line">                this.options = options</span><br><span class="line">                this.$data = options.data</span><br><span class="line">                this.$el = document.querySelector(options.el)</span><br><span class="line">                this._directives = &#123;&#125;</span><br><span class="line">                //数据劫持</span><br><span class="line">                this.Observe(this.$data)</span><br><span class="line">                //解析指令</span><br><span class="line">                this.Compile(this.$el)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Observe(data) &#123;</span><br><span class="line">                for (let key in data) &#123;</span><br><span class="line">                    this._directives[key] = [] //空数组</span><br><span class="line">                    let val = data[key] // &apos;今晚吃鸡呐，大吉大利！&apos;</span><br><span class="line">                    let _obj = this._directives[key] //空数组</span><br><span class="line">                    Object.defineProperty(this.$data, key, &#123;</span><br><span class="line">                        get: function () &#123;</span><br><span class="line">                            return val</span><br><span class="line">                        &#125;,</span><br><span class="line">                        set: function (newVal) &#123;</span><br><span class="line">                            if (val !== newVal) &#123;</span><br><span class="line">                                val = newVal</span><br><span class="line">                                _obj.forEach(item =&gt; &#123;</span><br><span class="line">                                    item.update()</span><br><span class="line">                                &#125;);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Compile(el) &#123;</span><br><span class="line">                let nodes = el.children</span><br><span class="line">                for (let i = 0; i &lt; nodes.length; i++) &#123;</span><br><span class="line">                    let node = nodes[i]</span><br><span class="line">                    // console.log(node.children.length) 0 </span><br><span class="line">                    if (node.children.length) &#123;</span><br><span class="line">                        this.Compile(node)</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (node.hasAttribute(&apos;v-text&apos;)) &#123;</span><br><span class="line">                        let attrValue = node.getAttribute(&apos;v-text&apos;);</span><br><span class="line">                        this._directives[attrValue].push(new Watch(node, this, attrValue, &apos;innerHTML&apos;));</span><br><span class="line">                        console.log( this._directives)</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (node.hasAttribute(&apos;v-model&apos;)) &#123;</span><br><span class="line">                        let _this = this;</span><br><span class="line">                        let attrValue = node.getAttribute(&apos;v-model&apos;)</span><br><span class="line">                        this._directives[attrValue].push(new Watch(node, this, attrValue, &apos;value&apos;))</span><br><span class="line">                        console.log( this._directives)</span><br><span class="line">                        node.addEventListener(&apos;input&apos;, (function () &#123;</span><br><span class="line">                            return function () &#123;</span><br><span class="line">                                _this.$data[attrValue] = node.value</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;)())</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        class Watch&#123;</span><br><span class="line">            constructor(el,vm,exp,attr)&#123;</span><br><span class="line">                this.el = el;</span><br><span class="line">                this.vm = vm;</span><br><span class="line">                this.exp = exp;</span><br><span class="line">                this.attr = attr;</span><br><span class="line"></span><br><span class="line">                // console.log(el)  // &lt;input type=&quot;text&quot; v-model=&apos;name&apos;&gt;</span><br><span class="line">                // console.log(vm)  //vm实例</span><br><span class="line">                // console.log(exp) //name</span><br><span class="line">                // console.log(attr) //value</span><br><span class="line">                this.update()</span><br><span class="line">            &#125;</span><br><span class="line">            update()&#123;</span><br><span class="line">                this.el[this.attr] = this.vm.$data[this.exp]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        const app = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                name: &apos;今晚吃鸡呐，大吉大利！&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue路由钩子函数</title>
      <link href="/2020/02/14/vue%E8%B7%AF%E7%94%B1%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/"/>
      <url>/2020/02/14/vue%E8%B7%AF%E7%94%B1%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>vue</p><a id="more"></a><h3 id="vue-组件级路由钩子函数介绍-及实际应用"><a href="#vue-组件级路由钩子函数介绍-及实际应用" class="headerlink" title="vue 组件级路由钩子函数介绍,及实际应用"></a>vue 组件级路由钩子函数介绍,及实际应用</h3><ol><li><p>全局钩子<br><strong>router.beforEach</strong>的函数有三个参数<br>to:router 即将进入的路由对象<br>from:当前导航即将离开的路由<br>next:Function,进行管道中的一个钩子,如果执行完了,则导航的状态就是 confirmed(确认的);否则为 false,终止导航.<br>用于权限验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">    const role = localStorage.getItem(&apos;ms_username&apos;);</span><br><span class="line">    if(!role &amp;&amp; to.path !== &apos;/login&apos;)&#123;</span><br><span class="line">        next(&apos;/login&apos;);</span><br><span class="line">    &#125;else if(to.meta.permission)&#123;</span><br><span class="line">        // 如果是管理员权限则可进入，这里只是简单的模拟管理员权限而已</span><br><span class="line">        role === &apos;admin&apos; ? next() : next(&apos;/403&apos;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        // 简单的判断IE10及以下不进入富文本编辑器，该组件不兼容</span><br><span class="line">        if(navigator.userAgent.indexOf(&apos;MSIE&apos;) &gt; -1 &amp;&amp; to.path === &apos;/editor&apos;)&#123;</span><br><span class="line">            Vue.prototype.$alert(&apos;vue-quill-editor组件不兼容IE10及以下浏览器，请使用更高版本的浏</span><br><span class="line">            览器查看&apos;, &apos;浏览器不兼容通知&apos;, &#123;</span><br><span class="line">                confirmButtonText: &apos;确定&apos;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            next();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>router.afterEach</strong> 的函数的有两个参数<br>to:router 即将进入的路由对象<br>from:当前导航即将离开的路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    router.afterEach((to, from) =&gt; &#123; // 举例: 通过跳转后改变document.title</span><br><span class="line">　if( to.meta.title )&#123;</span><br><span class="line">　　　window.document.title = to.meta.title //每个路由下title</span><br><span class="line">　&#125;else&#123;</span><br><span class="line">　　　window.document.title = &apos;默认的title&apos;</span><br><span class="line">　&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>针对单个路由钩子函数<br><strong>beforeEnter</strong> 可以在路由配置上直接定义 beforeEnter 钩子也可以在这里配置路由跳转权限问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">routes: [</span><br><span class="line">    &#123;</span><br><span class="line">    path: &apos;/foo&apos;,</span><br><span class="line">    component: Foo,</span><br><span class="line">    beforeEnter: (to, from, next) =&gt; &#123;</span><br><span class="line">    console.log(&apos;beforeEnter&apos;)</span><br><span class="line">　　　　next() //正常跳转，不写的话，不会跳转</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件级钩子函数<br> <strong>beforeRouteEnter</strong>    <strong>beforeRouteUpdate</strong>    <strong>beforeRouteLeave</strong></p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">    export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            test:&apos;改变之前&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeCreate()&#123;//组件生命周期函数</span><br><span class="line">        console.log(&apos;beforeCreate&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">    //当进入组件之前，执行 beforRouteEnter 路由钩子函数</span><br><span class="line">    beforeRouteEnter(to,from,next)&#123;</span><br><span class="line">        console.log(&apos;beforRouteEnter&apos;)</span><br><span class="line">        console.log(this) // 结果为undefined，因为在执行beforRouteEnter时候，组件还没有被创建出来；</span><br><span class="line">                            先执行beforRouteEnter，再执行beforeCreate</span><br><span class="line">        next((vm)=&gt;&#123; //参数vm就是当前组件的实例。</span><br><span class="line">            vm.test = &apos;我被改变了&apos;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeRouteUpdate(to,from,next)&#123;</span><br><span class="line">    // 在当前路由改变，但是该组件被复用时调用</span><br><span class="line">    // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span><br><span class="line">    // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span><br><span class="line">    // 可以访问组件实例 `this`</span><br><span class="line">        console.log(&apos;beforeRouteUpdate&apos;)</span><br><span class="line">        next()</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeRouteLeave(to,from,next)&#123;//离开组件的时候触发</span><br><span class="line">        // 导航离开该组件的对应路由时调用</span><br><span class="line">        // 可以访问组件实例 `this`</span><br><span class="line">        //什么都不写的时候，不会离开(走下一步)</span><br><span class="line">        next()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>实际应用<br>1)  清除当前组件中的定时器</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">当一个组件中有一个定时器中,在路由进行切换的时候,可使用beforeRouteLeave</span><br><span class="line">beforeRouteLeave(to,from,next)&#123;</span><br><span class="line">    window.clearInterval(this.timer)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ol><p>2)  当页面中有未关闭的窗口,或未保存的内容时,阻止页面跳转<br>        <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteLeave(to,from,next)&#123;</span><br><span class="line">     //判断是否弹出框的状态和保存信息与否</span><br><span class="line">    if (this.dialogVisibility === true) &#123;</span><br><span class="line">    this.dialogVisibility = false //关闭弹出框</span><br><span class="line">    next(false) //回到当前页面, 阻止页面跳转</span><br><span class="line">    &#125;else if(this.saveMessage === false) &#123;</span><br><span class="line">    //弹出警告</span><br><span class="line">    next(false) //回到当前页面, 阻止页面跳转</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">    next() //否则允许跳转</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3)  当页面中有未关闭的窗口,或未保存的内容时,阻止页面跳转<br>        <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteLeave (to, from, next) &#123;</span><br><span class="line">localStorage.setItem(name, content); //保存到localStorage中</span><br><span class="line">next()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>localStorage ,sessionStorage ,Cookie</title>
      <link href="/2020/02/14/%E5%AD%98%E5%82%A8%E4%BB%A5%E5%8F%8Acookie/"/>
      <url>/2020/02/14/%E5%AD%98%E5%82%A8%E4%BB%A5%E5%8F%8Acookie/</url>
      
        <content type="html"><![CDATA[<p>localStorage ,sessionStorage ,cookie</p><a id="more"></a><h3 id="localStorage-sessionStorage"><a href="#localStorage-sessionStorage" class="headerlink" title="localStorage ,sessionStorage"></a>localStorage ,sessionStorage</h3><ul><li>HTML5 的 WebStorage 提供了两种 API：localStorage(本地存储)和 sessionStorage(会话存储)<br>WebStorage 是本地存储: 存储在客服端 包括 localStorage(本地存储)和 sessionStorage(会话存储)不与服务器进行交互通信</li><li>获取方式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">window.localStorage    window.sessionStorage 公用方法</span><br><span class="line">setItem(key,value)  --保存数据,以键值对的方式存储信息</span><br><span class="line">getItem(key)        --获取数据,将键值传入,即可获取对应的value值</span><br><span class="line">removeItem(key)     --删除单个数据 根据键值对移除对应的信息</span><br><span class="line">clear()             -- 删除所有的数据</span><br></pre></td></tr></table></figure></li></ul><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><ul><li>cookie：是网景公司的前雇员在1993年发明。它的主要用于保存登陆信息，比如登陆某个网站市场可以看到’记住密码’，这就是通过在cookie中存入一段辨别用户身份的数据来实现的。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">封装的cookie方法</span><br><span class="line">var manageCookie = &#123;</span><br><span class="line">    setCookie:function(key,value,date)&#123;</span><br><span class="line">        //增 改</span><br><span class="line">        var oDate = new Date();</span><br><span class="line">        oDate.setDate(oDate.getDate() + date);</span><br><span class="line">         document.cookie = key + &apos;=&apos; + value + &apos;;expires = &apos; + oDate;</span><br><span class="line">         return this</span><br><span class="line">    &#125;,</span><br><span class="line">    removeCookie:function(key,callback )&#123;</span><br><span class="line">        this.setCookie(key,&apos;&apos;,-1);</span><br><span class="line">        return this</span><br><span class="line">    &#125;,</span><br><span class="line">    getCookie:function(key,callback)&#123;</span><br><span class="line">        var allCookie = document.cookie;</span><br><span class="line">       var cookieArr  = allCookie.split(&apos;; &apos;);</span><br><span class="line">       cookieArr.forEach(ele=&gt; &#123;</span><br><span class="line">          var item = ele.split(&apos;=&apos;);</span><br><span class="line">          if(item[0] == key)&#123;</span><br><span class="line">             callback?callback(item[1]) : &apos;&apos;;</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       return this</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">manageCookie.setCookie(&apos;name&apos;,&apos;cc&apos;,3);</span><br><span class="line">manageCookie.setCookie(&apos;school&apos;,&apos;bufan&apos;,3).removeCookie(&apos;name&apos;).getCookie(&apos;school&apos;,cb)</span><br><span class="line">function cb(date)&#123;</span><br><span class="line">    console.log(date)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="localStorage-sessionStorage-Cookie-的区别"><a href="#localStorage-sessionStorage-Cookie-的区别" class="headerlink" title="localStorage ,sessionStorage ,Cookie 的区别"></a>localStorage ,sessionStorage ,Cookie 的区别</h3><ol><li>存储大小</li></ol><ul><li>cookie:一般不超过4k(每次http都会请求都会携带cookie),所以cookie只适合保存很小的数据,如会话标识)</li><li>sessionStorage,localStorage: 5M或者更大</li></ul><ol start="2"><li>数据有效期</li></ol><ul><li>cookie:一般由服务器生成,可以设置失效时间,若没有设置时间,关闭浏览器cookie失效,若设置了时间,cookie就会存放在硬盘里,过期才会失效</li><li>sessionStorage:仅在当前浏览器窗口关闭之前有效,关闭页面或者浏览器会被清除</li><li>localStorage: 永久有效,窗口或者浏览器关闭也会一直保存,除非手动永久清除,因此用作持久数据</li></ul><ol><li>作用域</li></ol><ul><li>cookie:在所有同源窗口中都是共享的</li><li>sessionStorage: 在同一个浏览器窗口是共享的(不同浏览器,同一个页面也是不共享的)</li><li>localStorage : 在所有同源窗口中都是共享的</li></ul><ol start="4"><li>通信</li></ol><ul><li>cookie: 始终携带在同源的http中,即使不需要,故cookie在浏览器和服务器之间来回传递;如果使用cookie保存过多数据会造成性能问题</li><li>sessionStorage,localStorage: 仅在客户端(浏览器)中保存,不参与和服务器的通信,不会自动把数据发送给服务器(仅在本地保存)</li></ul><ol start="5"><li>易用性</li></ol><ul><li>cookie:需要自己进行封装.原生的cookie接口不够友好</li><li>sessionStorage,localStorage: 原生接口可以接受,可以封装来对Object和Array有更好的支持</li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>cookie:判断用户是否登陆过网址,以便实现下次自动登录或记住密码;保存信息</li><li>sessionStorage: 敏感性账号一次性登录;单页面用的比较多</li><li>localStorage: 用于长期登录(判断用户是否已登录),适合长期存在本地的数据</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>登录权限验证</title>
      <link href="/2020/02/08/%E7%99%BB%E5%BD%95%E6%9D%83%E9%99%90%E9%AA%8C%E8%AF%81/"/>
      <url>/2020/02/08/%E7%99%BB%E5%BD%95%E6%9D%83%E9%99%90%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<p>权限验证</p><a id="more"></a><h3 id="session-权限验证原理"><a href="#session-权限验证原理" class="headerlink" title="session 权限验证原理"></a>session 权限验证原理</h3><ol><li>用户访问服务器,服务器会在必要的时候创建 session对象 ,该对象有一个唯一的sessionid</li><li>服务器把创建的session对象存储到服务器的session集合中,并把当前的sessionid通过请求的response对象设置到客户端的cookie中</li><li>客户端之后的每一次请求,都会默认携带cookie,服务器可以根据客户端是否有cookie,并且判断是否有可用的sessionid来判断用户时候登陆</li><li>session存在于服务端,cookie存在于客服端,session有一个默认的过期时间,大概20-30min可手动设置或清除</li><li>session存在一用户的整个回话期间,如果用户更换浏览器,则会创建新的session对象</li></ol><h3 id="token-权限验证原理"><a href="#token-权限验证原理" class="headerlink" title="token 权限验证原理"></a>token 权限验证原理</h3><ol><li>用户访问服务器,登陆成功后,服务器根据特定算法,生成一个字符串,返回给客户端,我们称之为token</li><li>之后客户每次发送请求.必须携带token</li><li>服务器不必关系某个请求从哪一台客户端发送过来,只需要对当前的token进行验证,那么就认为是通过的</li><li>token一般是有过期时间地点,这个由后台设定</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>跨域</title>
      <link href="/2020/02/07/%E8%B7%A8%E5%9F%9F%E5%A4%84%E7%90%86/"/>
      <url>/2020/02/07/%E8%B7%A8%E5%9F%9F%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>跨域</p><a id="more"></a><h3 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">JSONP只支持`GET`请求，CORS支持所有类型的HTTP请求。JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据</span><br><span class="line"></span><br><span class="line">//服务端返回如下（后端返回执行函数）：</span><br><span class="line">jsonPCallback(&#123;</span><br><span class="line">    &quot;status&quot;: true,</span><br><span class="line">    &quot;user&quot;: &quot;admin&quot;</span><br><span class="line">&#125;)</span><br><span class="line">// js写法</span><br><span class="line">var scriptEle = document.createElement(&apos;script&apos;);</span><br><span class="line">scriptEle.src = &quot;http://192.168.0.120:3000/users?callback=jsonpCallBack&quot;;</span><br><span class="line">document.body.appendChild(scriptEle);</span><br><span class="line">//浏览器机制会执行这个函数</span><br><span class="line">function jsonpCallBack(res) &#123;</span><br><span class="line">    console.log(res);</span><br><span class="line">&#125;</span><br><span class="line">node + express</span><br><span class="line">// router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">//   var callback = req.query.callback;</span><br><span class="line">//   res.send(callback+`(&#123;code:&apos;success&apos;,msg:&apos;请求到&apos;&#125;)`)</span><br><span class="line">// &#125;);</span><br></pre></td></tr></table></figure><h3 id="cors"><a href="#cors" class="headerlink" title="cors"></a>cors</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">在服务端   res.header(&apos;Access-Control-Allow-Origin&apos;, &apos;地址&apos;);</span><br><span class="line">router.get(&quot;/&quot;, function(req,res,next)&#123;</span><br><span class="line">    // 设置允许访问的头为：*  即任何地址都可访问 但是发送请求不能携带cookie</span><br><span class="line">    res.header(&apos;Access-Control-Allow-Origin&apos;, &apos;*&apos;);</span><br><span class="line">    // Access-Control-Allow-Headers ,可根据浏览器的F12查看,把对应的粘贴在这里就行</span><br><span class="line">    // res.header(&apos;Access-Control-Allow-Headers&apos;, &apos;Content-Type&apos;);</span><br><span class="line">    // res.header(&apos;Access-Control-Allow-Methods&apos;, &apos;*&apos;);</span><br><span class="line">    // res.header(&apos;Content-Type&apos;, &apos;application/json;charset=utf-8&apos;);</span><br><span class="line">    next();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="proxy-代理"><a href="#proxy-代理" class="headerlink" title="proxy 代理"></a>proxy 代理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在webpack中的webpack-dev-server中添加</span><br><span class="line">      proxy: &#123;</span><br><span class="line">      // 配置代理 希望拦截当前的host地址 替换为目标地址</span><br><span class="line">      // key: &#123;&#125;   ;  key为拦截的规则,可以是正则表达式 表示以什么开头</span><br><span class="line">      &apos;/admin&apos;: &#123;</span><br><span class="line">        target: `要代理的地址`,</span><br><span class="line">        changeOrigin: true, // 如果是跨域 需要添加</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          // [&apos;/admin&apos;]: &apos;/abc&apos;   /admin/xx/xx ==&gt; /abc/xx/xx</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h3 id="nginx-后端处理"><a href="#nginx-后端处理" class="headerlink" title="nginx 后端处理"></a>nginx 后端处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line"> listen 3002;</span><br><span class="line"> server_name localhost;</span><br><span class="line"> location /ok &#123;</span><br><span class="line"> proxy_pass http://localhost:3000;</span><br><span class="line"> # 指定允许跨域的方法，*代表所有</span><br><span class="line"> add_header Access-Control-Allow-Methods *;</span><br><span class="line"> # 预检命令的缓存，如果不缓存每次会发送两次请求</span><br><span class="line"> add_header Access-Control-Max-Age 3600;</span><br><span class="line"> # 带cookie请求需要加上这个字段，并设置为true</span><br><span class="line"> add_header Access-Control-Allow-Credentials true;</span><br><span class="line"> # 表示允许这个域跨域调用（客户端发送请求的域名和端口）</span><br><span class="line"> # $http_origin动态获取请求客户端请求的域 不用*的原因是带cookie的请求不支持*号</span><br><span class="line"> add_header Access-Control-Allow-Origin $http_origin;</span><br><span class="line"> # 表示请求头的字段 动态获取</span><br><span class="line"> add_header Access-Control-Allow-Headers</span><br><span class="line"> $http_access_control_request_headers;</span><br><span class="line"> # OPTIONS预检命令，预检命令通过时才发送请求</span><br><span class="line"> # 检查请求的类型是不是预检命令</span><br><span class="line"> if ($request_method = OPTIONS)&#123;</span><br><span class="line"> return 200;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ajax</title>
      <link href="/2020/02/06/%E6%89%8B%E5%8A%A8%E5%B0%81%E8%A3%85ajax/"/>
      <url>/2020/02/06/%E6%89%8B%E5%8A%A8%E5%B0%81%E8%A3%85ajax/</url>
      
        <content type="html"><![CDATA[<p>ajax</p><a id="more"></a><h3 id="ajax-请求"><a href="#ajax-请求" class="headerlink" title="ajax 请求"></a>ajax 请求</h3><ul><li>简单 ajax 请求的方式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id=&apos;btn&apos;&gt;&lt;/button&gt;</span><br><span class="line"> &lt;script&gt;</span><br><span class="line"> document.getElementById(&apos;btn&apos;).addEventlistener(&apos;click&apos;,loadTest());</span><br><span class="line"> function loadTest()&#123;</span><br><span class="line">             var xhr = new XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">        xhr.onreadystatechange = function () &#123;</span><br><span class="line">            if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) &#123;</span><br><span class="line">                console.log(xhr.responseText)</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                console.log(&apos;error&apos;)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // onreadystatechange 替代方案</span><br><span class="line">        xhr.onload = function () &#123;</span><br><span class="line">            console.log(this.responseText);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        xhr.open(&apos;GET&apos;, &apos;本地地址文件&apos;,true);</span><br><span class="line">        xhr.send();</span><br><span class="line"> &#125;</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="ajax-封装"><a href="#ajax-封装" class="headerlink" title="ajax 封装"></a>ajax 封装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">  &lt;script&gt;</span><br><span class="line">    function ajax(params)&#123;</span><br><span class="line">        if(!params.url)&#123;</span><br><span class="line">            console.log(&apos;一定要输入地址才能发送请求&apos;);</span><br><span class="line">            return</span><br><span class="line">        &#125;</span><br><span class="line">        var obj = &#123;</span><br><span class="line">            method : &apos;GET&apos;,</span><br><span class="line">            data:null,</span><br><span class="line">            success:function()&#123;</span><br><span class="line">                console.log(&apos;success&apos;)</span><br><span class="line">            &#125;,</span><br><span class="line">            fail:function()&#123;</span><br><span class="line">                console.log(&apos;fail&apos;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        params = Object.assign(obj,params)</span><br><span class="line">        var xhr = new XMLHttpRequest();</span><br><span class="line">        xhr.onload = function()&#123;</span><br><span class="line">            var data = Json.parse(xhr.responseText);</span><br><span class="line">            params.success(data)</span><br><span class="line">        &#125;</span><br><span class="line">        xhr.onerror = params.onerror;</span><br><span class="line">        xhr.open(params.method,params.url);</span><br><span class="line">        if(params.method === &apos;POST&apos;)&#123;</span><br><span class="line">            xhr.setRequestHeader(&apos;content-type&apos;,&apos;application/x-www-form-urlencoded&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">        xhr.send(params.data)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>原型链?</title>
      <link href="/2020/02/06/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
      <url>/2020/02/06/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<p>原型链?</p><a id="more"></a><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><ol><li>所有引用类型都有一个<strong>ptoto</strong>(隐式原型)属性指向一个对象</li><li>所有函数都有一个<strong>prototype</strong>(原型)属性指向一个对象</li><li>所有引用类型的<strong>proto</strong>属性指向它的构造函数的<strong>prototype</strong>,</li></ol><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>当访问一个对象的某个属性时,会在这个对象的本身属性上查找,<br>如果没有找到,则会在它的<strong>proto</strong>隐式原型上查找,即它的构造函数的<strong>prototype</strong>.如果还没有找到<br>就会在构造函数的<strong>prototype</strong>的<strong>proto</strong>中查找.这样一层一层向上查找就会形成一个链式结构<br>我们称之为原型链</p><h3 id="js-中的原型链"><a href="#js-中的原型链" class="headerlink" title="js 中的原型链"></a>js 中的原型链</h3><p><img src="/.com//y1.png" alt><br><img src="/.com//y2.png" alt><br><img src="/.com//y3.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">function Teacher(name,age)&#123;</span><br><span class="line">    this.name = name</span><br><span class="line">    this.age = age</span><br><span class="line"> &#125;</span><br><span class="line"> Teacher.color = &apos;yellow&apos;  构造函数中通过Teacher.color = &apos;yellow&apos; 这种方式添加(静态属性)  只能通过 Teacher.color 访问</span><br><span class="line"> function Student(name,age)&#123;</span><br><span class="line">    this.name = name</span><br><span class="line">    this.age = age</span><br><span class="line"> &#125;</span><br><span class="line"> var tea = new Teacher(&apos;仓波&apos;,30);</span><br><span class="line"> var stu = new Student(&apos;张三&apos;,18);</span><br><span class="line"></span><br><span class="line"> console.log(tea.__proto__ === Teacher.prototype ) //true</span><br><span class="line"></span><br><span class="line"> //  console.log(Teacher.prototype.constructor)  打印结果如下</span><br><span class="line">  /*</span><br><span class="line">  ƒ Teacher(name,age)&#123;</span><br><span class="line">    this.name = name</span><br><span class="line">    this.age = age</span><br><span class="line"> &#125;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// console.log(Teacher.prototype)   打印结果如下</span><br><span class="line">// console.log(tea.__proto__)   打印结果如下</span><br><span class="line">/*</span><br><span class="line">&#123;constructor: ƒ&#125;</span><br><span class="line">constructor: ƒ Teacher(name,age)</span><br><span class="line">__proto__: Object</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h3 id="原型对象方法"><a href="#原型对象方法" class="headerlink" title="原型对象方法"></a>原型对象方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> function Teacher(name)&#123;</span><br><span class="line">    this.name = name</span><br><span class="line"> &#125;</span><br><span class="line"> Teacher.prototype.age = 24</span><br><span class="line"> function Student(name,age)&#123;</span><br><span class="line">    this.name = name</span><br><span class="line">    this.age = age</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> var tea = new Teacher(&apos;仓波&apos;);</span><br><span class="line"> var stu = new Student(&apos;张三&apos;,18);</span><br><span class="line">// 实例.hasOwnProperty(属性) 方法可以检测一个属性是存在于实例中，还是存在于原型中。只在给定属性存在于对象实例中时，才会返回 true  实例.hasOwnProperty(属性)</span><br><span class="line"></span><br><span class="line"> console.log(&quot;在实例中 name&quot;,tea.hasOwnProperty(&apos;name&apos;));  // true</span><br><span class="line">console.log(&quot;在原型上  age&quot;,tea.hasOwnProperty(&quot;age&quot;)); // false</span><br></pre></td></tr></table></figure><h3 id="原型模式创建对象"><a href="#原型模式创建对象" class="headerlink" title="原型模式创建对象"></a>原型模式创建对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function Person()&#123;&#125;;</span><br><span class="line"></span><br><span class="line">// 使用字面量形式写的时候 会丢失constructor</span><br><span class="line">    Person.prototype = &#123;</span><br><span class="line">// constructor: Person, 会被实例读取</span><br><span class="line">name: &quot;李白&quot;,</span><br><span class="line">age: 24,</span><br><span class="line">sayName: function ()&#123;</span><br><span class="line">    console.log(this.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    var user = new Person();</span><br><span class="line">  console.log( Person.prototype.contructor)  undefined</span><br><span class="line">  console.log( user.__proto__.contructor)    undefined</span><br></pre></td></tr></table></figure><h3 id="面向对象中的继承实现"><a href="#面向对象中的继承实现" class="headerlink" title="面向对象中的继承实现"></a>面向对象中的继承实现</h3><ul><li><p>原型链（prototype chaining） 能访问 prototype 上的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function Teacher(name,age)&#123;</span><br><span class="line">  this.name = name</span><br><span class="line">  this.age = age</span><br><span class="line">&#125;</span><br><span class="line">Teacher.say = function()&#123;</span><br><span class="line">       console.log(this.name)</span><br><span class="line">   &#125;</span><br><span class="line">Student.prototype = new Teacher()</span><br><span class="line">function Student(name,age)&#123;</span><br><span class="line">  this.name = name</span><br><span class="line">  this.age = age</span><br><span class="line">&#125;</span><br><span class="line">var tea = new Teacher(&apos;仓波&apos;,30);</span><br><span class="line">var stu = new Student(&apos;张三&apos;,18);</span><br></pre></td></tr></table></figure></li><li><p>通过 call/apply 不能访问 prototype 上的方法</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function Teacher(name,age)&#123;</span><br><span class="line">   this.name = name</span><br><span class="line">   this.age = age</span><br><span class="line">   this.say = function()&#123;</span><br><span class="line">       console.log(this.name)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Student()&#123;</span><br><span class="line">   var args = arguments;</span><br><span class="line">   // Teacher.call(this,args[0],args[1])</span><br><span class="line">   Teacher.apply(this,args)</span><br><span class="line">&#125;</span><br><span class="line">var tea = new Teacher(&apos;仓波&apos;,30);</span><br><span class="line">var stu = new Student(&apos;张三&apos;,18);</span><br></pre></td></tr></table></figure><ul><li><p>通过 call/apply 和 原型链 prototype 共同实现 能访问 prototype 上的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function Teacher(name,age)&#123;</span><br><span class="line">  this.name = name</span><br><span class="line">  this.age = age</span><br><span class="line">  this.say = function()&#123;</span><br><span class="line">      console.log(this.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Teacher.prototype.jump = function()&#123;</span><br><span class="line">   console.log(this.age)</span><br><span class="line">&#125;</span><br><span class="line">function Student()&#123;</span><br><span class="line">  var args = arguments;</span><br><span class="line">  // Teacher.call(this,args[0],args[1])</span><br><span class="line">  Teacher.apply(this,args)</span><br><span class="line">&#125;</span><br><span class="line">Student.prototype = new Teacher();</span><br><span class="line">var tea = new Teacher(&apos;仓波&apos;,30);</span><br><span class="line">var stu = new Student(&apos;张三&apos;,18);</span><br></pre></td></tr></table></figure></li><li><p>对象冒充</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function Teacher(name,age)&#123;</span><br><span class="line">   this.name = name</span><br><span class="line">   this.age = age</span><br><span class="line">   this.say = function()&#123;</span><br><span class="line">       console.log(this.name)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Student(name,age)&#123;</span><br><span class="line">   this.Student = Teacher</span><br><span class="line">   this.Student(name,age)</span><br><span class="line">   delete this.Student</span><br><span class="line">&#125;</span><br><span class="line">Student.prototype = new Teacher();</span><br><span class="line">var tea = new Teacher(&apos;仓波&apos;,30);</span><br><span class="line">var stu = new Student(&apos;张三&apos;,18);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>最简单的双向数据绑定</title>
      <link href="/2020/02/06/%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/"/>
      <url>/2020/02/06/%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<p>vue</p><a id="more"></a><h3 id="实现-vue-最简单的双向数据绑定"><a href="#实现-vue-最简单的双向数据绑定" class="headerlink" title="实现 vue 最简单的双向数据绑定"></a>实现 vue 最简单的双向数据绑定</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Object.defineProperty(obj, &apos;val&apos;, &#123;&#125;)</span><br><span class="line"></span><br><span class="line"> &lt;h1&gt;双向数据绑定&lt;/h1&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; id=&quot;cal&quot;&gt;</span><br><span class="line">&lt;p id=&quot;p&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var obj = &#123;&#125;</span><br><span class="line">    Object.defineProperty(obj, &apos;val&apos;, &#123;</span><br><span class="line">        set(n) &#123;</span><br><span class="line">            document.getElementById(&apos;cal&apos;).value = n;</span><br><span class="line">            document.getElementById(&apos;p&apos;).innerHtml = n;</span><br><span class="line">        &#125;,</span><br><span class="line">        get() &#123;</span><br><span class="line">            console.log(2222)</span><br><span class="line">            return &apos;111&apos;   没有返回值控制台打印undefined</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    监听cal的键盘抬起事件</span><br><span class="line">    document.getElementById(&apos;cal&apos;).addEventListener(&apos;keyup&apos;,e=&gt;&#123;</span><br><span class="line">        obj.val = e.target.value;</span><br><span class="line">        console.log(e.target.value)</span><br><span class="line">    &#125;)</span><br><span class="line">    // 设置值触发set</span><br><span class="line">    obj.val = 2</span><br><span class="line">    console.log(obj.val)</span><br><span class="line">    // 读取值触发get</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js</title>
      <link href="/2020/01/02/js%E6%80%BB%E7%BB%93/"/>
      <url>/2020/01/02/js%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>js</p><a id="more"></a><h3 id="简述同步和异步的区别"><a href="#简述同步和异步的区别" class="headerlink" title="简述同步和异步的区别"></a>简述同步和异步的区别</h3><p>同步是阻塞模式 异步是非阻塞模式<br>同步就是一个进程执行某个请求的时候,若请求需要一段时间才能返回消息,那么这个进程就会一直等待下去,直到收到返回信息,才会执行下一个请求<br>异步是指进程不用等待下下去而是继续执行下面的操作,不管其他进程的状态,当有消息系统会通知进程进行处理,这样可以提高执行效率</p><h3 id="怎么添加、移除、复制、创建、和查找节点"><a href="#怎么添加、移除、复制、创建、和查找节点" class="headerlink" title="怎么添加、移除、复制、创建、和查找节点"></a>怎么添加、移除、复制、创建、和查找节点</h3><p>添加 document.getElementByClassName/TagName/Id(‘’).appendChild(“div”) 添加到某个元素内部的最后面 还可以添加原有的元素,会将元素从原来的位置移到新的位置<br>document.getElementByClassName/TagName/Id(‘’).insertBefore(“ul.firstChild”) 指定某个元素内部的节点的前面</p><p>移除 document.getElementByClassName/TagName/Id(‘’).removeChild() 用于移除某个节点,返回被移除的节点,被移除的节点扔存在文档中,只不过文档中没有其位置</p><p>复制 CloneNode() 用于复制节点接受一个布尔值 true 表示深复制(复制节点本身以及内部所有子节点) false 浅复制(复制节点本身,不复制子节点)</p><p>创建 document.createElement(‘p’) 创建 p 节点</p><p>查找节点 ul.firstChild ul.lastChild ul.children li.previousSibing li.nextSibing</p><h3 id="数组去重的-3-中方法"><a href="#数组去重的-3-中方法" class="headerlink" title="数组去重的 3 中方法"></a>数组去重的 3 中方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,32,1,1,2,3,3,2,1]</span><br><span class="line">var arr1 = [];</span><br><span class="line">for(var i = 0;i,arr.length;i++)&#123;</span><br><span class="line">if(arr[i].indexOf&lt;1)&#123;</span><br><span class="line">    arr1.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(arr1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">利用对象的唯一性去除重复</span><br><span class="line">var arr1 = [];</span><br><span class="line">var obj = &#123;&#125;;</span><br><span class="line">for(var i = 0;i&lt;arr.length;i++)&#123;</span><br><span class="line">    if(!obj[arr[i]])&#123;</span><br><span class="line">        obj[arr[i]] = 1;</span><br><span class="line">        arr1.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(arr1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">es6数组去重</span><br><span class="line">var arr = [1,1,32,2,2,2,4,4,4,2,3,3,2,2]</span><br><span class="line">function unique(arr) &#123;</span><br><span class="line">  return arr.filter(function(item, index, arr) &#123;</span><br><span class="line">    //当前元素，在原始数组中的第一个索引==当前索引值，否则返回当前元素</span><br><span class="line">    return arr.indexOf(item) === index;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串去重"><a href="#字符串去重" class="headerlink" title="字符串去重"></a>字符串去重</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var str = &apos;fegfsgfsfdssfdgfdgfdg&apos;;</span><br><span class="line">var newStr = &apos;&apos;;</span><br><span class="line">var obj = &#123;&#125;;</span><br><span class="line">for (var i = 0; i &lt; str.length; i++) &#123;</span><br><span class="line">    if (!obj[str[i]]) &#123;</span><br><span class="line">        obj[str[i]] = 1</span><br><span class="line">        newStr += str[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(newStr)</span><br></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><ul><li>利用递归实现 1+2+3+…+100 的和</li></ul><figure class="highlight plain"><figcaption><span>sum(n)&#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    if(n!=0)&#123;</span><br><span class="line">        return sum(n-1)+n</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        return n</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>递归实现一个数的阶乘</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">function mul(x)&#123;</span><br><span class="line">    if(x===0||x===1)&#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return x*mul(x-1);</span><br><span class="line">&#125;</span><br><span class="line">console.log(mul(3));</span><br><span class="line">3的阶乘结果就出来了 6</span><br><span class="line"></span><br><span class="line">实现1!+2!+3!+.....n! 的之和</span><br><span class="line"> function add(x)&#123;</span><br><span class="line">    if(x===0||x===1)&#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return mul(x)+add(x-1);   //mul()调用上面的那个方法</span><br><span class="line">&#125;</span><br><span class="line">console.log(add(3));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>1 + 1 + 2 + 3 + 5 + 8 + 13 + 21 + …. 实现斐波那契数列</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">走楼梯一样 100层楼梯从1到100层 一次走一步或两步 一共多少种走法</span><br><span class="line"> function add(x)&#123;</span><br><span class="line">        if (n === 1 || n === 2) &#123;</span><br><span class="line">              return 1;</span><br><span class="line">        &#125;</span><br><span class="line">        return add(x-1) + add(x-2)</span><br><span class="line">    &#125;</span><br><span class="line">    add(5)</span><br></pre></td></tr></table></figure><h3 id="如何判断一般数据类型"><a href="#如何判断一般数据类型" class="headerlink" title="如何判断一般数据类型"></a>如何判断一般数据类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">var rs = Object.prototype.toString.call()</span><br><span class="line"></span><br><span class="line">console.log(rs(&quot;jerry&quot;));//[object String]</span><br><span class="line"></span><br><span class="line">console.log(rs(12));//[object Number]</span><br><span class="line"></span><br><span class="line">console.log(rs(true));//[object Boolean]</span><br><span class="line"></span><br><span class="line">console.log(rs(undefined));//[object Undefined]</span><br><span class="line"></span><br><span class="line">console.log(rs(null));//[object Null]</span><br><span class="line"></span><br><span class="line">console.log(rs(&#123;name: &quot;jerry&quot;&#125;));//[object Object]</span><br><span class="line"></span><br><span class="line">console.log(rs(function()&#123;&#125;));//[object Function]</span><br><span class="line"></span><br><span class="line">console.log(rs([]));//[object Array]</span><br><span class="line"></span><br><span class="line">console.log(rs(new Date));//[object Date]</span><br><span class="line"></span><br><span class="line">console.log(rs(/\d/));//[object RegExp]</span><br><span class="line"></span><br><span class="line">console.log(rs(new Person));//[object Object]</span><br></pre></td></tr></table></figure><h3 id="如何判断一个对象是否为空"><a href="#如何判断一个对象是否为空" class="headerlink" title="如何判断一个对象是否为空"></a>如何判断一个对象是否为空</h3><p>var obj = {</p><p>}<br>Object.keys(obj)通过这个方法可以吧对象的属性弄成一个数组 通过 Object.keys(obj).length 判断是否 0–空</p><h3 id="判断一个变量是否为数组"><a href="#判断一个变量是否为数组" class="headerlink" title="判断一个变量是否为数组"></a>判断一个变量是否为数组</h3><p>var arr =[1,2,3];<br>console.log(arr instanceof Array); //true;<br>console.log(arr.constructor === Array); //true;</p><h3 id="事件委托的原理"><a href="#事件委托的原理" class="headerlink" title="事件委托的原理"></a>事件委托的原理</h3><pre><code>就是通过DOM事件的捕获阶段 向一层传播事件</code></pre><h3 id="写一个函数-清除字符串前后空格"><a href="#写一个函数-清除字符串前后空格" class="headerlink" title="写一个函数.清除字符串前后空格"></a>写一个函数.清除字符串前后空格</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function clear(str)&#123;</span><br><span class="line">    if(str &amp;&amp; str === &quot;string&quot;)</span><br><span class="line">    return str.replace(/(^\s*)|(\s*)$/g,&quot;&quot;)</span><br><span class="line">&#125;</span><br><span class="line">去除所有空格   str.replace(/^\s*/g,&quot;&quot;)</span><br></pre></td></tr></table></figure><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><ul><li>随机取 1-10 的整数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a =  (Math.random()*10)</span><br><span class="line">a = Math.ceil(a)</span><br></pre></td></tr></table></figure><ul><li>打乱排序</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line">    // arr.sort(function()&#123;return 1;&#125;);</span><br><span class="line">    //  arr.sort(function()&#123;return Math.random()&gt;0.5?-1:1;&#125;);</span><br><span class="line">    // console.log(arr); //结果不唯一</span><br><span class="line">    function randomArr(arr) &#123;</span><br><span class="line">        let length = arr.length;</span><br><span class="line">        while (length &gt; 1) &#123;</span><br><span class="line">            let index = Math.floor(Math.random() * length--);</span><br><span class="line">            [arr[length], arr[index]] = [arr[index], arr[length]];</span><br><span class="line">        &#125;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line">    function randomArr(arr) &#123;</span><br><span class="line">        let length = arr.length;</span><br><span class="line">        //while执行至条件不成立则跳出循环</span><br><span class="line">        for (var i = length; i &gt;= 1; i--) &#123;</span><br><span class="line">            // --length 先自减再执行表达式</span><br><span class="line">            // length-- 先执行表达式再自减</span><br><span class="line">            //length 先执行random和floor得到index后再自减</span><br><span class="line">            let index = Math.floor(Math.random() * length--);</span><br><span class="line">            //es6的解构赋值，等号的左右两边模式相同，就会将右边的值赋给左边的变量</span><br><span class="line">            [arr[length], arr[index]] = [arr[index], arr[length]];</span><br><span class="line">        &#125;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="new-操作符干了什么"><a href="#new-操作符干了什么" class="headerlink" title="new 操作符干了什么"></a>new 操作符干了什么</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> function  Func()&#123;</span><br><span class="line">&#125;</span><br><span class="line">var  fun = new Func()</span><br><span class="line">1 创建一个空对象</span><br><span class="line">var fun = &#123;&#125;</span><br><span class="line">2 设置原型链</span><br><span class="line">fun.__proto__ = Func.prototype</span><br><span class="line">3 让Fun中的this指向 fun 并执行Func</span><br><span class="line">var result = Func.call(fun) call方法会返回数据</span><br><span class="line">4 判断Func的返回值类型</span><br><span class="line">如果return 出来东西是对象的话就直接返回 return 的内容，没有的话就返回创建的这个对象</span><br><span class="line">如果是值类型 返回obj 如果是引用类型就返回这个引用类型的数据对象</span><br><span class="line">   if (typeof(result) == &quot;object&quot;)&#123;</span><br><span class="line">       fun=result;</span><br><span class="line">   &#125;</span><br><span class="line">   else&#123;</span><br><span class="line">       fun=obj;;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="null-和-undefined-的区别"><a href="#null-和-undefined-的区别" class="headerlink" title="null 和 undefined 的区别"></a>null 和 undefined 的区别</h3><p>要用全等于比较<br>null == undefined true<br>null === undefined false<br>null 表示 “无” 的对象转化为 数字为 0 undefined 转换数字为 NaN</p><p>undefined :<br>变量声量但为赋值 调用函数应该提供的参数没有提供 对象没有赋值的属性 函数没有返回值</p><p>null<br>作为函数的参数 表示该函数的参数不是对象 作为对象原型链的终点</p><h3 id="eval"><a href="#eval" class="headerlink" title="eval ?"></a>eval ?</h3><p>eval()会当成参数解析成 js 代码并运行,返回执行的结果<br>eval 不安全 非常消耗性能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">json字符串转换为json对象可以使用</span><br><span class="line">var json=&quot;&#123;name:&apos;Mr.CAO&apos;,age:30&#125;&quot;;</span><br><span class="line">var jsonObj=eval(&quot;(&quot;+json+&quot;)&quot;);</span><br><span class="line">console.log(jsonObj);</span><br></pre></td></tr></table></figure><h3 id="求一个字符串的长度"><a href="#求一个字符串的长度" class="headerlink" title="求一个字符串的长度"></a>求一个字符串的长度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var str = &apos;abddffdfsf你好&apos;;</span><br><span class="line">function string(str) &#123;</span><br><span class="line">    var len = 0,</span><br><span class="line">        code = 0;</span><br><span class="line">    for (var i = 0; i &lt; str.length; i++) &#123;</span><br><span class="line">        code = str.charCodeAt(i)</span><br><span class="line">        if (code &gt;= 0 &amp;&amp; code &lt;= 127) &#123;</span><br><span class="line">            len += 1;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            len += 2</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return len</span><br><span class="line">&#125;</span><br><span class="line">var a = string(str);</span><br><span class="line">console.log(a)</span><br></pre></td></tr></table></figure><h3 id="扁平化数组"><a href="#扁平化数组" class="headerlink" title="扁平化数组"></a>扁平化数组</h3><ul><li>就是把几纬数组转化成一纬数组</li></ul><ul><li>方式一 flat()</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var arr = [1,12,32,[2,32,32,32]]</span><br><span class="line">var arr1 = arr.flat(1) flat(&apos;里面的数子取决于是几纬数组&apos;) 如果不管有多少层嵌套，都要转成一维数组，可以用Infinity关键字作为参数。</span><br></pre></td></tr></table></figure><ul><li>方式二 toString().split(‘,’)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,12,32,[2,32,[32,32]]]</span><br><span class="line">var arr1 = arr.toString().split(&apos;,&apos;)</span><br></pre></td></tr></table></figure><ul><li>方式三遍历</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function flatten(arr)&#123;</span><br><span class="line">    var res = [];</span><br><span class="line">    for(var i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">        if(Array.isArray(arr[i]))&#123;</span><br><span class="line">            res = res.concat(flatten(arr[i]));</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            res.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简单的深拷贝和浅拷贝"><a href="#简单的深拷贝和浅拷贝" class="headerlink" title="简单的深拷贝和浅拷贝"></a>简单的深拷贝和浅拷贝</h3><ul><li>浅拷贝 就是克隆一个对象里面如果有复杂数据类型的话 他们两个会指向同一个地址 你变我也变</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var obj = &#123;</span><br><span class="line">    name: &apos;张三&apos;,</span><br><span class="line">    age: 24,</span><br><span class="line">    friends: [&apos;李四&apos;, &apos;王二&apos;]</span><br><span class="line">&#125;</span><br><span class="line">var obj1 = &#123;&#125;</span><br><span class="line">// Object.assign 浅拷贝</span><br><span class="line">obj1 = Object.assign(obj1, obj);</span><br><span class="line">// for(var i in obj)&#123;</span><br><span class="line">//      obj1[i] = obj[i]</span><br><span class="line">// &#125;</span><br><span class="line">// obj1.friends[0] = &apos;libai&apos;</span><br><span class="line">// console.log(obj1.friends)</span><br><span class="line">// console.log(obj1.friends)</span><br></pre></td></tr></table></figure><ul><li>深拷贝 就是克隆一个对象里面如果有复杂数据类型的话 改变复杂数据类型的地址 你变我不变</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    var obj = &#123;</span><br><span class="line">    name: &apos;张三&apos;,</span><br><span class="line">    age: 24,</span><br><span class="line">    friends: [&apos;李四&apos;, &apos;王二&apos;],</span><br><span class="line">    like: &#123;</span><br><span class="line">        sing: &apos;fdsfd&apos;,</span><br><span class="line">        jump: &apos;fdsfds&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function deepClone(obj) &#123;</span><br><span class="line">    var newObj = &#123;&#125;</span><br><span class="line">    if (obj === null) return null;</span><br><span class="line">    if (obj instanceof Array) return [...obj];</span><br><span class="line">    for (var i in obj) &#123;</span><br><span class="line">        newObj[i] = typeof obj[i] === &apos;object&apos; ? deepClone(obj[i]) : obj[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return newObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><ul><li>函数外部能访问函数内部的作用域</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function f1()&#123;</span><br><span class="line">        var n = 123;</span><br><span class="line">        function f2()&#123;    //f2是一个闭包</span><br><span class="line">            alert(n)</span><br><span class="line">        &#125;</span><br><span class="line">        return f2;</span><br><span class="line">    &#125;</span><br><span class="line">    原因：f1是f2的父函数，f2被赋给了一个全局变量，f2始终存在内存中，f2的存在依赖f1，因此f1也始终存在内存中，不会在调用结束后，被垃圾回收机制回收</span><br></pre></td></tr></table></figure><ul><li>闭包经典案例循环绑定点击事件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">var oBox = document.getElementsByClassName(&apos;box&apos;);</span><br><span class="line">    for (var i = 0; i &lt; oBox.length; i++) &#123;</span><br><span class="line">        oBox[i].onclick = (function(i)&#123;</span><br><span class="line">            return function()&#123;</span><br><span class="line">                console.log(i)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)(i)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="判断字符串中出现最多次数-有几次"><a href="#判断字符串中出现最多次数-有几次" class="headerlink" title="判断字符串中出现最多次数,有几次"></a>判断字符串中出现最多次数,有几次</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    var str = &apos;asdfssaaasasasasaa&apos;;</span><br><span class="line">var json = &#123;&#125;;</span><br><span class="line">for (var i = 0; i &lt; str.length; i++) &#123;</span><br><span class="line">    if(!json[str.charAt(i)])&#123;</span><br><span class="line">       json[str.charAt(i)] = 1;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">       json[str.charAt(i)]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">var iMax = 0;</span><br><span class="line">var iIndex = &apos;&apos;;</span><br><span class="line">for(var i in json)&#123;</span><br><span class="line">    if(json[i]&gt;iMax)&#123;</span><br><span class="line">         iMax = json[i];</span><br><span class="line">         iIndex = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;        </span><br><span class="line">console.log(&apos;出现次数最多的是:&apos;+iIndex+&apos;出现&apos;+iMax+&apos;次&apos;);</span><br></pre></td></tr></table></figure><h3 id="获取浏览器url中查询字符串找中的参数"><a href="#获取浏览器url中查询字符串找中的参数" class="headerlink" title="获取浏览器url中查询字符串找中的参数"></a>获取浏览器url中查询字符串找中的参数</h3><p>测试地址: <a href="http://www.123.com/abc?name=xiaomiong&amp;age=23" target="_blank" rel="noopener">http://www.123.com/abc?name=xiaomiong&amp;age=23</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function showWindowHref()&#123;</span><br><span class="line">    // var sHref = window.location.href;</span><br><span class="line">    var sHref = &apos;http://www.232.com/min/acf.html?leader=12333&amp;name=xiaoming&amp;age=23&apos;;</span><br><span class="line">    var args = sHref .split(&apos;?&apos;);</span><br><span class="line">   </span><br><span class="line">    if(args[0] == sHref)&#123;</span><br><span class="line">        return &apos;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    var arr = args[1].split(&apos;&amp;&apos;);</span><br><span class="line">    var obj = &#123;&#125;</span><br><span class="line">    for(var i = 0;i&lt;arr.length;i++)&#123;</span><br><span class="line">        var arg = arr[i].split(&apos;=&apos;);</span><br><span class="line">        obj[arg[0]] = arg[1];</span><br><span class="line">    &#125;</span><br><span class="line">    return obj;</span><br><span class="line">&#125;</span><br><span class="line">var href = showWindowHref();</span><br><span class="line">console.log(href[&apos;name&apos;])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>滚动到底部</title>
      <link href="/2019/10/29/%E6%BB%9A%E5%8A%A8%E5%88%B0%E5%BA%95%E9%83%A8/"/>
      <url>/2019/10/29/%E6%BB%9A%E5%8A%A8%E5%88%B0%E5%BA%95%E9%83%A8/</url>
      
        <content type="html"><![CDATA[<p>是否滚动到浏览器底部</p><a id="more"></a><h4 id="scroll"><a href="#scroll" class="headerlink" title="scroll"></a>scroll</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">window.addEventListener(&quot;scroll&quot;,function(event)&#123;</span><br><span class="line">    兼容浏览器</span><br><span class="line">    var scrollTop = document.documentElement.scrollTop || window.pageYoffset || document.body.scrollTop;</span><br><span class="line"></span><br><span class="line">    if(document.document.scrollHeight == document.documentElement.clientHeight + scrollTop)&#123;</span><br><span class="line">        </span><br><span class="line">        console.log(document.documentElement.scrollHeight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>排序和递归</title>
      <link href="/2019/09/29/%E6%8E%92%E5%BA%8F%E5%92%8C%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/"/>
      <url>/2019/09/29/%E6%8E%92%E5%BA%8F%E5%92%8C%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<!-- ### 排序算法 --><blockquote><p>在生活中，我们离不开排序。例如体育课上按身高排的队；又如考试过后按成绩排的名次。在编程中也是如此，例如当开发一个学生管理系统，需要按照学好从小到大进行排序；开发一个平台，需要把同类商品按价格从高到低排序。（当然，一般前端不负责处理业务逻辑。）由此可见，排序无处不在。排序看似简单，但是背后却隐藏了多种多样的算法与思想。一个算法的好坏是通过 时间复杂度 与 空间复杂度 来衡量的。简单来说，时间复杂度 就是执行算法的 时间成本 ，空间复杂度 则是执行算法的 空间成本 。</p></blockquote><a id="more"></a><h3 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h3><p>稳定：如果 a 原本在 b 前面，而 a=b，排序之后 a 仍然在 b 的前面</p><p>不稳定：如果 a 原本在 b 的前面，而 a=b，排序之后 a 可能会出现在 b 的后面</p><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><p>时间复杂度 与 空间复杂度 都是用 “大 O” 来表示，写作 O(*)。有一点值得注意的是，我们谈论复杂度，一般谈论的都是时间复杂度。</p><p>常见时间复杂度的 “大 O 表示法” 描述有以下几种：<br>| 时间复杂度 | 非正式术语 |<br>| —- | —- |<br>|O(1)| 常数阶|<br>|O(n)| 线性阶|<br>|O(n2)| 平方阶|<br>|O(log n)| 对数阶|<br>|O(n log n)| 线性对数阶|<br>|O(n3)| 立方阶|<br>|O(2n)| 指数阶|</p><p>一个算法在 N 规模下所消耗的时间消耗从大到小如下：</p><p>O(1) &lt; O(log n) &lt; O(n) &lt; O(n log n) &lt; O(n2) &lt; O(n3) &lt; O(2n)</p><h2 id="常见数组排序方法"><a href="#常见数组排序方法" class="headerlink" title="常见数组排序方法"></a>常见数组排序方法</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li><li>之所以叫冒泡排序，每一轮两两比较之后，都会冒出一个本轮最大的数，将其移动到本轮尾部。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要几个轮次 6个数排序 最大需要5轮</span></span><br><span class="line"><span class="comment">// 外层循环控制轮次</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - i; j++) &#123;</span><br><span class="line"><span class="comment">// 经过这样for循环,我们能找到本轮最大的数,并排在本轮尾部</span></span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line"><span class="comment">// 交换位置</span></span><br><span class="line"><span class="keyword">var</span> temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 5, 12, 32, 40, 41]</span></span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>选择排序是一种简单直观的排序算法。它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到全部待排序的数据元素排完。</p><p><img src="https://user-gold-cdn.xitu.io/2019/7/8/16bcf4425ac4d235?imageslim" alt></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">var</span> minIndex = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[minIndex] &gt; arr[j]) &#123;</span><br><span class="line">minIndex = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (minIndex !== i) &#123;</span><br><span class="line"><span class="comment">// 交换位置</span></span><br><span class="line"><span class="keyword">var</span> temp = arr[i];</span><br><span class="line">arr[i] = arr[minIndex];</span><br><span class="line">arr[minIndex] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p><p>插入排序的算法步骤如下：</p><ul><li>从第一个元素开始，该元素可以认为已经被排序；</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li><li>重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置；</li><li>将新元素插入到该位置后；</li><li>重复步骤 2~5。</li></ul><p><img src="https://user-gold-cdn.xitu.io/2019/7/8/16bcf447e9291320?imageslim" alt></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> len = arr.length;</span><br><span class="line"><span class="keyword">var</span> j, temp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">j = i - <span class="number">1</span>;</span><br><span class="line">temp = arr[i];</span><br><span class="line"><span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp) &#123;</span><br><span class="line">arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>堆排序 是指利用 <code>二叉堆</code> 这种数据结构所设计的一种排序算法。堆是一个近似 完全二叉树 的结构，并同时满足 堆积的性质 ：即子节点的键值或索引总是小于（或者大于）它的父节点。</p><p>二叉堆分以下两个类型：</p><ul><li>最大堆： 最大堆任何一个父节点的值，都大于等于它左右孩子节点的值。</li></ul><p><img src="https://user-gold-cdn.xitu.io/2019/7/2/16bb288163c5be34?imageslim" alt></p><blockquote><p>数组表示如下：[10, 8, 9, 7, 5, 4, 6, 3, 2]</p></blockquote><ul><li>最小堆：最小堆任何一个父节点的值，都小于等于它左右孩子节点的值。</li></ul><p><img src="https://user-gold-cdn.xitu.io/2019/7/2/16bb288174479a44?imageslim" alt></p><blockquote><p>数组表示如下：[1, 3, 2, 6, 5, 7, 8, 9, 10]</p></blockquote><p>堆排序的算法步骤如下：</p><ul><li>把无序数列构建成二叉堆；</li><li>循环删除堆顶元素，替换到二叉堆的末尾，调整堆产生新的堆顶。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 堆下沉调整 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">adjustHeap</span> (<span class="params">arr, parentIndex, length</span>) =&gt; </span>&#123;</span><br><span class="line"><span class="keyword">var</span> temp = arr[parentIndex]; <span class="comment">/* temp保存父节点值，用于最后赋值 */</span></span><br><span class="line"><span class="keyword">var</span> childIndex = <span class="number">2</span> * parentIndex + <span class="number">1</span>; <span class="comment">/* 保存子节点位置 */</span></span><br><span class="line"><span class="keyword">while</span> (childIndex &lt; length) &#123;</span><br><span class="line"><span class="comment">/* 如果有右子节点，且右子节点大于左子节点的值，则定位到右子节点 */</span></span><br><span class="line"><span class="keyword">if</span> (childIndex + <span class="number">1</span> &lt; length &amp;&amp; arr[childIndex + <span class="number">1</span>] &gt; arr[childIndex]) &#123;</span><br><span class="line">childIndex++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 如果父节点小于任何一个子节点的值，直接退出循环 */</span></span><br><span class="line"><span class="keyword">if</span> (temp &gt;= arr[childIndex]) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 无序交换，单向赋值即可 */</span></span><br><span class="line">arr[parentIndex] = arr[childIndex];</span><br><span class="line">parentIndex = childIndex;</span><br><span class="line">childIndex = <span class="number">2</span> * childIndex + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">arr[parentIndex] = temp;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">heapSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="comment">/* 把无序数列构建成最大堆 */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>); i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">adjustHeap(arr, i, arr.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line"><span class="comment">/* 交换最后一个元素与第一个元素 */</span></span><br><span class="line">[arr[i], arr[<span class="number">0</span>]] = [arr[<span class="number">0</span>], arr[i]];</span><br><span class="line"><span class="comment">/* 调整最大堆 */</span></span><br><span class="line">adjustHeap(arr, <span class="number">0</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>递归是一种编程模式，用于一个任务可以被分割为多个相似的更简单的任务的场景。</p><p>当一个函数解决一个任务时，在该过程中它可以调用很多其它函数。那么当一个函数调用<strong>自身</strong>时，就称其为<strong>递归</strong>。</p><h3 id="两种思考方式"><a href="#两种思考方式" class="headerlink" title="两种思考方式"></a>两种思考方式</h3><p>简单起见，我们写一个函数 <code>pow(x, n)</code>，它可以计算 <code>x</code> 的 <code>n</code> 次方，即用 <code>x</code> 乘以自身 <code>n</code> 次。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pow(<span class="number">2</span>, <span class="number">2</span>) = <span class="number">4</span></span><br><span class="line">pow(<span class="number">2</span>, <span class="number">3</span>) = <span class="number">8</span></span><br><span class="line">pow(<span class="number">2</span>, <span class="number">4</span>) = <span class="number">16</span></span><br></pre></td></tr></table></figure><p>有两种实现方式。</p><ol><li><p>迭代思路：<code>for</code> 循环：</p> <figure class="highlight js"><figcaption><span>run</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pow</span>(<span class="params">x, n</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> result = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在循环中用 x 乘以 result</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">result *= x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(pow(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure></li><li><p>递归思路：简化任务，调用自身：</p> <figure class="highlight js"><figcaption><span>run</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pow</span>(<span class="params">x, n</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x * pow(x, n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(pow(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure></li></ol><p>注意递归方式完全不相同。</p><p>当 <code>pow(x, n)</code> 被调用时，执行分为两个分支：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">              <span class="keyword">if</span> n==<span class="number">1</span>  = x</span><br><span class="line">             /</span><br><span class="line">pow(x, n) =</span><br><span class="line">             \</span><br><span class="line">              <span class="keyword">else</span>     = x * pow(x, n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><ol><li>如果 <code>n == 1</code>，所有事情都会很简单，这叫做递归的<strong>基础</strong>(跳出条件)，因为它立即得到显而易见的结果：<code>pow(x, 1)</code> 等于 <code>x</code>。</li><li>否则，我们可以用 <code>x * pow(x, n - 1)</code> 表示 <code>pow(x, n)</code>。在数学里，可能会这么写 <code>x<sup>n</sup> = x * x<sup>n-1</sup></code>。这叫做<strong>一个递归步骤</strong>：我们将任务转变为更简单的行为（<code>x</code> 的乘法）和更简单的同类任务调用（更小的 <code>n</code> 给 <code>pow</code>）。后面步骤继续简化直到 <code>n</code> 等于 <code>1</code>。</li></ol><p>我们也可以说 <code>pow</code> <strong>递归的调用自身</strong> 直到 <code>n == 1</code>。</p><p><img src="/.com//pow.svg" alt="recursive diagram of pow"></p><p>比如，为了计算 <code>pow(2, 4)</code>，递归变体经过了下面几个步骤：</p><ol><li><code>pow(2, 4) = 2 * pow(2, 3)</code></li><li><code>pow(2, 3) = 2 * pow(2, 2)</code></li><li><code>pow(2, 2) = 2 * pow(2, 1)</code></li><li><code>pow(2, 1) = 2</code></li></ol><p>所以，递归生成了更简单的函数调用，然后 —— 更加简单，继续，直到结果变得很明显。</p><figure class="highlight plain"><figcaption><span>header</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">递归解决方案一般比迭代更简洁。</span><br><span class="line"></span><br><span class="line">这里我们可以使用三元运算符 `?` 来替换 `if` 语句，从而让 `pow(x, n)` 更简洁并且可读性依然很高：</span><br><span class="line"></span><br><span class="line">```js run</span><br><span class="line">function pow(x, n) &#123;</span><br><span class="line">  return (n == 1) ? x : (x * pow(x, n - 1));</span><br><span class="line">&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>最大的嵌套调用次数（包括首次）称为<strong>递归深度</strong>。在我们的例子中，它正好等于 <code>n</code>。</p><p>最大递归深度受限于 JavaScript 引擎。我们可以确信基本是 10000，有些引擎可能允许更大，但是 100000 很可能就超过了限制。有一些自动优化能够缓解这个（「尾部调用优化」），但是它们还没有被完全支持，只能用于简单场景。</p><p>这就限制了递归的应用，但是递归仍然被广泛使用。有很多任务使用递归思路会让代码更简单，更容易维护。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS3</title>
      <link href="/2019/09/24/CSS3/"/>
      <url>/2019/09/24/CSS3/</url>
      
        <content type="html"><![CDATA[<p>难搞的 CSS3</p><a id="more"></a><h3 id="CSS3-渐变效果"><a href="#CSS3-渐变效果" class="headerlink" title="CSS3 渐变效果"></a>CSS3 渐变效果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">线性渐变</span><br><span class="line">background: linear-gradient(to right,color1,color2,clor3);</span><br><span class="line"></span><br><span class="line">径向渐变</span><br><span class="line">background: radial-gradient(circle at 10px 10px ,color1,color2,clor3);</span><br></pre></td></tr></table></figure><h3 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transtion:all ease 0.5s</span><br></pre></td></tr></table></figure><ul><li>2D 转换<blockquote><p>缩放 scale(x, y) 可以对元素进行水平和垂直方向的缩放，x、y 的取值可为小数，不可为负值；<br>移动 translate(x, y) 可以改变元素的位置，x、y 可为负值；<br>旋转 rotate(deg) 可以对元素进行旋转，正值为顺时针，负值为逆时针；</p></blockquote></li></ul><h3 id="实现一个立方体"><a href="#实现一个立方体" class="headerlink" title="实现一个立方体"></a>实现一个立方体</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* translate3d(x,y,z) */</span><br><span class="line">    .box &#123;</span><br><span class="line">        position: relative;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        margin: 100px auto;</span><br><span class="line">        perspective: 1000px;</span><br><span class="line">        transform-style: preserve-3d;</span><br><span class="line">        transition: all 1s ease;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .side &#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        left: 0;</span><br><span class="line">        top: 0;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        border: 1px solid #333;</span><br><span class="line">        opacity: .5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .side.front &#123;</span><br><span class="line">        transform: translateZ(100px);</span><br><span class="line">        background-color: blue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .side.back &#123;</span><br><span class="line">        transform: translateZ(-100px);</span><br><span class="line">        background-color: pink;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .side.left &#123;</span><br><span class="line">        transform: translateX(-100px) rotateY(90deg);</span><br><span class="line">        background-color: orange;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .side.right &#123;</span><br><span class="line">        transform: translateX(100px) rotateY(90deg);</span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .side.top &#123;</span><br><span class="line">        transform: translateY(-100px) rotateX(90deg);</span><br><span class="line">        background-color: green;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .side.bottom &#123;</span><br><span class="line">        transform: translateY(100px) rotateX(90deg);</span><br><span class="line">        background-color: yellow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .box:hover &#123;</span><br><span class="line">        transform: rotateX(360deg) rotateY(360deg);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"side front"</span>&gt;</span>前面<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"side back"</span>&gt;</span>后面<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"side left"</span>&gt;</span>左面<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"side right"</span>&gt;</span>右面<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"side top"</span>&gt;</span>上面<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"side bottom"</span>&gt;</span>下面<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h3><ul><li>animation: move 2s linear 2s 3 alternate both;</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.box&#123;</span><br><span class="line">position: relative;</span><br><span class="line">width: 150px;</span><br><span class="line">height: 150px;</span><br><span class="line">background-color: red;</span><br><span class="line">animation: move 2s linear 2s 3 alternate both;</span><br><span class="line">&#125;</span><br><span class="line">.box:hover&#123;</span><br><span class="line">animation-play-state: paused;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes move&#123;</span><br><span class="line">0%&#123;</span><br><span class="line">transform: translateX(0) translateY(0px);</span><br><span class="line">&#125;</span><br><span class="line">25%&#123;</span><br><span class="line">transform: translateX(200px) translateY(0px);</span><br><span class="line">&#125;</span><br><span class="line">50%&#123;</span><br><span class="line">transform: translateX(200px) translateY(200px);</span><br><span class="line">&#125;</span><br><span class="line">75%&#123;</span><br><span class="line">transform: translateX(0) translateY(200px);</span><br><span class="line">&#125;</span><br><span class="line">100%&#123;</span><br><span class="line">transform: translateX(0) translateY(0px);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">            动画是CSS3中具有颠覆性的特征之一，可通过设置多个节点来精确控制一个或一组动画，常用来实现复杂的动画效果。</span><br><span class="line">1、必要元素：</span><br><span class="line">a、通过@keyframes指定动画序列；</span><br><span class="line">b、通过百分比将动画序列分割成多个节点；</span><br><span class="line">c、在各节点中分别定义各属性</span><br><span class="line">d、通过animation将动画应用于相应元素；</span><br><span class="line"></span><br><span class="line">2、关键属性</span><br><span class="line">1. Animation-name 动画名称(必填)</span><br><span class="line">2. Animation-duration 动画持续时间</span><br><span class="line">3. animation-timing-function</span><br><span class="line">linear/ease/ease-in/ease-out/ease-in-out/cubic-bezier(n,n,n,n)：特定的贝塞尔曲线类型，4个数值需在[0, 1]区间内</span><br><span class="line">4. animation-delay 动画延迟（只是第一次）</span><br><span class="line">5. animation-iteration-count 重复次数infinite 无限次</span><br><span class="line">6.animation-direction动画是否重置后再开始播放</span><br><span class="line">alternate动画直接从上一次停止的位置开始执行，倒着来</span><br><span class="line">normal动画第二次直接跳到0%的状态开始执行</span><br><span class="line">7.animation-fill-mode动画执行完毕后状态</span><br><span class="line">forwards当动画完成后，保持最后一个属性值（在最后一个关键帧中定义）。</span><br><span class="line">backwards在 animation-delay 所指定的一段时间内，在动画显示之前，应用开始属性值（在第一个关键帧中定义）。</span><br><span class="line">both设置对象状态为动画结束或开始的状态，结束时状态优先</span><br><span class="line"></span><br><span class="line">语法:animation: name duration timing-function delay iteration-count direction fill-mode;</span><br><span class="line">name duration 必须写,其余可以都不写</span><br><span class="line"></span><br><span class="line">animation-play-state播放状态（ running 播放 和 paused 暂停 ）</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="向上弹出-transition-bottom-1s-ease-in"><a href="#向上弹出-transition-bottom-1s-ease-in" class="headerlink" title="向上弹出 transition: bottom 1s ease-in;"></a>向上弹出 transition: bottom 1s ease-in;</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.13/vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        html,</span><br><span class="line">        body &#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #app &#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .pop &#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 0;</span><br><span class="line">            transition: bottom 1s ease-in;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .content &#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background-color: red;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .show1 &#123;</span><br><span class="line">            bottom: 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;div @click=&quot;handleClick&quot;&gt;</span><br><span class="line">            点我</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;popup&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;pop&quot; :style=&quot;&#123;bottom: flag?&apos;0px&apos;:&apos;-300px&apos;&#125;&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            el: &quot;#app&quot;,</span><br><span class="line">            data() &#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    flag: false</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                handleClick() &#123;</span><br><span class="line">                    this.flag = true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="向下弹出-transition-top-5s-ease-in"><a href="#向下弹出-transition-top-5s-ease-in" class="headerlink" title="向下弹出   transition: top .5s ease-in;"></a>向下弹出   transition: top .5s ease-in;</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.13/vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .header &#123;</span><br><span class="line">            position: fixed;</span><br><span class="line">            top: 0;</span><br><span class="line">            left: 0;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 100px;</span><br><span class="line">            font-size: 20px;</span><br><span class="line">            background-color: red;</span><br><span class="line">            height: 100px;</span><br><span class="line">            width: 100%;</span><br><span class="line">            z-index: 100;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .nav &#123;</span><br><span class="line">            position: fixed;</span><br><span class="line">            top: 100px;</span><br><span class="line">            left: 0;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 100px;</span><br><span class="line">            font-size: 20px;</span><br><span class="line">            background-color: blue;</span><br><span class="line">            height: 100px;</span><br><span class="line">            width: 100%;</span><br><span class="line">            z-index: 100;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /*弹出框*/</span><br><span class="line">        .mask &#123;</span><br><span class="line">            position: fixed;</span><br><span class="line">            top: 0;</span><br><span class="line">            left: 0;</span><br><span class="line">            height: 100%;</span><br><span class="line">            width: 100%;</span><br><span class="line">            background: rgba(0, 0, 0, 0.5);</span><br><span class="line">            z-index: 99;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .share &#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 273px;</span><br><span class="line">            position: fixed;</span><br><span class="line">            left: 0;</span><br><span class="line">            z-index: 99;</span><br><span class="line">            transition: top .5s ease-in;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .share .share-opt &#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 210px;</span><br><span class="line">       </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .share .btn &#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 40px;</span><br><span class="line">            line-height: 40px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            border-radius: 20px;</span><br><span class="line">            color: #333333;</span><br><span class="line">            font-size: 14px;</span><br><span class="line">            border: none;</span><br><span class="line">            margin-top: 10px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .bg-color &#123;</span><br><span class="line">            background-color: #ffffff;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;header&quot;&gt;</span><br><span class="line">            header</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;nav&quot; @click=&quot;shareType = !shareType&quot;&gt;</span><br><span class="line">            点我</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!--弹出框--&gt;</span><br><span class="line">        &lt;div class=&quot;popup&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;mask&quot; v-show=&quot;shareType&quot;&gt;&lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;share&quot; :style=&quot;&#123;top: shareType?&apos;200px&apos; : &apos;-74px&apos;&#125;&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;share-opt bg-color&quot;&gt;&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            el: &quot;#app&quot;,</span><br><span class="line">            data() &#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    shareType: false,</span><br><span class="line">                    num: -273</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                cancel() &#123;</span><br><span class="line">                    this.num = -273;</span><br><span class="line">                    setTimeout(() =&gt; &#123;</span><br><span class="line">                        this.shareType = false;</span><br><span class="line">                    &#125;, 600)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="css水波纹效果"><a href="#css水波纹效果" class="headerlink" title="css水波纹效果"></a>css水波纹效果</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        .box &#123;</span><br><span class="line">            height: 100vh;</span><br><span class="line">            display: flex;</span><br><span class="line">            justify-content: center;</span><br><span class="line">            align-items: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .btn &#123;</span><br><span class="line">            position: relative;</span><br><span class="line">            padding: 15px 24px;</span><br><span class="line">            border-radius: 4px;</span><br><span class="line">            background-color: #1976d2;</span><br><span class="line">            color: #fff;</span><br><span class="line">            box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.15), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);</span><br><span class="line">            font-size: 18px;</span><br><span class="line">            outline: 0;</span><br><span class="line">            border: 0;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            transition: background-color .25s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .btn::after &#123;</span><br><span class="line">            content: '';</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 0;</span><br><span class="line">            left: 0;</span><br><span class="line">            right: 0;</span><br><span class="line">            bottom: 0;</span><br><span class="line">            background-image: radial-gradient(circle, #ccc 10%, transparent 10.1%);</span><br><span class="line">            transform: scale(10);</span><br><span class="line">            opacity: 0;</span><br><span class="line">            transition: all .6s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .btn:active::after &#123;</span><br><span class="line">            transform: scale(0);</span><br><span class="line">            opacity: .5;</span><br><span class="line">            transition: 0s;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue</title>
      <link href="/2019/09/21/vue%E4%BC%A0%E5%80%BC/"/>
      <url>/2019/09/21/vue%E4%BC%A0%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<pre><code>关于vue父向子传值问题</code></pre><a id="more"></a><h3 id="props的用法"><a href="#props的用法" class="headerlink" title="props的用法"></a>props的用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;first :fromparent=&apos;parent&apos;&gt;&lt;/first&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;template id=&apos;child&apos;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123;child&#125;&#125;我是一个子组件&#123;&#123;fromparent&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var child = &#123;</span><br><span class="line">    template = &apos;#child&apos;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            child:&apos;我是两年半的实习生&apos;      </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    props:[&apos;fromparent&apos;]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el:&apos;#app&apos;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            parent:&apos;我是你的爸爸&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        compontes:&#123;</span><br><span class="line">            first</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="子调用父方法this-emit-‘event’-arguments"><a href="#子调用父方法this-emit-‘event’-arguments" class="headerlink" title="子调用父方法this.$emit(‘event’,[arguments])"></a>子调用父方法this.$emit(‘event’,[arguments])</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&apos;#app&apos;&gt;</span><br><span class="line">    &lt;child @fun = &apos;parent&apos;&gt;&lt;/child&gt;        //@fun 里面的fun是自定义的</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">  &lt;template id=&apos;child&apos;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type = &apos;button&apos; value=&apos;调用父方法&apos; @click = &apos;childclick&apos;&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var child = (</span><br><span class="line">    template:&apos;child&apos;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        childclick()&#123;</span><br><span class="line">                this.$emit(&apos;fun&apos;)</span><br><span class="line">                //子调用父方法一定要写到子里面 ,用别人的值,方法要写到自身身上</span><br><span class="line">                **this.$emit(&apos;fun&apos;,[....argu])传参要从第二个传值,不带引号**</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el:&apos;#app&apos;,</span><br><span class="line">        data:&#123;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        components:&#123;</span><br><span class="line">            child</span><br><span class="line">        &#125;</span><br><span class="line">        methods:&#123;</span><br><span class="line">            parent()&#123;</span><br><span class="line">                console.log(&apos;调用了父方法&apos;)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="兄弟传值"><a href="#兄弟传值" class="headerlink" title="兄弟传值"></a>兄弟传值</h3><ul><li><p>通过公共的bus<br>创建一个公共的bus，然后导出一个bus</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">bus.js</span><br><span class="line">import Vue from &apos;vue&apos;;</span><br><span class="line">export const bus = new Vue();</span><br><span class="line">然后A B两个组件同时引入bus.js</span><br><span class="line">import &#123; bus &#125; from &apos;@/components/bus.js&apos;;</span><br><span class="line">A组件$emit事件及要传的值</span><br><span class="line">getBrother()&#123;</span><br><span class="line">    bus.$emit(&apos;testEvent&apos;,&apos;我是要传的值&apos;)</span><br><span class="line">&#125;</span><br><span class="line">B组件接收</span><br><span class="line">bus.$on(&apos;testEvent&apos;,val =&gt; &#123;</span><br><span class="line">    console.log(val);</span><br><span class="line">    this.val = val;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>当然了也可以直接引入vue-bus</p></li></ul><ul><li>$ yarn add vue-bus</li><li>$ npm install vue-bus –save</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git如何上传到github</title>
      <link href="/2019/09/20/git/"/>
      <url>/2019/09/20/git/</url>
      
        <content type="html"><![CDATA[<p>基本命令和问题</p><a id="more"></a><h3 id="用到的git命令"><a href="#用到的git命令" class="headerlink" title="用到的git命令"></a>用到的git命令</h3><blockquote><p>官网下载git 一路傻瓜式安装就行了;</p><p>把你想要上传的所有文件拉到一个文件夹里,在空白区域右键 git bash here</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; git init </span><br><span class="line">&gt; git add . </span><br><span class="line">&gt; git commit -m &apos;你对传到github上的文件的描述&apos;</span><br><span class="line">&gt; git remote add origin &apos;github的地址&apos;</span><br><span class="line">&gt; git push -u origin master </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="首次安装可能会遇到的一些问题"><a href="#首次安装可能会遇到的一些问题" class="headerlink" title="首次安装可能会遇到的一些问题"></a>首次安装可能会遇到的一些问题</h3><ol><li><p>如果窗口看到提示一下两个信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;John Doe&quot;</span><br><span class="line">git config --global user.email johndoe@example.com</span><br><span class="line"> </span><br><span class="line">解决办法：按上面的提升，cmd窗口接着输入</span><br><span class="line"></span><br><span class="line">git config --global user.name &quot;这里是你的github用户名  </span><br><span class="line">git config --global user.email xxx@xxx.com(你的邮箱)</span><br></pre></td></tr></table></figure></li><li><p>提交到远程时候,提示:</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fatal:remote origin already exists</span><br><span class="line">解决办法:删除远程git仓库</span><br><span class="line">git remote rm origin</span><br><span class="line">git remote add origin &apos;github的地址&apos;</span><br><span class="line">git push -u origin master </span><br><span class="line">首次登陆需要登陆按照提示输入账户名和密码</span><br></pre></td></tr></table></figure><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><ul><li>新建分支 git checkout -b test  </li><li>切换到分支 git checkout test</li><li>合并分支<ol><li>首先切换到master分支上 git checkout master</li><li>如果是多人开发的话 需要把远程master上的代码pull下来  git pull origin master</li><li>然后我们把test分支的代码合并到master上  git  merge test</li></ol></li><li>git clone -b branchname <a href="https://github.com/xxxxx/xx.git" target="_blank" rel="noopener">https://github.com/xxxxx/xx.git</a>  下载某个分支</li></ul><ul><li>查看所有分支  git branch -a</li><li>删除远程分支test git push origin –delete test</li><li>删除本地分支 test  git branch -d  test</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于HTML的基本知识</title>
      <link href="/2019/09/18/base/"/>
      <url>/2019/09/18/base/</url>
      
        <content type="html"><![CDATA[<p>“9.09-9.20所学的HTML知识总结”</p><a id="more"></a><h3 id="a-img-p-h1-h6"><a href="#a-img-p-h1-h6" class="headerlink" title="a img p h1-h6"></a>a img p h1-h6</h3><blockquote><p>target = ‘_self blank’ _self 自身页面打开可以后退自身标签一般不使用</p><p>blank 新页面打开 不可以后退<br>img 只设置宽或者高另一边会自动按原图宽高比例设置 在VScode上引入上一级图片 ../<br>  引入下一级目录  当前文件夹/                  &gt;<br>p h1-h6 默认有margin</p></blockquote><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> a:link&#123;&#125; </span><br><span class="line"></span><br><span class="line">匹配未被访问时的状态</span><br><span class="line"></span><br><span class="line">a:visited&#123;&#125; </span><br><span class="line"></span><br><span class="line">匹配链接访问过的状态</span><br><span class="line"></span><br><span class="line"> a:active&#123;&#125;</span><br><span class="line"></span><br><span class="line">匹配链接在激活时的状态</span><br><span class="line"></span><br><span class="line"> a:hover&#123;&#125;</span><br><span class="line"></span><br><span class="line">匹配鼠标放上去时的状态</span><br></pre></td></tr></table></figure><h3 id="a标签的link、visited、hover、active是有一定顺序的"><a href="#a标签的link、visited、hover、active是有一定顺序的" class="headerlink" title="a标签的link、visited、hover、active是有一定顺序的"></a>a标签的link、visited、hover、active是有一定顺序的</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a:link </span><br><span class="line">a:visited </span><br><span class="line">a:hover </span><br><span class="line">a:active</span><br></pre></td></tr></table></figure><h3 id="文字多出部分显示省略号"><a href="#文字多出部分显示省略号" class="headerlink" title="文字多出部分显示省略号"></a>文字多出部分显示省略号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">overflow: hidden;</span><br><span class="line">white-space: nowrap;</span><br><span class="line">text-overflow: ellipsis;</span><br></pre></td></tr></table></figure><h3 id="行内元素和块级元素-img算什么-行内元素怎么转化为块级元素"><a href="#行内元素和块级元素-img算什么-行内元素怎么转化为块级元素" class="headerlink" title="行内元素和块级元素?img算什么?行内元素怎么转化为块级元素?"></a>行内元素和块级元素?img算什么?行内元素怎么转化为块级元素?</h3><blockquote><p>行内元素：和有他元素都在一行上,高度、行高及外边距&gt; 和内边距都不可改变,文字图片的宽度不可改变,只能容&gt; 纳文本或者其他行内元素;其中img是行元素;</p><p>行内元素设置 margin padding 无效<br>块级元素：总是在新行上开始,高度、行高及外边距和内边距都可控制,可以容纳内敛元素和其他元素;</p><p>行元素转换为块级元素方式：display：block;</p></blockquote><h3 id="如何解决父元素高度塌陷问题"><a href="#如何解决父元素高度塌陷问题" class="headerlink" title="如何解决父元素高度塌陷问题"></a>如何解决父元素高度塌陷问题</h3><p>1 让父元素浮动<br>2 增加空的元素到最后位置 clear:both<br>3 增加一个类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.clear::after&#123;</span><br><span class="line">    content:&apos;&apos;;</span><br><span class="line">    display:block;</span><br><span class="line">    clear:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><blockquote><p>相对定位:一般微调;不会脱离文档流;</p><p>绝对定位(fixed,absolute):会脱离文档流的元素会变成块级元素,默认情况下,宽度由内容决定<br>                        脱离文档流的元素margin可以使用,但auto失效</p></blockquote><h3 id="将多个元素设置为同一行-清除浮动有几种方式"><a href="#将多个元素设置为同一行-清除浮动有几种方式" class="headerlink" title="将多个元素设置为同一行?清除浮动有几种方式?"></a>将多个元素设置为同一行?清除浮动有几种方式?</h3><blockquote><p>将多个元素设置为同一行：float，inline-block<br>清除浮动的方式:<br>                1. 添加新的元素 、应用 clear：both;<br>                2. 父级div定义 overflow: hidden;</p></blockquote><h3 id="简述几个css-hack"><a href="#简述几个css-hack" class="headerlink" title="简述几个css hack?"></a>简述几个css hack?</h3><h4 id="图片间隙"><a href="#图片间隙" class="headerlink" title="图片间隙"></a>图片间隙</h4><blockquote><p>在div中插入图片，图片会将div下方撑大3px。</p><p>hack1: 将div与img标签写在同一行。</p><p>hack2：给img标签属性添加display：block；</p></blockquote><h4 id="dt-li-中的图片间隙"><a href="#dt-li-中的图片间隙" class="headerlink" title="dt li 中的图片间隙"></a>dt li 中的图片间隙</h4><blockquote><p>hack：给<img>添加display：block；</p></blockquote><h3 id="鼠标指针"><a href="#鼠标指针" class="headerlink" title="鼠标指针"></a>鼠标指针</h3><blockquote><p>hack：若统一某一元素鼠标指针为手型：cursor：pointer；</p><p>当li内的a转化块元素时，给a设置float，IE里面会出现阶梯状</p><p>hack1：给a加display：inline-block；</p><p>hack2：给li加float：left；</p></blockquote><h3 id="href和src区别-title和alt"><a href="#href和src区别-title和alt" class="headerlink" title="href和src区别? title和alt"></a>href和src区别? title和alt</h3><blockquote><p>href (Hypertext Reference)指定网络资源的位置（超文本引用），从而在当前元素或者当前文档和由当前属性定义的需要的锚点或资源之间定义一个链接或者关系，在 link和a 等元素上使用。</p><p>src (Source)属性仅仅嵌入当前资源到当前文档元素定义的位置，是页面必不可少的一部分，是引入。在 img、script、iframe 等元素上使用。</p><p>title：既是html标签，又是html属性，title作为属性时，用来为元素提供额外说明信息.</p><p>alt：alt是html标签的属性，alt属性则是用来指定替换文字，只能用在img、area和input元素中（包括applet元素），用于网页中图片无法正常显示时给用户提供文字说明使其了解图像信息.</p></blockquote><h3 id="如何让一个div水平垂直居中"><a href="#如何让一个div水平垂直居中" class="headerlink" title="如何让一个div水平垂直居中"></a>如何让一个div水平垂直居中</h3><p>方法1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.div1&#123; width:400px;</span><br><span class="line">       height:400px; </span><br><span class="line">       border:#CCC 1px solid;</span><br><span class="line">       background:#99f;</span><br><span class="line">       position:absolute;</span><br><span class="line">       left:50%;   </span><br><span class="line">       top:50%;   </span><br><span class="line">       transform: translate(-50%,-50%); &#125;  </span><br><span class="line"></span><br><span class="line">       &lt;div class=&quot;div1&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>方法2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.div2&#123; width:400px;</span><br><span class="line">       height:400px;</span><br><span class="line">       border:#CCC 1px solid;</span><br><span class="line">       background:#99f;</span><br><span class="line">       position: absolute;</span><br><span class="line">       left:0;</span><br><span class="line">       top: 0;</span><br><span class="line">       bottom: 0;</span><br><span class="line">       right: 0; </span><br><span class="line">       margin: auto; &#125;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;div2&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>方法三</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.div3&#123; width:400px;</span><br><span class="line">      height:400px;</span><br><span class="line">      border:#CCC 1px solid;</span><br><span class="line">  background:#9f9;</span><br><span class="line">    position: absolute;</span><br><span class="line">        left: 50%;top:50%;  </span><br><span class="line"> margin-left:-200px;</span><br><span class="line">  margin-top: -200px;  &#125;  </span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;div3&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="图片和文字在同一行显示"><a href="#图片和文字在同一行显示" class="headerlink" title="图片和文字在同一行显示?"></a>图片和文字在同一行显示?</h3><blockquote><p>1 在css中给div添加上“vertical-align:middle”属性。<br>2 分别把图片和文字放入不同的div中，然后用“margin”属性进行定位，就可以使他们显示在同一行。<br>3 把图片设置为背景图片。</p></blockquote><h3 id="简述一下同步和异步的区别"><a href="#简述一下同步和异步的区别" class="headerlink" title="简述一下同步和异步的区别"></a>简述一下同步和异步的区别</h3><h4 id="同步是阻塞模式-异步是非阻塞模式"><a href="#同步是阻塞模式-异步是非阻塞模式" class="headerlink" title="同步是阻塞模式,异步是非阻塞模式"></a>同步是阻塞模式,异步是非阻塞模式</h4><blockquote><p>同步就是指一个进程在执行某个请求的时候,若该请求需要一段时间才能返回信息,那么这个进程就要一直等待下去,直到收到返回信息才继续执行下去</p><p>异步是指进程不要一直等下去,而是继续执行下面的操作,不管其他进程的状态.当有消息返回时系统会通知进程进行处理,这样可以提高执行的效率</p></blockquote><h3 id="px和em的区别"><a href="#px和em的区别" class="headerlink" title="px和em的区别"></a>px和em的区别</h3><blockquote><p>相同点: px和em都是长度单位;</p><p>异同点: px的值是固定的,指定多少就是多少,计算比较容易.em值是不固定的,并且em会继承父级元素的字体大小.浏览器的默认字体高都是16px.所以未经调整的浏览器都符合:1em = 16px.<br>12px = 0.75em,10px = 0.625em</p></blockquote><h3 id="浏览器的内核分别是什么"><a href="#浏览器的内核分别是什么" class="headerlink" title="浏览器的内核分别是什么?"></a>浏览器的内核分别是什么?</h3><blockquote><p>IE: trident内核<br>Firefox: gecko<br>Safari: webkit<br>Opera: Blink<br>Chrome:Blink </p></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
